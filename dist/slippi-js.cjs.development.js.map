{"version":3,"file":"slippi-js.cjs.development.js","sources":["../src/melee/animationUtils.ts","../src/melee/characterUtils.ts","../src/melee/moveUtils.ts","../src/melee/stageUtils.ts","../src/melee/types.ts","../src/stats/common.ts","../src/stats/actions.ts","../src/stats/combos.ts","../src/stats/conversions.ts","../src/types.ts","../src/stats/inputs.ts","../src/stats/overall.ts","../src/stats/stats.ts","../src/stats/stocks.ts","../src/utils/exists.ts","../src/stats/targets.ts","../src/utils/gameTimer.ts","../src/console/communication.ts","../src/console/types.ts","../src/console/consoleConnection.ts","../src/console/dolphinConnection.ts","../src/utils/fullwidth.ts","../src/utils/slpReader.ts","../src/utils/slpStream.ts","../src/utils/slpFile.ts","../src/utils/slpFileWriter.ts","../src/utils/rollbackCounter.ts","../src/utils/slpParser.ts","../src/utils/getWinners.ts","../src/utils/homeRunDistance.ts","../src/SlippiGame.ts"],"sourcesContent":["// eslint-disable-next-line\nexport function getDeathDirection(actionStateId: number) {\n  if (actionStateId > 0xa) {\n    return null;\n  }\n\n  switch (actionStateId) {\n    case 0:\n      return \"down\";\n    case 1:\n      return \"left\";\n    case 2:\n      return \"right\";\n    default:\n      return \"up\";\n  }\n}\n","import characters from \"./characters.json\";\n\nexport type CharacterColor = string;\nconst DEFAULT_COLOR: CharacterColor = \"Default\";\n\nexport type CharacterInfo = {\n  id: number;\n  name: string;\n  shortName: string;\n  colors: CharacterColor[];\n};\n\nexport const UnknownCharacter: CharacterInfo = {\n  id: -1,\n  name: \"Unknown Character\",\n  shortName: \"Unknown\",\n  colors: [DEFAULT_COLOR],\n};\n\ntype CharacterId = keyof typeof characters;\n\nfunction generateCharacterInfo(\n  id: number,\n  info?: {\n    name: string;\n    shortName?: string;\n    colors?: CharacterColor[];\n  },\n): CharacterInfo {\n  if (!info) {\n    return UnknownCharacter;\n  }\n\n  return {\n    id,\n    name: info.name,\n    shortName: info.shortName ?? info.name,\n    colors: [DEFAULT_COLOR, ...(info.colors ?? [])],\n  };\n}\n\nexport function getAllCharacters(): CharacterInfo[] {\n  return Object.entries(characters)\n    .map(([id, data]) => generateCharacterInfo(parseInt(id, 10), data))\n    .sort((a, b) => a.id - b.id);\n}\n\nexport function getCharacterInfo(externalCharacterId: number): CharacterInfo {\n  const data = characters[externalCharacterId.toString() as CharacterId];\n  return generateCharacterInfo(externalCharacterId, data);\n}\n\nexport function getCharacterShortName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.shortName;\n}\n\nexport function getCharacterName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.name;\n}\n\n// Return a human-readable color from a characterCode.\nexport function getCharacterColorName(externalCharacterId: number, characterColor: number): CharacterColor {\n  const character = getCharacterInfo(externalCharacterId);\n  const color = character.colors[characterColor];\n  if (color) {\n    return color;\n  }\n  return DEFAULT_COLOR;\n}\n","import moveNames from \"./moves.json\";\n\nexport type Move = {\n  id: number;\n  name: string;\n  shortName: string;\n};\n\nexport const UnknownMove: Move = {\n  id: -1,\n  name: \"Unknown Move\",\n  shortName: \"unknown\",\n};\n\ntype MoveId = keyof typeof moveNames;\n\nexport function getMoveInfo(moveId: number): Move {\n  const moveName = moveNames[moveId.toString() as MoveId];\n  if (!moveName) {\n    return UnknownMove;\n  }\n  return {\n    id: moveId,\n    name: moveName.name,\n    shortName: moveName.shortName,\n  };\n}\n\nexport function getMoveShortName(moveId: number): string {\n  const move = getMoveInfo(moveId);\n  return move.shortName;\n}\n\nexport function getMoveName(moveId: number): string {\n  const move = getMoveInfo(moveId);\n  return move.name;\n}\n","import stageNames from \"./stages.json\";\n\nexport type StageInfo = {\n  id: number;\n  name: string;\n};\n\nexport const UnknownStage: StageInfo = {\n  id: -1,\n  name: \"Unknown Stage\",\n};\n\ntype StageId = keyof typeof stageNames;\n\nexport function getStageInfo(stageId: number): StageInfo {\n  const stageName = stageNames[stageId.toString() as StageId];\n  if (!stageName) {\n    return UnknownStage;\n  }\n  return {\n    id: stageId,\n    name: stageName,\n  };\n}\n\nexport function getStageName(stageId: number): string {\n  const stage = getStageInfo(stageId);\n  return stage.name;\n}\n","export enum Character {\n  CAPTAIN_FALCON = 0,\n  DONKEY_KONG = 1,\n  FOX = 2,\n  GAME_AND_WATCH = 3,\n  KIRBY = 4,\n  BOWSER = 5,\n  LINK = 6,\n  LUIGI = 7,\n  MARIO = 8,\n  MARTH = 9,\n  MEWTWO = 10,\n  NESS = 11,\n  PEACH = 12,\n  PIKACHU = 13,\n  ICE_CLIMBERS = 14,\n  JIGGLYPUFF = 15,\n  SAMUS = 16,\n  YOSHI = 17,\n  ZELDA = 18,\n  SHEIK = 19,\n  FALCO = 20,\n  YOUNG_LINK = 21,\n  DR_MARIO = 22,\n  ROY = 23,\n  PICHU = 24,\n  GANONDORF = 25,\n  MASTER_HAND = 26,\n  WIREFRAME_MALE = 27,\n  WIREFRAME_FEMALE = 28,\n  GIGA_BOWSER = 29,\n  CRAZY_HAND = 30,\n  SANDBAG = 31,\n  POPO = 32,\n}\n\nexport enum Stage {\n  FOUNTAIN_OF_DREAMS = 2,\n  POKEMON_STADIUM = 3,\n  PEACHS_CASTLE = 4,\n  KONGO_JUNGLE = 5,\n  BRINSTAR = 6,\n  CORNERIA = 7,\n  YOSHIS_STORY = 8,\n  ONETT = 9,\n  MUTE_CITY = 10,\n  RAINBOW_CRUISE = 11,\n  JUNGLE_JAPES = 12,\n  GREAT_BAY = 13,\n  HYRULE_TEMPLE = 14,\n  BRINSTAR_DEPTHS = 15,\n  YOSHIS_ISLAND = 16,\n  GREEN_GREENS = 17,\n  FOURSIDE = 18,\n  MUSHROOM_KINGDOM = 19,\n  MUSHROOM_KINGDOM_2 = 20,\n  VENOM = 22,\n  POKE_FLOATS = 23,\n  BIG_BLUE = 24,\n  ICICLE_MOUNTAIN = 25,\n  ICETOP = 26,\n  FLAT_ZONE = 27,\n  DREAMLAND = 28,\n  YOSHIS_ISLAND_N64 = 29,\n  KONGO_JUNGLE_N64 = 30,\n  BATTLEFIELD = 31,\n  FINAL_DESTINATION = 32,\n  TARGET_TEST_MARIO = 33,\n  TARGET_TEST_CAPTAIN_FALCON = 34,\n  TARGET_TEST_YOUNG_LINK = 35,\n  TARGET_TEST_DONKEY_KONG = 36,\n  TARGET_TEST_DR_MARIO = 37,\n  TARGET_TEST_FALCO = 38,\n  TARGET_TEST_FOX = 39,\n  TARGET_TEST_ICE_CLIMBERS = 40,\n  TARGET_TEST_KIRBY = 41,\n  TARGET_TEST_BOWSER = 42,\n  TARGET_TEST_LINK = 43,\n  TARGET_TEST_LUIGI = 44,\n  TARGET_TEST_MARTH = 45,\n  TARGET_TEST_MEWTWO = 46,\n  TARGET_TEST_NESS = 47,\n  TARGET_TEST_PEACH = 48,\n  TARGET_TEST_PICHU = 49,\n  TARGET_TEST_PIKACHU = 50,\n  TARGET_TEST_JIGGLYPUFF = 51,\n  TARGET_TEST_SAMUS = 52,\n  TARGET_TEST_SHEIK = 53,\n  TARGET_TEST_YOSHI = 54,\n  TARGET_TEST_ZELDA = 55,\n  TARGET_TEST_GAME_AND_WATCH = 56,\n  TARGET_TEST_ROY = 57,\n  TARGET_TEST_GANONDORF = 58,\n  RACE_TO_THE_FINISH = 82,\n  GRAB_THE_TROPHIES = 83,\n  HOME_RUN_CONTEST = 84,\n  ALL_STAR_LOBBY = 85,\n  EVENT_ONE = 202,\n  EVENT_EIGHTEEN = 203,\n  EVENT_THREE = 204,\n  EVENT_FOUR = 205,\n  EVENT_FIVE = 206,\n  EVENT_SIX = 207,\n  EVENT_SEVEN = 208,\n  EVENT_EIGHT = 209,\n  EVENT_NINE = 210,\n  EVENT_TEN_PART_ONE = 211,\n  EVENT_ELEVEN = 212,\n  EVENT_TWELVE = 213,\n  EVENT_THIRTEEN = 214,\n  EVENT_FOURTEEN = 215,\n  EVENT_THIRTY_SEVEN = 216,\n  EVENT_SIXTEEN = 217,\n  EVENT_SEVENTEEN = 218,\n  EVENT_TWO = 219,\n  EVENT_NINETEEN = 220,\n  EVENT_TWENTY_PART_ONE = 221,\n  EVENT_TWENTY_ONE = 222,\n  EVENT_TWENTY_TWO = 223,\n  EVENT_TWENTY_SEVEN = 224,\n  EVENT_TWENTY_FOUR = 225,\n  EVENT_TWENTY_FIVE = 226,\n  EVENT_TWENTY_SIX = 227,\n  EVENT_TWENTY_THREE = 228,\n  EVENT_TWENTY_EIGHT = 229,\n  EVENT_TWENTY_NINE = 230,\n  EVENT_THIRTY_PART_ONE = 231,\n  EVENT_THIRTY_ONE = 232,\n  EVENT_THIRTY_TWO = 233,\n  EVENT_THIRTY_THREE = 234,\n  EVENT_THIRTY_FOUR = 235,\n  EVENT_FORTY_EIGHT = 236,\n  EVENT_THIRTY_SIX_PART_ONE = 237,\n  EVENT_FIFTEEN = 238,\n  EVENT_THIRTY_EIGHT = 239,\n  EVENT_THIRTY_NINE = 240,\n  EVENT_FORTY_PART_ONE = 241,\n  EVENT_FORTY_ONE = 242,\n  EVENT_FORTY_TWO = 243,\n  EVENT_FORTY_THREE = 244,\n  EVENT_FORTY_FOUR = 245,\n  EVENT_FORTY_FIVE = 246,\n  EVENT_FORTY_SIX = 247,\n  EVENT_FORTY_SEVEN = 248,\n  EVENT_THIRTY_FIVE = 249,\n  EVENT_FORTY_NINE_PART_ONE = 250,\n  EVENT_FIFTY = 251,\n  EVENT_FIFTY_ONE = 252,\n  EVENT_TEN_PART_TWO = 253,\n  EVENT_TEN_PART_THREE = 254,\n  EVENT_TEN_PART_FOUR = 255,\n  EVENT_TEN_PART_FIVE = 256,\n  EVENT_TWENTY_PART_TWO = 257,\n  EVENT_TWENTY_PART_THREE = 258,\n  EVENT_TWENTY_PART_FOUR = 259,\n  EVENT_TWENTY_PART_FIVE = 260,\n  EVENT_THIRTY_PART_TWO = 261,\n  EVENT_THIRTY_PART_THREE = 262,\n  EVENT_THIRTY_PART_FOUR = 263,\n  EVENT_FORTY_PART_TWO = 264,\n  EVENT_FORTY_PART_THREE = 265,\n  EVENT_FORTY_PART_FOUR = 266,\n  EVENT_FORTY_PART_FIVE = 267,\n  EVENT_FORTY_NINE_PART_TWO = 268,\n  EVENT_FORTY_NINE_PART_THREE = 269,\n  EVENT_FORTY_NINE_PART_FOUR = 270,\n  EVENT_FORTY_NINE_PART_FIVE = 271,\n  EVENT_FORTY_NINE_PART_SIX = 272,\n  EVENT_THIRTY_SIX_PART_TWO = 273,\n  MULTI_MAN_MELEE = 285,\n}\n","import type { GameStartType, PostFrameUpdateType } from \"../types\";\n\nexport type StatsType = {\n  gameComplete: boolean;\n  lastFrame: number;\n  playableFrameCount: number;\n  stocks: StockType[];\n  conversions: ConversionType[];\n  combos: ComboType[];\n  actionCounts: ActionCountsType[];\n  overall: OverallType[];\n};\n\nexport type StadiumStatsType = HomeRunContestResultType | TargetTestResultType;\n\nexport type TargetTestResultType = {\n  type: \"target-test\";\n  targetBreaks: TargetBreakType[];\n};\n\nexport type HomeRunContestResultType = {\n  type: \"home-run-contest\";\n  distance: number;\n  units: \"feet\" | \"meters\";\n};\n\nexport type RatioType = {\n  count: number;\n  total: number;\n  ratio: number | null;\n};\n\nexport type PlayerIndexedType = {\n  playerIndex: number;\n  opponentIndex: number;\n};\n\nexport type DurationType = {\n  startFrame: number;\n  endFrame?: number | null;\n};\n\nexport type DamageType = {\n  startPercent: number;\n  currentPercent: number;\n  endPercent?: number | null;\n};\n\nexport type StockType = DurationType &\n  DamageType & {\n    playerIndex: number;\n    count: number;\n    deathAnimation?: number | null;\n  };\n\nexport type MoveLandedType = {\n  playerIndex: number;\n  frame: number;\n  moveId: number;\n  hitCount: number;\n  damage: number;\n};\n\nexport type ComboType = DurationType &\n  DamageType & {\n    playerIndex: number;\n    moves: MoveLandedType[];\n    didKill: boolean;\n    lastHitBy: number | null;\n  };\n\nexport type TargetBreakType = {\n  spawnId: number;\n  frameDestroyed: number | null;\n  positionX: number;\n  positionY: number;\n};\n\nexport type ConversionType = ComboType & {\n  openingType: string;\n};\n\nexport type ActionCountsType = {\n  playerIndex: number;\n  wavedashCount: number;\n  wavelandCount: number;\n  airDodgeCount: number;\n  dashDanceCount: number;\n  spotDodgeCount: number;\n  ledgegrabCount: number;\n  rollCount: number;\n  lCancelCount: {\n    success: number;\n    fail: number;\n  };\n  attackCount: {\n    jab1: number;\n    jab2: number;\n    jab3: number;\n    jabm: number;\n    dash: number;\n    ftilt: number;\n    utilt: number;\n    dtilt: number;\n    fsmash: number;\n    usmash: number;\n    dsmash: number;\n    nair: number;\n    fair: number;\n    bair: number;\n    uair: number;\n    dair: number;\n  };\n  grabCount: {\n    success: number;\n    fail: number;\n  };\n  throwCount: {\n    up: number;\n    forward: number;\n    back: number;\n    down: number;\n  };\n  groundTechCount: {\n    // tech away/in are in reference to the opponents position and not the stage\n    away: number;\n    in: number;\n    neutral: number;\n    fail: number;\n  };\n  wallTechCount: {\n    success: number;\n    fail: number;\n  };\n};\n\nexport type InputCountsType = {\n  buttons: number;\n  triggers: number;\n  joystick: number;\n  cstick: number;\n  total: number;\n};\n\nexport type OverallType = {\n  playerIndex: number;\n  inputCounts: InputCountsType;\n  conversionCount: number;\n  totalDamage: number;\n  killCount: number;\n  successfulConversions: RatioType;\n  inputsPerMinute: RatioType;\n  digitalInputsPerMinute: RatioType;\n  openingsPerKill: RatioType;\n  damagePerOpening: RatioType;\n  neutralWinRatio: RatioType;\n  counterHitRatio: RatioType;\n  beneficialTradeRatio: RatioType;\n};\n\nexport enum State {\n  // Animation ID ranges\n  DAMAGE_START = 0x4b,\n  DAMAGE_END = 0x5b,\n  CAPTURE_START = 0xdf,\n  CAPTURE_END = 0xe8,\n  GUARD_START = 0xb2,\n  GUARD_END = 0xb6,\n  GROUNDED_CONTROL_START = 0xe,\n  GROUNDED_CONTROL_END = 0x18,\n  SQUAT_START = 0x27,\n  SQUAT_END = 0x29,\n  DOWN_START = 0xb7,\n  DOWN_END = 0xc6,\n  TECH_START = 0xc7,\n  TECH_END = 0xcc,\n  DYING_START = 0x0,\n  DYING_END = 0xa,\n  CONTROLLED_JUMP_START = 0x18,\n  CONTROLLED_JUMP_END = 0x22,\n  GROUND_ATTACK_START = 0x2c,\n  GROUND_ATTACK_END = 0x40,\n  AERIAL_ATTACK_START = 0x41,\n  AERIAL_ATTACK_END = 0x4a,\n  ATTACK_FTILT_START = 0x33,\n  ATTACK_FTILT_END = 0x37,\n  ATTACK_FSMASH_START = 0x3a,\n  ATTACK_FSMASH_END = 0x3e,\n\n  // Animation ID specific\n  ROLL_FORWARD = 0xe9,\n  ROLL_BACKWARD = 0xea,\n  SPOT_DODGE = 0xeb,\n  AIR_DODGE = 0xec,\n  ACTION_WAIT = 0xe,\n  ACTION_DASH = 0x14,\n  ACTION_KNEE_BEND = 0x18,\n  GUARD_ON = 0xb2,\n  TECH_MISS_UP = 0xb7,\n  JAB_RESET_UP = 0xb9,\n  TECH_MISS_DOWN = 0xbf,\n  JAB_RESET_DOWN = 0xc1,\n  NEUTRAL_TECH = 0xc7,\n  FORWARD_TECH = 0xc8,\n  BACKWARD_TECH = 0xc9,\n  WALL_TECH = 0xca,\n  MISSED_WALL_TECH = 0xf7,\n  DASH = 0x14,\n  TURN = 0x12,\n  LANDING_FALL_SPECIAL = 0x2b,\n  JUMP_FORWARD = 0x19,\n  JUMP_BACKWARD = 0x1a,\n  FALL_FORWARD = 0x1e,\n  FALL_BACKWARD = 0x1f,\n  GRAB = 0xd4,\n  DASH_GRAB = 0xd6,\n  GRAB_WAIT = 0xd8,\n  PUMMEL = 0xd9,\n  CLIFF_CATCH = 0xfc,\n  THROW_UP = 0xdd,\n  THROW_FORWARD = 0xdb,\n  THROW_DOWN = 0xde,\n  THROW_BACK = 0xdc,\n  DAMAGE_FALL = 0x26,\n  ATTACK_JAB1 = 0x2c,\n  ATTACK_JAB2 = 0x2d,\n  ATTACK_JAB3 = 0x2e,\n  ATTACK_JABM = 0x2f,\n  ATTACK_DASH = 0x32,\n  ATTACK_UTILT = 0x38,\n  ATTACK_DTILT = 0x39,\n  ATTACK_USMASH = 0x3f,\n  ATTACK_DSMASH = 0x40,\n  AERIAL_NAIR = 0x41,\n  AERIAL_FAIR = 0x42,\n  AERIAL_BAIR = 0x43,\n  AERIAL_UAIR = 0x44,\n  AERIAL_DAIR = 0x45,\n\n  // Weird GnW IDs\n  GNW_JAB1 = 0x155,\n  GNW_JABM = 0x156,\n  GNW_DTILT = 0x159,\n  GNW_FSMASH = 0x15a,\n  GNW_NAIR = 0x15b,\n  GNW_BAIR = 0x15c,\n  GNW_UAIR = 0x15d,\n\n  // Peach FSMASH ID\n  // FSMASH1 = Golf Club, FSMASH2 = Frying Pan, FSMASH3 = Tennis Racket\n  PEACH_FSMASH1 = 0x15d,\n  PEACH_FSMASH2 = 0x15e,\n  PEACH_FSMASH3 = 0x15f,\n\n  // Command Grabs\n  BARREL_WAIT = 0x125,\n  COMMAND_GRAB_RANGE1_START = 0x10a,\n  COMMAND_GRAB_RANGE1_END = 0x130,\n\n  COMMAND_GRAB_RANGE2_START = 0x147,\n  COMMAND_GRAB_RANGE2_END = 0x152,\n}\n\nexport const Timers = {\n  PUNISH_RESET_FRAMES: 45,\n  RECOVERY_RESET_FRAMES: 45,\n  COMBO_STRING_RESET_FRAMES: 45,\n};\n\nexport function getSinglesPlayerPermutationsFromSettings(settings: GameStartType): PlayerIndexedType[] {\n  if (!settings || settings.players.length !== 2) {\n    // Only return opponent indices for singles\n    return [];\n  }\n\n  return [\n    {\n      playerIndex: settings.players[0]!.playerIndex,\n      opponentIndex: settings.players[1]!.playerIndex,\n    },\n    {\n      playerIndex: settings.players[1]!.playerIndex,\n      opponentIndex: settings.players[0]!.playerIndex,\n    },\n  ];\n}\n\nexport function didLoseStock(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): boolean {\n  if (!frame || !prevFrame) {\n    return false;\n  }\n\n  return prevFrame.stocksRemaining! - frame.stocksRemaining! > 0;\n}\n\nexport function isInControl(state: number): boolean {\n  const ground = state >= State.GROUNDED_CONTROL_START && state <= State.GROUNDED_CONTROL_END;\n  const squat = state >= State.SQUAT_START && state <= State.SQUAT_END;\n  const groundAttack = state > State.GROUND_ATTACK_START && state <= State.GROUND_ATTACK_END;\n  const isGrab = state === State.GRAB;\n  // TODO: Add grounded b moves?\n  return ground || squat || groundAttack || isGrab;\n}\n\nexport function isTeching(state: number): boolean {\n  return state >= State.TECH_START && state <= State.TECH_END;\n}\n\nexport function isDown(state: number): boolean {\n  return state >= State.DOWN_START && state <= State.DOWN_END;\n}\n\nexport function isDamaged(state: number): boolean {\n  return (\n    (state >= State.DAMAGE_START && state <= State.DAMAGE_END) ||\n    state === State.DAMAGE_FALL ||\n    state === State.JAB_RESET_UP ||\n    state === State.JAB_RESET_DOWN\n  );\n}\n\nexport function isGrabbed(state: number): boolean {\n  return state >= State.CAPTURE_START && state <= State.CAPTURE_END;\n}\n\n// TODO: Find better implementation of 3 seperate ranges\nexport function isCommandGrabbed(state: number): boolean {\n  return (\n    ((state >= State.COMMAND_GRAB_RANGE1_START && state <= State.COMMAND_GRAB_RANGE1_END) ||\n      (state >= State.COMMAND_GRAB_RANGE2_START && state <= State.COMMAND_GRAB_RANGE2_END)) &&\n    state !== State.BARREL_WAIT\n  );\n}\n\nexport function isDead(state: number): boolean {\n  return state >= State.DYING_START && state <= State.DYING_END;\n}\n\nexport function calcDamageTaken(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): number {\n  const percent = frame.percent ?? 0;\n  const prevPercent = prevFrame.percent ?? 0;\n\n  return percent - prevPercent;\n}\n","import get from \"lodash/get\";\nimport isEqual from \"lodash/isEqual\";\nimport keyBy from \"lodash/keyBy\";\nimport last from \"lodash/last\";\nimport set from \"lodash/set\";\nimport size from \"lodash/size\";\n\nimport type { FrameEntryType, GameStartType } from \"../types\";\nimport type { ActionCountsType, PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings, State } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// Frame pattern that indicates a dash dance turn was executed\nconst dashDanceAnimations = [State.DASH, State.TURN, State.DASH];\n\ntype PlayerActionState = {\n  playerCounts: ActionCountsType;\n  animations: number[];\n  actionFrameCounters: number[];\n};\n\nexport class ActionsComputer implements StatComputer<ActionCountsType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, PlayerActionState>();\n\n  public setup(settings: GameStartType): void {\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.playerPermutations.forEach((indices) => {\n      const playerCounts: ActionCountsType = {\n        playerIndex: indices.playerIndex,\n        wavedashCount: 0,\n        wavelandCount: 0,\n        airDodgeCount: 0,\n        dashDanceCount: 0,\n        spotDodgeCount: 0,\n        ledgegrabCount: 0,\n        rollCount: 0,\n        lCancelCount: {\n          success: 0,\n          fail: 0,\n        },\n        attackCount: {\n          jab1: 0,\n          jab2: 0,\n          jab3: 0,\n          jabm: 0,\n          dash: 0,\n          ftilt: 0,\n          utilt: 0,\n          dtilt: 0,\n          fsmash: 0,\n          usmash: 0,\n          dsmash: 0,\n          nair: 0,\n          fair: 0,\n          bair: 0,\n          uair: 0,\n          dair: 0,\n        },\n        grabCount: {\n          success: 0,\n          fail: 0,\n        },\n        throwCount: {\n          up: 0,\n          forward: 0,\n          back: 0,\n          down: 0,\n        },\n        groundTechCount: {\n          // tech away/in are in reference to the opponents position and not the stage\n          away: 0,\n          in: 0,\n          neutral: 0,\n          fail: 0,\n        },\n        wallTechCount: {\n          success: 0,\n          fail: 0,\n        },\n      };\n      const playerState: PlayerActionState = {\n        playerCounts: playerCounts,\n        animations: [],\n        actionFrameCounters: [],\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleActionCompute(state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): ActionCountsType[] {\n    return Array.from(this.state.values()).map((val) => val.playerCounts);\n  }\n}\n\nfunction isMissGroundTech(animation: State): boolean {\n  return animation === State.TECH_MISS_DOWN || animation === State.TECH_MISS_UP;\n}\n\nfunction isRolling(animation: State): boolean {\n  return animation === State.ROLL_BACKWARD || animation === State.ROLL_FORWARD;\n}\n\nfunction isGrabAction(animation: State): boolean {\n  // Includes Grab pull, wait, pummel, and throws\n  return animation > State.GRAB && animation <= State.THROW_DOWN && animation !== State.DASH_GRAB;\n}\n\nfunction isGrabbing(animation: State): boolean {\n  return animation === State.GRAB || animation === State.DASH_GRAB;\n}\n\nfunction isAerialAttack(animation: State): boolean {\n  return animation >= State.AERIAL_ATTACK_START && animation <= State.AERIAL_ATTACK_END;\n}\n\nfunction isForwardTilt(animation: State): boolean {\n  return animation >= State.ATTACK_FTILT_START && animation <= State.ATTACK_FTILT_END;\n}\n\nfunction isForwardSmash(animation: State): boolean {\n  return animation >= State.ATTACK_FSMASH_START && animation <= State.ATTACK_FSMASH_END;\n}\n\nfunction handleActionCompute(state: PlayerActionState, indices: PlayerIndexedType, frame: FrameEntryType): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n  const incrementCount = (field: string, condition: boolean): void => {\n    if (!condition) {\n      return;\n    }\n\n    const current: number = get(state.playerCounts, field, 0);\n    set(state.playerCounts, field, current + 1);\n  };\n\n  // Manage animation state\n  const currentAnimation = playerFrame.actionStateId!;\n  state.animations.push(currentAnimation);\n  const currentFrameCounter = playerFrame.actionStateCounter!;\n  state.actionFrameCounters.push(currentFrameCounter);\n\n  // Grab last 3 frames\n  const last3Frames = state.animations.slice(-3);\n  const prevAnimation = last3Frames[last3Frames.length - 2] as number;\n  const prevFrameCounter = state.actionFrameCounters[state.actionFrameCounters.length - 2] as number;\n\n  // New action if new animation or frame counter goes back down (repeated action)\n  const isNewAction = currentAnimation !== prevAnimation || prevFrameCounter > currentFrameCounter;\n  if (!isNewAction) {\n    return;\n  }\n\n  // Increment counts based on conditions\n  const didDashDance = isEqual(last3Frames, dashDanceAnimations);\n  incrementCount(\"dashDanceCount\", didDashDance);\n\n  incrementCount(\"rollCount\", isRolling(currentAnimation));\n  incrementCount(\"spotDodgeCount\", currentAnimation === State.SPOT_DODGE);\n  incrementCount(\"airDodgeCount\", currentAnimation === State.AIR_DODGE);\n  incrementCount(\"ledgegrabCount\", currentAnimation === State.CLIFF_CATCH);\n\n  // Grabs\n  incrementCount(\"grabCount.success\", isGrabbing(prevAnimation) && isGrabAction(currentAnimation));\n  incrementCount(\"grabCount.fail\", isGrabbing(prevAnimation) && !isGrabAction(currentAnimation));\n  if (currentAnimation === State.DASH_GRAB && prevAnimation === State.ATTACK_DASH) {\n    state.playerCounts.attackCount.dash -= 1; // subtract from dash attack if boost grab\n  }\n\n  // Basic attacks\n  incrementCount(\"attackCount.jab1\", currentAnimation === State.ATTACK_JAB1);\n  incrementCount(\"attackCount.jab2\", currentAnimation === State.ATTACK_JAB2);\n  incrementCount(\"attackCount.jab3\", currentAnimation === State.ATTACK_JAB3);\n  incrementCount(\"attackCount.jabm\", currentAnimation === State.ATTACK_JABM);\n  incrementCount(\"attackCount.dash\", currentAnimation === State.ATTACK_DASH);\n  incrementCount(\"attackCount.ftilt\", isForwardTilt(currentAnimation));\n  incrementCount(\"attackCount.utilt\", currentAnimation === State.ATTACK_UTILT);\n  incrementCount(\"attackCount.dtilt\", currentAnimation === State.ATTACK_DTILT);\n  incrementCount(\"attackCount.fsmash\", isForwardSmash(currentAnimation));\n  incrementCount(\"attackCount.usmash\", currentAnimation === State.ATTACK_USMASH);\n  incrementCount(\"attackCount.dsmash\", currentAnimation === State.ATTACK_DSMASH);\n  incrementCount(\"attackCount.nair\", currentAnimation === State.AERIAL_NAIR);\n  incrementCount(\"attackCount.fair\", currentAnimation === State.AERIAL_FAIR);\n  incrementCount(\"attackCount.bair\", currentAnimation === State.AERIAL_BAIR);\n  incrementCount(\"attackCount.uair\", currentAnimation === State.AERIAL_UAIR);\n  incrementCount(\"attackCount.dair\", currentAnimation === State.AERIAL_DAIR);\n\n  // GnW is weird and has unique IDs for some moves\n  if (playerFrame.internalCharacterId === 0x18) {\n    incrementCount(\"attackCount.jab1\", currentAnimation === State.GNW_JAB1);\n    incrementCount(\"attackCount.jabm\", currentAnimation === State.GNW_JABM);\n    incrementCount(\"attackCount.dtilt\", currentAnimation === State.GNW_DTILT);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.GNW_FSMASH);\n    incrementCount(\"attackCount.nair\", currentAnimation === State.GNW_NAIR);\n    incrementCount(\"attackCount.bair\", currentAnimation === State.GNW_BAIR);\n    incrementCount(\"attackCount.uair\", currentAnimation === State.GNW_UAIR);\n  }\n\n  // Peach is also weird and has a unique ID for her fsmash\n  // FSMASH1 = Golf Club, FSMASH2 = Frying Pan, FSMASH3 = Tennis Racket\n  if (playerFrame.internalCharacterId === 0x09) {\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH1);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH2);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH3);\n  }\n\n  // Throws\n  incrementCount(\"throwCount.up\", currentAnimation === State.THROW_UP);\n  incrementCount(\"throwCount.forward\", currentAnimation === State.THROW_FORWARD);\n  incrementCount(\"throwCount.down\", currentAnimation === State.THROW_DOWN);\n  incrementCount(\"throwCount.back\", currentAnimation === State.THROW_BACK);\n\n  // Techs\n  const opponentDir = playerFrame.positionX! > opponentFrame.positionX! ? -1 : 1;\n  const facingOpponent = playerFrame.facingDirection === opponentDir;\n\n  incrementCount(\"groundTechCount.fail\", isMissGroundTech(currentAnimation));\n  incrementCount(\"groundTechCount.in\", currentAnimation === State.FORWARD_TECH && facingOpponent);\n  incrementCount(\"groundTechCount.in\", currentAnimation === State.BACKWARD_TECH && !facingOpponent);\n  incrementCount(\"groundTechCount.neutral\", currentAnimation === State.NEUTRAL_TECH);\n  incrementCount(\"groundTechCount.away\", currentAnimation === State.BACKWARD_TECH && facingOpponent);\n  incrementCount(\"groundTechCount.away\", currentAnimation === State.FORWARD_TECH && !facingOpponent);\n  incrementCount(\"wallTechCount.success\", currentAnimation === State.WALL_TECH);\n  incrementCount(\"wallTechCount.fail\", currentAnimation === State.MISSED_WALL_TECH);\n\n  if (isAerialAttack(currentAnimation)) {\n    incrementCount(\"lCancelCount.success\", playerFrame.lCancelStatus === 1);\n    incrementCount(\"lCancelCount.fail\", playerFrame.lCancelStatus === 2);\n  }\n\n  // Handles wavedash detection (and waveland)\n  handleActionWavedash(state.playerCounts, state.animations);\n}\n\nfunction handleActionWavedash(counts: ActionCountsType, animations: State[]): void {\n  const currentAnimation = last(animations);\n  const prevAnimation = animations[animations.length - 2] as number;\n\n  const isSpecialLanding = currentAnimation === State.LANDING_FALL_SPECIAL;\n  const isAcceptablePrevious = isWavedashInitiationAnimation(prevAnimation);\n  const isPossibleWavedash = isSpecialLanding && isAcceptablePrevious;\n\n  if (!isPossibleWavedash) {\n    return;\n  }\n\n  // Here we special landed, it might be a wavedash, let's check\n  // We grab the last 8 frames here because that should be enough time to execute a\n  // wavedash. This number could be tweaked if we find false negatives\n  const recentFrames = animations.slice(-8);\n  const recentAnimations = keyBy(recentFrames, (animation) => animation);\n\n  if (size(recentAnimations) === 2 && recentAnimations[State.AIR_DODGE]) {\n    // If the only other animation is air dodge, this might be really late to the point\n    // where it was actually an air dodge. Air dodge animation is really long\n    return;\n  }\n\n  if (recentAnimations[State.AIR_DODGE]) {\n    // If one of the recent animations was an air dodge, let's remove that from the\n    // air dodge counter, we don't want to count air dodges used to wavedash/land\n    counts.airDodgeCount -= 1;\n  }\n\n  if (recentAnimations[State.ACTION_KNEE_BEND]) {\n    // If a jump was started recently, we will consider this a wavedash\n    counts.wavedashCount += 1;\n  } else {\n    // If there was no jump recently, this is a waveland\n    counts.wavelandCount += 1;\n  }\n}\n\nfunction isWavedashInitiationAnimation(animation: State): boolean {\n  if (animation === State.AIR_DODGE) {\n    return true;\n  }\n\n  const isAboveMin = animation >= State.CONTROLLED_JUMP_START;\n  const isBelowMax = animation <= State.CONTROLLED_JUMP_END;\n  return isAboveMin && isBelowMax;\n}\n","import { EventEmitter } from \"events\";\nimport last from \"lodash/last\";\n\nimport type { FrameEntryType, FramesType, GameStartType, PostFrameUpdateType } from \"../types\";\nimport type { ComboType, MoveLandedType, PlayerIndexedType } from \"./common\";\nimport {\n  calcDamageTaken,\n  didLoseStock,\n  getSinglesPlayerPermutationsFromSettings,\n  isCommandGrabbed,\n  isDamaged,\n  isDead,\n  isDown,\n  isGrabbed,\n  isTeching,\n  Timers,\n} from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nexport enum ComboEvent {\n  COMBO_START = \"COMBO_START\",\n  COMBO_EXTEND = \"COMBO_EXTEND\",\n  COMBO_END = \"COMBO_END\",\n}\n\ntype ComboState = {\n  combo: ComboType | null;\n  move: MoveLandedType | null;\n  resetCounter: number;\n  lastHitAnimation: number | null;\n  event: ComboEvent | null;\n};\n\nexport class ComboComputer extends EventEmitter implements StatComputer<ComboType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, ComboState>();\n  private combos = new Array<ComboType>();\n  private settings: GameStartType | null = null;\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.settings = settings;\n    this.state = new Map();\n    this.combos = [];\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: ComboState = {\n        combo: null,\n        move: null,\n        resetCounter: 0,\n        lastHitAnimation: null,\n        event: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleComboCompute(allFrames, state, indices, frame, this.combos);\n\n        // Emit an event for the new combo\n        if (state.event !== null) {\n          this.emit(state.event, {\n            combo: last(this.combos),\n            settings: this.settings,\n          });\n          state.event = null;\n        }\n      }\n    });\n  }\n\n  public fetch(): ComboType[] {\n    return this.combos;\n  }\n}\n\nfunction handleComboCompute(\n  frames: FramesType,\n  state: ComboState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  combos: ComboType[],\n): void {\n  const currentFrameNumber = frame.frame;\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n\n  const prevFrameNumber = currentFrameNumber - 1;\n  let prevPlayerFrame: PostFrameUpdateType | null = null;\n  let prevOpponentFrame: PostFrameUpdateType | null = null;\n\n  if (frames[prevFrameNumber]) {\n    prevPlayerFrame = frames[prevFrameNumber]!.players[indices.playerIndex]!.post;\n    prevOpponentFrame = frames[prevFrameNumber]!.players[indices.opponentIndex]!.post;\n  }\n\n  const oppActionStateId = opponentFrame.actionStateId!;\n  const opntIsDamaged = isDamaged(oppActionStateId);\n  const opntIsGrabbed = isGrabbed(oppActionStateId);\n  const opntIsCommandGrabbed = isCommandGrabbed(oppActionStateId);\n  const opntDamageTaken = prevOpponentFrame ? calcDamageTaken(opponentFrame, prevOpponentFrame) : 0;\n\n  // Keep track of whether actionState changes after a hit. Used to compute move count\n  // When purely using action state there was a bug where if you did two of the same\n  // move really fast (such as ganon's jab), it would count as one move. Added\n  // the actionStateCounter at this point which counts the number of frames since\n  // an animation started. Should be more robust, for old files it should always be\n  // null and null < null = false\n  const actionChangedSinceHit = playerFrame.actionStateId !== state.lastHitAnimation;\n  const actionCounter = playerFrame.actionStateCounter!;\n  const prevActionCounter = prevPlayerFrame ? prevPlayerFrame.actionStateCounter! : 0;\n  const actionFrameCounterReset = actionCounter < prevActionCounter;\n  if (actionChangedSinceHit || actionFrameCounterReset) {\n    state.lastHitAnimation = null;\n  }\n\n  // If opponent took damage and was put in some kind of stun this frame, either\n  // start a combo or count the moves for the existing combo\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    let comboStarted = false;\n    if (!state.combo) {\n      state.combo = {\n        playerIndex: indices.opponentIndex,\n        startFrame: currentFrameNumber,\n        endFrame: null,\n        startPercent: prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0,\n        currentPercent: opponentFrame.percent ?? 0,\n        endPercent: null,\n        moves: [],\n        didKill: false,\n        lastHitBy: indices.playerIndex,\n      };\n\n      combos.push(state.combo);\n\n      // Track whether this is a new combo or not\n      comboStarted = true;\n    }\n\n    if (opntDamageTaken) {\n      // If animation of last hit has been cleared that means this is a new move. This\n      // prevents counting multiple hits from the same move such as fox's drill\n      if (state.lastHitAnimation === null) {\n        state.move = {\n          playerIndex: indices.playerIndex,\n          frame: currentFrameNumber,\n          moveId: playerFrame.lastAttackLanded!,\n          hitCount: 0,\n          damage: 0,\n        };\n\n        state.combo.moves.push(state.move);\n\n        // Make sure we don't overwrite the START event\n        if (!comboStarted) {\n          state.event = ComboEvent.COMBO_EXTEND;\n        }\n      }\n\n      if (state.move) {\n        state.move.hitCount += 1;\n        state.move.damage += opntDamageTaken;\n      }\n\n      // Store previous frame animation to consider the case of a trade, the previous\n      // frame should always be the move that actually connected... I hope\n      state.lastHitAnimation = prevPlayerFrame ? prevPlayerFrame.actionStateId : null;\n    }\n\n    if (comboStarted) {\n      state.event = ComboEvent.COMBO_START;\n    }\n  }\n\n  if (!state.combo) {\n    // The rest of the function handles combo termination logic, so if we don't\n    // have a combo started, there is no need to continue\n    return;\n  }\n\n  const opntIsTeching = isTeching(oppActionStateId);\n  const opntIsDowned = isDown(oppActionStateId);\n  const opntDidLoseStock = prevOpponentFrame && didLoseStock(opponentFrame, prevOpponentFrame);\n  const opntIsDying = isDead(oppActionStateId);\n\n  // Update percent if opponent didn't lose stock\n  if (!opntDidLoseStock) {\n    state.combo.currentPercent = opponentFrame.percent ?? 0;\n  }\n\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed || opntIsTeching || opntIsDowned || opntIsDying) {\n    // If opponent got grabbed or damaged, reset the reset counter\n    state.resetCounter = 0;\n  } else {\n    state.resetCounter += 1;\n  }\n\n  let shouldTerminate = false;\n\n  // Termination condition 1 - player kills opponent\n  if (opntDidLoseStock) {\n    state.combo.didKill = true;\n    shouldTerminate = true;\n  }\n\n  // Termination condition 2 - combo resets on time\n  if (state.resetCounter > Timers.COMBO_STRING_RESET_FRAMES) {\n    shouldTerminate = true;\n  }\n\n  // If combo should terminate, mark the end states and add it to list\n  if (shouldTerminate) {\n    state.combo.endFrame = playerFrame.frame;\n    state.combo.endPercent = prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0;\n    state.event = ComboEvent.COMBO_END;\n\n    state.combo = null;\n    state.move = null;\n  }\n}\n","import { EventEmitter } from \"events\";\nimport filter from \"lodash/filter\";\nimport get from \"lodash/get\";\nimport groupBy from \"lodash/groupBy\";\nimport last from \"lodash/last\";\nimport orderBy from \"lodash/orderBy\";\n\nimport type { FrameEntryType, FramesType, GameStartType, PostFrameUpdateType } from \"../types\";\nimport type { ConversionType, MoveLandedType, PlayerIndexedType } from \"./common\";\nimport {\n  calcDamageTaken,\n  didLoseStock,\n  getSinglesPlayerPermutationsFromSettings,\n  isCommandGrabbed,\n  isDamaged,\n  isGrabbed,\n  isInControl,\n  Timers,\n} from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ntype PlayerConversionState = {\n  conversion: ConversionType | null;\n  move: MoveLandedType | null;\n  resetCounter: number;\n  lastHitAnimation: number | null;\n};\n\ntype MetadataType = {\n  lastEndFrameByOppIdx: {\n    [oppIdx: number]: number;\n  };\n};\n\nexport class ConversionComputer extends EventEmitter implements StatComputer<ConversionType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private conversions = new Array<ConversionType>();\n  private state = new Map<PlayerIndexedType, PlayerConversionState>();\n  private metadata: MetadataType;\n  private settings: GameStartType | null = null;\n\n  public constructor() {\n    super();\n    this.metadata = {\n      lastEndFrameByOppIdx: {},\n    };\n  }\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.conversions = [];\n    this.state = new Map();\n    this.metadata = {\n      lastEndFrameByOppIdx: {},\n    };\n    this.settings = settings;\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerConversionState = {\n        conversion: null,\n        move: null,\n        resetCounter: 0,\n        lastHitAnimation: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        const terminated = handleConversionCompute(allFrames, state, indices, frame, this.conversions);\n        if (terminated) {\n          this.emit(\"CONVERSION\", {\n            combo: last(this.conversions),\n            settings: this.settings,\n          });\n        }\n      }\n    });\n  }\n\n  public fetch(): ConversionType[] {\n    this._populateConversionTypes();\n    return this.conversions;\n  }\n\n  private _populateConversionTypes(): void {\n    // Post-processing step: set the openingTypes\n    const conversionsToHandle = filter(this.conversions, (conversion) => {\n      return conversion.openingType === \"unknown\";\n    });\n\n    // Group new conversions by startTime and sort\n    const groupedConversions = groupBy(conversionsToHandle, \"startFrame\");\n    const sortedConversions = orderBy(groupedConversions, (conversions) => get(conversions, [0, \"startFrame\"]));\n\n    // Set the opening types on the conversions we need to handle\n    sortedConversions.forEach((conversions) => {\n      const isTrade = conversions.length >= 2;\n      conversions.forEach((conversion) => {\n        // Set end frame for this conversion\n        this.metadata.lastEndFrameByOppIdx[conversion.playerIndex] = conversion.endFrame!;\n\n        if (isTrade) {\n          // If trade, just short-circuit\n          conversion.openingType = \"trade\";\n          return;\n        }\n\n        // If not trade, check the opponent endFrame\n        const lastMove = last(conversion.moves);\n        const oppEndFrame =\n          this.metadata.lastEndFrameByOppIdx[lastMove ? lastMove.playerIndex : conversion.playerIndex];\n        const isCounterAttack = oppEndFrame && oppEndFrame > conversion.startFrame;\n        conversion.openingType = isCounterAttack ? \"counter-attack\" : \"neutral-win\";\n      });\n    });\n  }\n}\n\nfunction handleConversionCompute(\n  frames: FramesType,\n  state: PlayerConversionState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  conversions: ConversionType[],\n): boolean {\n  const currentFrameNumber = frame.frame;\n  const playerFrame: PostFrameUpdateType = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n\n  const prevFrameNumber = currentFrameNumber - 1;\n  let prevPlayerFrame: PostFrameUpdateType | null = null;\n  let prevOpponentFrame: PostFrameUpdateType | null = null;\n\n  if (frames[prevFrameNumber]) {\n    prevPlayerFrame = frames[prevFrameNumber]!.players[indices.playerIndex]!.post;\n    prevOpponentFrame = frames[prevFrameNumber]!.players[indices.opponentIndex]!.post;\n  }\n\n  const oppActionStateId = opponentFrame.actionStateId!;\n  const opntIsDamaged = isDamaged(oppActionStateId);\n  const opntIsGrabbed = isGrabbed(oppActionStateId);\n  const opntIsCommandGrabbed = isCommandGrabbed(oppActionStateId);\n  const opntDamageTaken = prevOpponentFrame ? calcDamageTaken(opponentFrame, prevOpponentFrame) : 0;\n\n  // Keep track of whether actionState changes after a hit. Used to compute move count\n  // When purely using action state there was a bug where if you did two of the same\n  // move really fast (such as ganon's jab), it would count as one move. Added\n  // the actionStateCounter at this point which counts the number of frames since\n  // an animation started. Should be more robust, for old files it should always be\n  // null and null < null = false\n  const actionChangedSinceHit = playerFrame.actionStateId !== state.lastHitAnimation;\n  const actionCounter = playerFrame.actionStateCounter!;\n  const prevActionCounter = prevPlayerFrame ? prevPlayerFrame.actionStateCounter! : 0;\n  const actionFrameCounterReset = actionCounter < prevActionCounter;\n  if (actionChangedSinceHit || actionFrameCounterReset) {\n    state.lastHitAnimation = null;\n  }\n\n  // If opponent took damage and was put in some kind of stun this frame, either\n  // start a conversion or\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    if (!state.conversion) {\n      state.conversion = {\n        playerIndex: indices.opponentIndex,\n        lastHitBy: indices.playerIndex,\n        startFrame: currentFrameNumber,\n        endFrame: null,\n        startPercent: prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0,\n        currentPercent: opponentFrame.percent ?? 0,\n        endPercent: null,\n        moves: [],\n        didKill: false,\n        openingType: \"unknown\", // Will be updated later\n      };\n\n      conversions.push(state.conversion);\n    }\n\n    if (opntDamageTaken) {\n      // If animation of last hit has been cleared that means this is a new move. This\n      // prevents counting multiple hits from the same move such as fox's drill\n      if (state.lastHitAnimation === null) {\n        state.move = {\n          playerIndex: indices.playerIndex,\n          frame: currentFrameNumber,\n          moveId: playerFrame.lastAttackLanded!,\n          hitCount: 0,\n          damage: 0,\n        };\n\n        state.conversion.moves.push(state.move);\n      }\n\n      if (state.move) {\n        state.move.hitCount += 1;\n        state.move.damage += opntDamageTaken;\n      }\n\n      // Store previous frame animation to consider the case of a trade, the previous\n      // frame should always be the move that actually connected... I hope\n      state.lastHitAnimation = prevPlayerFrame ? prevPlayerFrame.actionStateId : null;\n    }\n  }\n\n  if (!state.conversion) {\n    // The rest of the function handles conversion termination logic, so if we don't\n    // have a conversion started, there is no need to continue\n    return false;\n  }\n\n  const opntInControl = isInControl(oppActionStateId);\n  const opntDidLoseStock = prevOpponentFrame && didLoseStock(opponentFrame, prevOpponentFrame);\n\n  // Update percent if opponent didn't lose stock\n  if (!opntDidLoseStock) {\n    state.conversion.currentPercent = opponentFrame.percent ?? 0;\n  }\n\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    // If opponent got grabbed or damaged, reset the reset counter\n    state.resetCounter = 0;\n  }\n\n  const shouldStartResetCounter = state.resetCounter === 0 && opntInControl;\n  const shouldContinueResetCounter = state.resetCounter > 0;\n  if (shouldStartResetCounter || shouldContinueResetCounter) {\n    // This will increment the reset timer under the following conditions:\n    // 1) if we were punishing opponent but they have now entered an actionable state\n    // 2) if counter has already started counting meaning opponent has entered actionable state\n    state.resetCounter += 1;\n  }\n\n  let shouldTerminate = false;\n\n  // Termination condition 1 - player kills opponent\n  if (opntDidLoseStock) {\n    state.conversion.didKill = true;\n    shouldTerminate = true;\n  }\n\n  // Termination condition 2 - conversion resets on time\n  if (state.resetCounter > Timers.PUNISH_RESET_FRAMES) {\n    shouldTerminate = true;\n  }\n\n  // If conversion should terminate, mark the end states and add it to list\n  if (shouldTerminate) {\n    state.conversion.endFrame = playerFrame.frame;\n    state.conversion.endPercent = prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0;\n\n    state.conversion = null;\n    state.move = null;\n  }\n\n  return shouldTerminate;\n}\n","export enum Command {\n  SPLIT_MESSAGE = 0x10,\n  MESSAGE_SIZES = 0x35,\n  GAME_START = 0x36,\n  PRE_FRAME_UPDATE = 0x37,\n  POST_FRAME_UPDATE = 0x38,\n  GAME_END = 0x39,\n  FRAME_START = 0x3a,\n  ITEM_UPDATE = 0x3b,\n  FRAME_BOOKEND = 0x3c,\n  GECKO_LIST = 0x3d,\n}\n\nexport type PlayerType = {\n  playerIndex: number;\n  port: number;\n  characterId: number | null;\n  type: number | null;\n  startStocks: number | null;\n  characterColor: number | null;\n  teamShade: number | null;\n  handicap: number | null;\n  teamId: number | null;\n  staminaMode: boolean | null;\n  silentCharacter: boolean | null;\n  invisible: boolean | null;\n  lowGravity: boolean | null;\n  blackStockIcon: boolean | null;\n  metal: boolean | null;\n  startOnAngelPlatform: boolean | null;\n  rumbleEnabled: boolean | null;\n  cpuLevel: number | null;\n  offenseRatio: number | null;\n  defenseRatio: number | null;\n  modelScale: number | null;\n  controllerFix: string | null;\n  nametag: string | null;\n  displayName: string;\n  connectCode: string;\n  userId: string;\n};\n\nexport enum GameMode {\n  VS = 0x02,\n  ONLINE = 0x08,\n  TARGET_TEST = 0x0f,\n  HOME_RUN_CONTEST = 0x20,\n}\n\nexport enum Language {\n  JAPANESE = 0,\n  ENGLISH = 1,\n}\n\nexport type GameStartType = {\n  slpVersion: string | null;\n  timerType: TimerType | null;\n  inGameMode: number | null;\n  friendlyFireEnabled: boolean | null;\n  isTeams: boolean | null;\n  stageId: number | null;\n  startingTimerSeconds: number | null;\n  itemSpawnBehavior: ItemSpawnType | null;\n  enabledItems: number | null;\n  players: PlayerType[];\n  scene: number | null;\n  gameMode: GameMode | null;\n  language: Language | null;\n  gameInfoBlock: GameInfoType | null;\n  randomSeed: number | null;\n  isPAL: boolean | null;\n  isFrozenPS: boolean | null;\n  matchInfo: MatchInfo | null;\n};\n\ntype MatchInfo = {\n  matchId: string | null;\n  gameNumber: number | null;\n  tiebreakerNumber: number | null;\n};\n\nexport type FrameStartType = {\n  frame: number | null;\n  seed: number | null;\n  sceneFrameCounter: number | null;\n};\n\nexport type GameInfoType = {\n  gameBitfield1: number | null;\n  gameBitfield2: number | null;\n  gameBitfield3: number | null;\n  gameBitfield4: number | null;\n  bombRainEnabled: boolean | null;\n  selfDestructScoreValue: number | null;\n  itemSpawnBitfield1: number | null;\n  itemSpawnBitfield2: number | null;\n  itemSpawnBitfield3: number | null;\n  itemSpawnBitfield4: number | null;\n  itemSpawnBitfield5: number | null;\n  damageRatio: number | null;\n};\n\nexport enum TimerType {\n  NONE = 0b00,\n  DECREASING = 0b10,\n  INCREASING = 0b11,\n}\n\nexport enum ItemSpawnType {\n  OFF = 0xff,\n  VERY_LOW = 0x00,\n  LOW = 0x01,\n  MEDIUM = 0x02,\n  HIGH = 0x03,\n  VERY_HIGH = 0x04,\n}\n\nexport enum EnabledItemType {\n  METAL_BOX = 2 ** 0,\n  CLOAKING_DEVICE = 2 ** 1,\n  POKEBALL = 2 ** 2,\n  // Bits 4 through 8 of item bitfield 1 are unknown\n  UNKNOWN_ITEM_BIT_4 = 2 ** 3,\n  UNKNOWN_ITEM_BIT_5 = 2 ** 4,\n  UNKNOWN_ITEM_BIT_6 = 2 ** 5,\n  UNKNOWN_ITEM_BIT_7 = 2 ** 6,\n  UNKNOWN_ITEM_BIT_8 = 2 ** 7,\n  FAN = 2 ** 8,\n  FIRE_FLOWER = 2 ** 9,\n  SUPER_MUSHROOM = 2 ** 10,\n  POISON_MUSHROOM = 2 ** 11,\n  HAMMER = 2 ** 12,\n  WARP_STAR = 2 ** 13,\n  SCREW_ATTACK = 2 ** 14,\n  BUNNY_HOOD = 2 ** 15,\n  RAY_GUN = 2 ** 16,\n  FREEZIE = 2 ** 17,\n  FOOD = 2 ** 18,\n  MOTION_SENSOR_BOMB = 2 ** 19,\n  FLIPPER = 2 ** 20,\n  SUPER_SCOPE = 2 ** 21,\n  STAR_ROD = 2 ** 22,\n  LIPS_STICK = 2 ** 23,\n  HEART_CONTAINER = 2 ** 24,\n  MAXIM_TOMATO = 2 ** 25,\n  STARMAN = 2 ** 26,\n  HOME_RUN_BAT = 2 ** 27,\n  BEAM_SWORD = 2 ** 28,\n  PARASOL = 2 ** 29,\n  GREEN_SHELL = 2 ** 30,\n  RED_SHELL = 2 ** 31,\n  CAPSULE = 2 ** 32,\n  BOX = 2 ** 33,\n  BARREL = 2 ** 34,\n  EGG = 2 ** 35,\n  PARTY_BALL = 2 ** 36,\n  BARREL_CANNON = 2 ** 37,\n  BOMB_OMB = 2 ** 38,\n  MR_SATURN = 2 ** 39,\n}\n\nexport type PreFrameUpdateType = {\n  frame: number | null;\n  playerIndex: number | null;\n  isFollower: boolean | null;\n  seed: number | null;\n  actionStateId: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  facingDirection: number | null;\n  joystickX: number | null;\n  joystickY: number | null;\n  cStickX: number | null;\n  cStickY: number | null;\n  trigger: number | null;\n  buttons: number | null;\n  physicalButtons: number | null;\n  physicalLTrigger: number | null;\n  physicalRTrigger: number | null;\n  rawJoystickX: number | null;\n  percent: number | null;\n};\n\nexport type PostFrameUpdateType = {\n  frame: number | null;\n  playerIndex: number | null;\n  isFollower: boolean | null;\n  internalCharacterId: number | null;\n  actionStateId: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  facingDirection: number | null;\n  percent: number | null;\n  shieldSize: number | null;\n  lastAttackLanded: number | null;\n  currentComboCount: number | null;\n  lastHitBy: number | null;\n  stocksRemaining: number | null;\n  actionStateCounter: number | null;\n  miscActionState: number | null;\n  isAirborne: boolean | null;\n  lastGroundId: number | null;\n  jumpsRemaining: number | null;\n  lCancelStatus: number | null;\n  hurtboxCollisionState: number | null;\n  selfInducedSpeeds: SelfInducedSpeedsType | null;\n  hitlagRemaining: number | null;\n  animationIndex: number | null;\n  instanceHitBy: number | null;\n  instanceId: number | null;\n};\n\nexport type SelfInducedSpeedsType = {\n  airX: number | null;\n  y: number | null;\n  attackX: number | null;\n  attackY: number | null;\n  groundX: number | null;\n};\n\nexport type ItemUpdateType = {\n  frame: number | null;\n  typeId: number | null;\n  state: number | null;\n  facingDirection: number | null;\n  velocityX: number | null;\n  velocityY: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  damageTaken: number | null;\n  expirationTimer: number | null;\n  spawnId: number | null;\n  missileType: number | null;\n  turnipFace: number | null;\n  chargeShotLaunched: number | null;\n  chargePower: number | null;\n  owner: number | null;\n  instanceId: number | null;\n};\n\nexport type FrameBookendType = {\n  frame: number | null;\n  latestFinalizedFrame: number | null;\n};\n\nexport enum GameEndMethod {\n  UNRESOLVED = 0,\n  RESOLVED = 3,\n  // The following options are only returned in version 2.0.0 onwards\n  TIME = 1,\n  GAME = 2,\n  NO_CONTEST = 7,\n}\n\nexport type GameEndType = {\n  gameEndMethod: GameEndMethod | null;\n  lrasInitiatorIndex: number | null;\n  placements: PlacementType[];\n};\n\nexport type PlacementType = {\n  playerIndex: number;\n  position: number | null;\n};\n\nexport type GeckoListType = {\n  codes: GeckoCodeType[];\n  contents: Uint8Array;\n};\n\nexport type GeckoCodeType = {\n  type: number | null;\n  address: number | null;\n  contents: Uint8Array;\n};\n\nexport type MetadataType = {\n  startAt?: string | null;\n  playedOn?: string | null;\n  lastFrame?: number | null;\n  players?: {\n    [playerIndex: number]: {\n      characters: {\n        [internalCharacterId: number]: number;\n      };\n      names?: {\n        netplay?: string | null;\n        code?: string | null;\n      };\n    };\n  } | null;\n  consoleNick?: string | null;\n};\n\nexport type EventPayloadTypes =\n  | GameStartType\n  | FrameStartType\n  | PreFrameUpdateType\n  | PostFrameUpdateType\n  | ItemUpdateType\n  | FrameBookendType\n  | GameEndType\n  | GeckoListType;\n\nexport type EventCallbackFunc = (\n  command: Command,\n  payload?: EventPayloadTypes | null,\n  buffer?: Uint8Array | null,\n) => boolean;\n\nexport type FrameEntryType = {\n  frame: number;\n  start?: FrameStartType;\n  players: {\n    [playerIndex: number]: {\n      pre: PreFrameUpdateType;\n      post: PostFrameUpdateType;\n    } | null;\n  };\n  followers: {\n    [playerIndex: number]: {\n      pre: PreFrameUpdateType;\n      post: PostFrameUpdateType;\n    } | null;\n  };\n  items?: ItemUpdateType[];\n};\n\nexport enum Frames {\n  FIRST = -123,\n  FIRST_PLAYABLE = -39,\n}\n\nexport type FramesType = {\n  [frameIndex: number]: FrameEntryType;\n};\n\nexport type RollbackFramesType = {\n  [frameIndex: number]: FrameEntryType[];\n};\n\nexport type RollbackFrames = {\n  frames: RollbackFramesType;\n  count: number;\n  lengths: number[];\n};\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\nimport type { PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nenum JoystickRegion {\n  DZ = 0,\n  NE = 1,\n  SE = 2,\n  SW = 3,\n  NW = 4,\n  N = 5,\n  E = 6,\n  S = 7,\n  W = 8,\n}\n\nexport type PlayerInput = {\n  playerIndex: number;\n  opponentIndex: number;\n  inputCount: number;\n  joystickInputCount: number;\n  cstickInputCount: number;\n  buttonInputCount: number;\n  triggerInputCount: number;\n};\n\nexport class InputComputer implements StatComputer<PlayerInput[]> {\n  private state = new Map<PlayerIndexedType, PlayerInput>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerInput = {\n        playerIndex: indices.playerIndex,\n        opponentIndex: indices.opponentIndex,\n        inputCount: 0,\n        joystickInputCount: 0,\n        cstickInputCount: 0,\n        buttonInputCount: 0,\n        triggerInputCount: 0,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleInputCompute(allFrames, state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): PlayerInput[] {\n    return Array.from(this.state.values());\n  }\n}\n\nfunction handleInputCompute(\n  frames: FramesType,\n  state: PlayerInput,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.pre;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.pre : null;\n\n  if (currentFrameNumber < Frames.FIRST_PLAYABLE || !prevPlayerFrame) {\n    // Don't count inputs until the game actually starts\n    return;\n  }\n\n  // First count the number of buttons that go from 0 to 1\n  // Increment action count by amount of button presses\n  const invertedPreviousButtons = ~prevPlayerFrame.physicalButtons!;\n  const currentButtons = playerFrame.physicalButtons!;\n  const buttonChanges = invertedPreviousButtons & currentButtons & 0xfff;\n  const newInputsPressed = countSetBits(buttonChanges);\n  state.inputCount += newInputsPressed;\n  state.buttonInputCount += newInputsPressed;\n\n  // Increment action count when sticks change from one region to another.\n  // Don't increment when stick returns to deadzone\n  const prevAnalogRegion = getJoystickRegion(prevPlayerFrame.joystickX!, prevPlayerFrame.joystickY!);\n  const currentAnalogRegion = getJoystickRegion(playerFrame.joystickX!, playerFrame.joystickY!);\n  if (prevAnalogRegion !== currentAnalogRegion && currentAnalogRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.joystickInputCount += 1;\n  }\n\n  // Do the same for c-stick\n  const prevCstickRegion = getJoystickRegion(prevPlayerFrame.cStickX!, prevPlayerFrame.cStickY!);\n  const currentCstickRegion = getJoystickRegion(playerFrame.cStickX!, playerFrame.cStickY!);\n  if (prevCstickRegion !== currentCstickRegion && currentCstickRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.cstickInputCount += 1;\n  }\n\n  // Increment action on analog trigger... I'm not sure when. This needs revision\n  // Currently will update input count when the button gets pressed past 0.3\n  // Changes from hard shield to light shield should probably count as inputs but\n  // are not counted here\n  if (prevPlayerFrame.physicalLTrigger! < 0.3 && playerFrame.physicalLTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n  if (prevPlayerFrame.physicalRTrigger! < 0.3 && playerFrame.physicalRTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n}\n\nfunction countSetBits(x: number): number {\n  // This function solves the Hamming Weight problem. Effectively it counts the number of\n  // bits in the input that are set to 1\n  // This implementation is supposedly very efficient when most bits are zero.\n  // Found: https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation\n  let bits = x;\n\n  let count;\n  for (count = 0; bits; count += 1) {\n    bits &= bits - 1;\n  }\n  return count;\n}\n\nfunction getJoystickRegion(x: number, y: number): JoystickRegion {\n  let region = JoystickRegion.DZ;\n\n  if (x >= 0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NE;\n  } else if (x >= 0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SE;\n  } else if (x <= -0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SW;\n  } else if (x <= -0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NW;\n  } else if (y >= 0.2875) {\n    region = JoystickRegion.N;\n  } else if (x >= 0.2875) {\n    region = JoystickRegion.E;\n  } else if (y <= -0.2875) {\n    region = JoystickRegion.S;\n  } else if (x <= -0.2875) {\n    region = JoystickRegion.W;\n  }\n\n  return region;\n}\n","import first from \"lodash/first\";\nimport flatten from \"lodash/flatten\";\nimport get from \"lodash/get\";\nimport groupBy from \"lodash/groupBy\";\nimport keyBy from \"lodash/keyBy\";\nimport last from \"lodash/last\";\nimport mapValues from \"lodash/mapValues\";\nimport zip from \"lodash/zip\";\n\nimport type { GameStartType } from \"../types\";\nimport type { ConversionType, InputCountsType, OverallType, RatioType } from \"./common\";\nimport type { PlayerInput } from \"./inputs\";\n\ntype ConversionsByPlayerByOpening = {\n  [playerIndex: string]: {\n    [openingType: string]: ConversionType[];\n  };\n};\n\nexport function generateOverallStats({\n  settings,\n  inputs,\n  conversions,\n  playableFrameCount,\n}: {\n  settings: GameStartType;\n  inputs: PlayerInput[];\n  conversions: ConversionType[];\n  playableFrameCount: number;\n}): OverallType[] {\n  const inputsByPlayer = keyBy(inputs, \"playerIndex\");\n  const originalConversions = conversions;\n  const conversionsByPlayer = groupBy(conversions, (conv) => conv.moves[0]?.playerIndex);\n  const conversionsByPlayerByOpening: ConversionsByPlayerByOpening = mapValues(conversionsByPlayer, (conversions) =>\n    groupBy(conversions, \"openingType\"),\n  );\n\n  const gameMinutes = playableFrameCount / 3600;\n\n  const overall = settings.players.map((player) => {\n    const playerIndex = player.playerIndex;\n\n    const playerInputs = get(inputsByPlayer, playerIndex) || {};\n    const inputCounts: InputCountsType = {\n      buttons: get(playerInputs, \"buttonInputCount\"),\n      triggers: get(playerInputs, \"triggerInputCount\"),\n      cstick: get(playerInputs, \"cstickInputCount\"),\n      joystick: get(playerInputs, \"joystickInputCount\"),\n      total: get(playerInputs, \"inputCount\"),\n    };\n    // const conversions = get(conversionsByPlayer, playerIndex) || [];\n    // const successfulConversions = conversions.filter((conversion) => conversion.moves.length > 1);\n    let conversionCount = 0;\n    let successfulConversionCount = 0;\n\n    const opponentIndices = settings.players\n      .filter((opp) => {\n        // We want players which aren't ourselves\n        if (opp.playerIndex === playerIndex) {\n          return false;\n        }\n\n        // Make sure they're not on our team either\n        return !settings.isTeams || opp.teamId !== player.teamId;\n      })\n      .map((opp) => opp.playerIndex);\n\n    let totalDamage = 0;\n    let killCount = 0;\n\n    // These are the conversions that we did on our opponents\n    originalConversions\n      // Filter down to conversions of our opponent\n      .filter((conversion) => conversion.playerIndex !== playerIndex)\n      .forEach((conversion) => {\n        conversionCount++;\n\n        // We killed the opponent\n        if (conversion.didKill && conversion.lastHitBy === playerIndex) {\n          killCount += 1;\n        }\n        if (conversion.moves.length > 1 && conversion.moves[0]!.playerIndex === playerIndex) {\n          successfulConversionCount++;\n        }\n        conversion.moves.forEach((move) => {\n          if (move.playerIndex === playerIndex) {\n            totalDamage += move.damage;\n          }\n        });\n      });\n\n    return {\n      playerIndex: playerIndex,\n      inputCounts: inputCounts,\n      conversionCount: conversionCount,\n      totalDamage: totalDamage,\n      killCount: killCount,\n\n      successfulConversions: getRatio(successfulConversionCount, conversionCount),\n      inputsPerMinute: getRatio(inputCounts.total, gameMinutes),\n      digitalInputsPerMinute: getRatio(inputCounts.buttons, gameMinutes),\n      openingsPerKill: getRatio(conversionCount, killCount),\n      damagePerOpening: getRatio(totalDamage, conversionCount),\n      neutralWinRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"neutral-win\"),\n      counterHitRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"counter-attack\"),\n      beneficialTradeRatio: getBeneficialTradeRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices),\n    };\n  });\n\n  return overall;\n}\n\nfunction getRatio(count: number, total: number): RatioType {\n  return {\n    count: count,\n    total: total,\n    ratio: total ? count / total : null,\n  };\n}\n\nfunction getOpeningRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n  type: string,\n): RatioType {\n  const openings = get(conversionsByPlayerByOpening, [playerIndex, type]) || [];\n\n  const opponentOpenings = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, type]) || []),\n  );\n\n  return getRatio(openings.length, openings.length + opponentOpenings.length);\n}\n\nfunction getBeneficialTradeRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n): RatioType {\n  const playerTrades = get(conversionsByPlayerByOpening, [playerIndex, \"trade\"]) || [];\n  const opponentTrades = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, \"trade\"]) || []),\n  );\n\n  const benefitsPlayer = [];\n\n  // Figure out which punishes benefited this player\n  const zippedTrades = zip(playerTrades, opponentTrades);\n  zippedTrades.forEach((conversionPair) => {\n    const playerConversion = first(conversionPair);\n    const opponentConversion = last(conversionPair);\n    if (playerConversion && opponentConversion) {\n      const playerDamage = playerConversion.currentPercent - playerConversion.startPercent;\n      const opponentDamage = opponentConversion.currentPercent - opponentConversion.startPercent;\n\n      if (playerConversion!.didKill && !opponentConversion!.didKill) {\n        benefitsPlayer.push(playerConversion);\n      } else if (playerDamage > opponentDamage) {\n        benefitsPlayer.push(playerConversion);\n      }\n    }\n  });\n\n  return getRatio(benefitsPlayer.length, playerTrades.length);\n}\n","import get from \"lodash/get\";\n\nimport type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\n\nexport interface StatComputer<T> {\n  setup(settings: GameStartType): void;\n  processFrame(newFrame: FrameEntryType, allFrames: FramesType): void;\n  fetch(): T;\n}\n\nexport type StatOptions = {\n  processOnTheFly: boolean;\n};\n\nconst defaultOptions: StatOptions = {\n  processOnTheFly: false,\n};\n\nexport class Stats {\n  private options: StatOptions;\n  private lastProcessedFrame: number | null = null;\n  private frames: FramesType = {};\n  private players: number[] = [];\n  private allComputers = new Array<StatComputer<unknown>>();\n\n  public constructor(options?: StatOptions) {\n    this.options = Object.assign({}, defaultOptions, options);\n  }\n\n  /**\n   * Should reset the frames to their default values.\n   */\n  public setup(settings: GameStartType): void {\n    // Reset the frames since it's a new game\n    this.frames = {};\n    this.players = settings.players.map((v) => v.playerIndex);\n\n    // Forward the settings on to the individual stat computer\n    this.allComputers.forEach((comp) => comp.setup(settings));\n  }\n\n  public register(...computer: StatComputer<unknown>[]): void {\n    this.allComputers.push(...computer);\n  }\n\n  public process(): void {\n    if (this.players.length === 0) {\n      return;\n    }\n\n    let i = this.lastProcessedFrame !== null ? this.lastProcessedFrame + 1 : Frames.FIRST;\n    while (this.frames[i]) {\n      const frame = this.frames[i];\n      // Don't attempt to compute stats on frames that have not been fully received\n      if (!isCompletedFrame(this.players, frame)) {\n        return;\n      }\n      this.allComputers.forEach((comp) => comp.processFrame(frame, this.frames));\n      this.lastProcessedFrame = i;\n      i++;\n    }\n  }\n\n  public addFrame(frame: FrameEntryType): void {\n    this.frames[frame.frame] = frame;\n\n    if (this.options.processOnTheFly) {\n      this.process();\n    }\n  }\n}\n\nfunction isCompletedFrame(players: number[], frame?: FrameEntryType): frame is FrameEntryType {\n  if (!frame) {\n    return false;\n  }\n\n  // This function checks whether we have successfully received an entire frame.\n  // It is not perfect because it does not wait for follower frames. Fortunately,\n  // follower frames are not used for any stat calculations so this doesn't matter\n  // for our purposes.\n  for (const player of players) {\n    const playerPostFrame = get(frame, [\"players\", player, \"post\"]);\n    if (!playerPostFrame) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport type { PlayerIndexedType, StockType } from \"./common\";\nimport { didLoseStock, getSinglesPlayerPermutationsFromSettings, isDead } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ntype StockState = {\n  stock?: StockType | null;\n};\n\nexport class StockComputer implements StatComputer<StockType[]> {\n  private state = new Map<PlayerIndexedType, StockState>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private stocks = new Array<StockType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.stocks = [];\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: StockState = {\n        stock: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleStockCompute(allFrames, state, indices, frame, this.stocks);\n      }\n    });\n  }\n\n  public fetch(): StockType[] {\n    return this.stocks;\n  }\n}\n\nfunction handleStockCompute(\n  frames: FramesType,\n  state: StockState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  stocks: StockType[],\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.post : null;\n\n  // If there is currently no active stock, wait until the player is no longer spawning.\n  // Once the player is no longer spawning, start the stock\n  if (!state.stock) {\n    const isPlayerDead = isDead(playerFrame.actionStateId!);\n    if (isPlayerDead) {\n      return;\n    }\n\n    state.stock = {\n      playerIndex: indices.playerIndex,\n      startFrame: currentFrameNumber,\n      endFrame: null,\n      startPercent: 0,\n      endPercent: null,\n      currentPercent: 0,\n      count: playerFrame.stocksRemaining!,\n      deathAnimation: null,\n    };\n\n    stocks.push(state.stock);\n  } else if (prevPlayerFrame && didLoseStock(playerFrame, prevPlayerFrame)) {\n    state.stock.endFrame = playerFrame.frame;\n    state.stock.endPercent = prevPlayerFrame.percent ?? 0;\n    state.stock.deathAnimation = playerFrame.actionStateId;\n    state.stock = null;\n  } else {\n    state.stock.currentPercent = playerFrame.percent ?? 0;\n  }\n}\n","// Based on https://github.com/wilsonzlin/edgesearch/blob/d03816dd4b18d3d2eb6d08cb1ae14f96f046141d/demo/wiki/client/src/util/util.ts\n\n// Ensures value is not null or undefined.\n// != does no type validation so we don't need to explcitly check for undefined.\nexport function exists<T>(value: T | null | undefined): value is T {\n  return value != null;\n}\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames, GameMode } from \"../types\";\nimport { exists } from \"../utils/exists\";\nimport type { TargetBreakType } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// The Target item's in-game ID\nconst TARGET_ITEM_TYPE_ID = 209;\n\nexport class TargetBreakComputer implements StatComputer<TargetBreakType[]> {\n  private targetBreaks = new Array<TargetBreakType>();\n  private isTargetTestGame = false;\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.targetBreaks = [];\n    this.isTargetTestGame = settings.gameMode === GameMode.TARGET_TEST;\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    if (!this.isTargetTestGame) {\n      return;\n    }\n\n    handleTargetBreak(allFrames, frame, this.targetBreaks);\n  }\n\n  public fetch(): TargetBreakType[] {\n    return this.targetBreaks;\n  }\n}\n\nfunction handleTargetBreak(frames: FramesType, frame: FrameEntryType, targetBreaks: TargetBreakType[]) {\n  const currentFrameNumber = frame.frame;\n  const prevFrameNumber = currentFrameNumber - 1;\n\n  // Add all targets on the first frame\n  if (currentFrameNumber === Frames.FIRST) {\n    const targets = frames[Frames.FIRST]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n\n    targets.forEach((target) => {\n      targetBreaks.push({\n        spawnId: target.spawnId as number,\n        frameDestroyed: null,\n        positionX: target.positionX as number,\n        positionY: target.positionY as number,\n      });\n    });\n  }\n\n  const currentTargets = frames[currentFrameNumber]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n  const previousTargets = frames[prevFrameNumber]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n\n  const currentTargetIds = currentTargets.map((item) => item.spawnId).filter(exists);\n  const previousTargetIds = previousTargets.map((item) => item.spawnId).filter(exists);\n\n  // Check if any targets were destroyed\n  const brokenTargetIds = previousTargetIds.filter((id) => !currentTargetIds.includes(id));\n  brokenTargetIds.forEach((id) => {\n    // Update the target break\n    const targetBreak = targetBreaks.find((targetBreak) => targetBreak.spawnId === id);\n    if (targetBreak) {\n      targetBreak.frameDestroyed = currentFrameNumber;\n    }\n  });\n}\n","import { format } from \"date-fns\";\n\nimport type { GameStartType } from \"../types\";\nimport { TimerType } from \"../types\";\nimport { exists } from \"./exists\";\n\nexport function frameToGameTimer(\n  frame: number,\n  options: Pick<GameStartType, \"timerType\" | \"startingTimerSeconds\">,\n): string {\n  const { timerType, startingTimerSeconds } = options;\n\n  if (timerType === TimerType.DECREASING) {\n    if (!exists(startingTimerSeconds)) {\n      return \"Unknown\";\n    }\n    const centiseconds = Math.ceil((((60 - (frame % 60)) % 60) * 99) / 59);\n    const date = new Date(0, 0, 0, 0, 0, startingTimerSeconds - frame / 60, centiseconds * 10);\n    return format(date, \"mm:ss.SS\");\n  }\n\n  if (timerType === TimerType.INCREASING) {\n    const centiseconds = Math.floor(((frame % 60) * 99) / 59);\n    const date = new Date(0, 0, 0, 0, 0, frame / 60, centiseconds * 10);\n    return format(date, \"mm:ss.SS\");\n  }\n\n  return \"Infinite\";\n}\n","import { decode, encode } from \"@shelacek/ubjson\";\n\nexport enum CommunicationType {\n  HANDSHAKE = 1,\n  REPLAY = 2,\n  KEEP_ALIVE = 3,\n}\n\nexport type CommunicationMessage = {\n  type: CommunicationType;\n  payload: {\n    cursor: Uint8Array;\n    clientToken: Uint8Array;\n    pos: Uint8Array;\n    nextPos: Uint8Array;\n    data: Uint8Array;\n    nick: string | null;\n    forcePos: boolean;\n    nintendontVersion: string | null;\n  };\n};\n\n// This class is responsible for handling the communication protocol between the Wii and the\n// desktop app\nexport class ConsoleCommunication {\n  private receiveBuf = Buffer.from([]);\n  private messages = new Array<CommunicationMessage>();\n\n  public receive(data: Buffer): void {\n    this.receiveBuf = Buffer.concat([this.receiveBuf, data]);\n\n    while (this.receiveBuf.length >= 4) {\n      // First get the size of the message we are expecting\n      const msgSize = this.receiveBuf.readUInt32BE(0);\n\n      if (this.receiveBuf.length < msgSize + 4) {\n        // If we haven't received all the data yet, let's wait for more\n        return;\n      }\n\n      // Here we have received all the data, so let's decode it\n      const ubjsonData = this.receiveBuf.slice(4, msgSize + 4);\n      this.messages.push(decode(ubjsonData));\n\n      // Remove the processed data from receiveBuf\n      this.receiveBuf = this.receiveBuf.slice(msgSize + 4);\n    }\n  }\n\n  public getReceiveBuffer(): Buffer {\n    return this.receiveBuf;\n  }\n\n  public getMessages(): Array<CommunicationMessage> {\n    const toReturn = this.messages;\n    this.messages = [];\n\n    return toReturn;\n  }\n\n  public genHandshakeOut(cursor: Uint8Array, clientToken: number, isRealtime = false): Buffer {\n    const clientTokenBuf = Buffer.from([0, 0, 0, 0]);\n    clientTokenBuf.writeUInt32BE(clientToken, 0);\n\n    const message = {\n      type: CommunicationType.HANDSHAKE,\n      payload: {\n        cursor: cursor,\n        clientToken: Uint8Array.from(clientTokenBuf), // TODO: Use real instance token\n        isRealtime: isRealtime,\n      },\n    };\n\n    const buf = encode(message, {\n      optimizeArrays: true,\n    });\n\n    const msg = Buffer.concat([Buffer.from([0, 0, 0, 0]), Buffer.from(buf)]);\n\n    msg.writeUInt32BE(buf.byteLength, 0);\n\n    return msg;\n  }\n}\n","import type { EventEmitter } from \"events\";\n\nexport enum ConnectionEvent {\n  CONNECT = \"connect\",\n  MESSAGE = \"message\",\n  HANDSHAKE = \"handshake\",\n  STATUS_CHANGE = \"statusChange\",\n  DATA = \"data\",\n  ERROR = \"error\",\n}\n\nexport enum ConnectionStatus {\n  DISCONNECTED = 0,\n  CONNECTING = 1,\n  CONNECTED = 2,\n  RECONNECT_WAIT = 3,\n}\n\nexport enum Ports {\n  DEFAULT = 51441,\n  LEGACY = 666,\n  RELAY_START = 53741,\n}\n\nexport type ConnectionDetails = {\n  consoleNick: string;\n  gameDataCursor: number | Uint8Array;\n  version: string;\n  clientToken?: number;\n};\n\nexport type ConnectionSettings = {\n  ipAddress: string;\n  port: number;\n};\n\nexport interface Connection extends EventEmitter {\n  getStatus(): ConnectionStatus;\n  getSettings(): ConnectionSettings;\n  getDetails(): ConnectionDetails;\n  connect(ip: string, port: number): void;\n  disconnect(): void;\n}\n","import { EventEmitter } from \"events\";\nimport inject from \"reconnect-core\";\n\nimport type { CommunicationMessage } from \"./communication\";\nimport { CommunicationType, ConsoleCommunication } from \"./communication\";\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nexport const NETWORK_MESSAGE = \"HELO\\0\";\n\nconst DEFAULT_CONNECTION_TIMEOUT_MS = 20000;\n\nenum CommunicationState {\n  INITIAL = \"initial\",\n  LEGACY = \"legacy\",\n  NORMAL = \"normal\",\n}\n\nconst defaultConnectionDetails: ConnectionDetails = {\n  consoleNick: \"unknown\",\n  gameDataCursor: Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]),\n  version: \"\",\n  clientToken: 0,\n};\n\nconst consoleConnectionOptions = {\n  autoReconnect: true,\n};\n\nexport type ConsoleConnectionOptions = typeof consoleConnectionOptions;\n\n/**\n * Responsible for maintaining connection to a Slippi relay connection or Wii connection.\n * Events are emitted whenever data is received.\n *\n * Basic usage example:\n *\n * ```javascript\n * const { ConsoleConnection } = require(\"@slippi/slippi-js\");\n *\n * const connection = new ConsoleConnection();\n * connection.connect(\"localhost\", 667); // You should set these values appropriately\n *\n * connection.on(\"data\", (data) => {\n *   // Received data from console\n *   console.log(data);\n * });\n *\n * connection.on(\"statusChange\", (status) => {\n *   console.log(`status changed: ${status}`);\n * });\n * ```\n */\nexport class ConsoleConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private isRealtime: boolean;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private connDetails: ConnectionDetails = { ...defaultConnectionDetails };\n  private client: any | null = null;\n  private connection: inject.Instance<unknown, any> | null = null;\n  private options: ConsoleConnectionOptions;\n  private shouldReconnect = false;\n\n  public constructor(options?: Partial<ConsoleConnectionOptions>) {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n    this.isRealtime = false;\n    this.options = Object.assign({}, consoleConnectionOptions, options);\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  /**\n   * @returns The specific details about the connected console.\n   */\n  public getDetails(): ConnectionDetails {\n    return { ...this.connDetails };\n  }\n\n  /**\n   * Initiate a connection to the Wii or Slippi relay.\n   * @param ip   The IP address of the Wii or Slippi relay.\n   * @param port The port to connect to.\n   * @param isRealtime Optional. A flag to tell the Wii to send data as quickly as possible\n   * @param timeout Optional. The timeout in milliseconds when attempting to connect\n   *                to the Wii or relay.\n   */\n  public connect(ip: string, port: number, isRealtime = false, timeout = DEFAULT_CONNECTION_TIMEOUT_MS): void {\n    this.ipAddress = ip;\n    this.port = port;\n    this.isRealtime = isRealtime;\n    this._connectOnPort(ip, port, timeout);\n  }\n\n  private _connectOnPort(ip: string, port: number, timeout: number): void {\n    // set up reconnect\n    const reconnect = inject(\n      () => {},\n      // net.connect({\n      //   host: ip,\n      //   port: port,\n      //   timeout: timeout,\n      // }),\n    );\n\n    // Indicate we are connecting\n    this._setStatus(ConnectionStatus.CONNECTING);\n\n    // Prepare console communication obj for talking UBJSON\n    const consoleComms = new ConsoleCommunication();\n\n    // TODO: reconnect on failed reconnect, not sure how\n    // TODO: to do this\n    const connection = reconnect(\n      {\n        initialDelay: 2000,\n        maxDelay: 10000,\n        strategy: \"fibonacci\",\n        failAfter: Infinity,\n      },\n      (client) => {\n        this.emit(ConnectionEvent.CONNECT);\n        // We successfully connected so turn on auto-reconnect\n        this.shouldReconnect = this.options.autoReconnect;\n        this.client = client;\n\n        let commState: CommunicationState = CommunicationState.INITIAL;\n        // client.on(\"data\", (data) => {\n        //   if (commState === CommunicationState.INITIAL) {\n        //     commState = this._getInitialCommState(data);\n        //     console.log(`Connected to ${ip}:${port} with type: ${commState}`);\n        //     this._setStatus(ConnectionStatus.CONNECTED);\n        //     console.log(data.toString(\"hex\"));\n        //   }\n\n        //   if (commState === CommunicationState.LEGACY) {\n        //     // If the first message received was not a handshake message, either we\n        //     // connected to an old Nintendont version or a relay instance\n        //     this._handleReplayData(data);\n        //     return;\n        //   }\n\n        //   try {\n        //     consoleComms.receive(data);\n        //   } catch (err) {\n        //     console.error(\"Failed to process new data from server...\", {\n        //       error: err,\n        //       prevDataBuf: consoleComms.getReceiveBuffer(),\n        //       rcvData: data,\n        //     });\n        //     client.destroy();\n        //     this.emit(ConnectionEvent.ERROR, err);\n        //     return;\n        //   }\n        //   const messages = consoleComms.getMessages();\n\n        //   // Process all of the received messages\n        //   try {\n        //     messages.forEach((message) => this._processMessage(message));\n        //   } catch (err) {\n        //     // Disconnect client to send another handshake message\n        //     console.error(err);\n        //     client.destroy();\n        //     this.emit(ConnectionEvent.ERROR, err);\n        //   }\n        // });\n\n        // client.on(\"timeout\", () => {\n        //   // const previouslyConnected = this.connectionStatus === ConnectionStatus.CONNECTED;\n        //   console.warn(`Attempted connection to ${ip}:${port} timed out after ${timeout}ms`);\n        //   client.destroy();\n        // });\n\n        // client.on(\"end\", () => {\n        //   console.log(\"disconnect\");\n        //   if (!this.shouldReconnect) {\n        //     client.destroy();\n        //   }\n        // });\n\n        // client.on(\"close\", () => {\n        //   console.log(\"connection was closed\");\n        // });\n\n        const handshakeMsgOut = consoleComms.genHandshakeOut(\n          this.connDetails.gameDataCursor as Uint8Array,\n          this.connDetails.clientToken ?? 0,\n          this.isRealtime,\n        );\n\n        // client.write(handshakeMsgOut);\n      },\n    );\n\n    const setConnectingStatus = (): void => {\n      // Indicate we are connecting\n      this._setStatus(this.shouldReconnect ? ConnectionStatus.RECONNECT_WAIT : ConnectionStatus.CONNECTING);\n    };\n\n    connection.on(\"connect\", setConnectingStatus);\n    connection.on(\"reconnect\", setConnectingStatus);\n\n    connection.on(\"disconnect\", () => {\n      if (!this.shouldReconnect) {\n        connection.reconnect = false;\n        connection.disconnect();\n        this._setStatus(ConnectionStatus.DISCONNECTED);\n      }\n      // TODO: Figure out how to set RECONNECT_WAIT state here. Currently it will stay on\n      // TODO: Connecting... forever\n    });\n\n    connection.on(\"error\", (err) => {\n      console.warn(`Connection on port ${port} encountered an error.`, err);\n\n      this._setStatus(ConnectionStatus.DISCONNECTED);\n      this.emit(ConnectionEvent.ERROR, `Connection on port ${port} encountered an error.\\n${err}`);\n    });\n\n    this.connection = connection;\n    connection.connect(port);\n  }\n\n  /**\n   * Terminate the current connection.\n   */\n  public disconnect(): void {\n    // Prevent reconnections and disconnect\n    if (this.connection) {\n      this.connection.reconnect = false;\n      this.connection.disconnect();\n      this.connection = null;\n    }\n\n    if (this.client) {\n      this.client.destroy();\n    }\n  }\n\n  private _getInitialCommState(data: Buffer): CommunicationState {\n    if (data.length < 13) {\n      return CommunicationState.LEGACY;\n    }\n\n    const openingBytes = Buffer.from([0x7b, 0x69, 0x04, 0x74, 0x79, 0x70, 0x65, 0x55, 0x01]);\n\n    const dataStart = data.slice(4, 13);\n\n    return dataStart.equals(openingBytes) ? CommunicationState.NORMAL : CommunicationState.LEGACY;\n  }\n\n  private _processMessage(message: CommunicationMessage): void {\n    this.emit(ConnectionEvent.MESSAGE, message);\n    switch (message.type) {\n      case CommunicationType.KEEP_ALIVE:\n        // console.log(\"Keep alive message received\");\n\n        // TODO: This is the jankiest shit ever but it will allow for relay connections not\n        // TODO: to time out as long as the main connection is still receving keep alive messages\n        // TODO: Need to figure out a better solution for this. There should be no need to have an\n        // TODO: active Wii connection for the relay connection to keep itself alive\n        const fakeKeepAlive = Buffer.from(NETWORK_MESSAGE);\n        this._handleReplayData(fakeKeepAlive);\n\n        break;\n      case CommunicationType.REPLAY:\n        const readPos = Uint8Array.from(message.payload.pos);\n        const cmp = Buffer.compare(this.connDetails.gameDataCursor as Uint8Array, readPos);\n        if (!message.payload.forcePos && cmp !== 0) {\n          // The readPos is not the one we are waiting on, throw error\n          throw new Error(\n            `Position of received data is incorrect. Expected: ${this.connDetails.gameDataCursor.toString()}, Received: ${readPos.toString()}`,\n          );\n        }\n\n        if (message.payload.forcePos) {\n          console.warn(\n            \"Overflow occured in Nintendont, data has likely been skipped and replay corrupted. \" +\n              \"Expected, Received:\",\n            this.connDetails.gameDataCursor,\n            readPos,\n          );\n        }\n\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.nextPos);\n\n        const data = Uint8Array.from(message.payload.data);\n        this._handleReplayData(data);\n        break;\n      case CommunicationType.HANDSHAKE:\n        const { nick, nintendontVersion } = message.payload;\n        if (nick) {\n          this.connDetails.consoleNick = nick;\n        }\n        const tokenBuf = Buffer.from(message.payload.clientToken);\n        this.connDetails.clientToken = tokenBuf.readUInt32BE(0);\n        if (nintendontVersion) {\n          this.connDetails.version = nintendontVersion;\n        }\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.pos);\n        this.emit(ConnectionEvent.HANDSHAKE, this.connDetails);\n        break;\n      default:\n        // Should this be an error?\n        break;\n    }\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n}\n","import { EventEmitter } from \"events\";\n\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nconst MAX_PEERS = 32;\n\nexport enum DolphinMessageType {\n  CONNECT_REPLY = \"connect_reply\",\n  GAME_EVENT = \"game_event\",\n  START_GAME = \"start_game\",\n  END_GAME = \"end_game\",\n}\n\nexport class DolphinConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private gameCursor = 0;\n  private nickname = \"unknown\";\n  private version = \"\";\n  private peer: any | null = null;\n\n  public constructor() {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  public getDetails(): ConnectionDetails {\n    return {\n      consoleNick: this.nickname,\n      gameDataCursor: this.gameCursor,\n      version: this.version,\n    };\n  }\n\n  public async connect(ip: string, port: number): Promise<void> {\n    console.log(`Connecting to: ${ip}:${port}`);\n    this.ipAddress = ip;\n    this.port = port;\n\n    const enet = await import(\"enet\");\n    // Create the enet client\n    const client = enet.createClient({ peers: MAX_PEERS, channels: 3, down: 0, up: 0 }, (err) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n\n    this.peer = client.connect(\n      {\n        address: this.ipAddress,\n        port: this.port,\n      },\n      3,\n      1337, // Data to send, not sure what this is or what this represents\n      (err: any, newPeer: any) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        newPeer.ping();\n        this.emit(ConnectionEvent.CONNECT);\n        this._setStatus(ConnectionStatus.CONNECTED);\n      },\n    );\n\n    this.peer.on(\"connect\", () => {\n      // Reset the game cursor to the beginning of the game. Do we need to do this or\n      // should it just continue from where it left off?\n      this.gameCursor = 0;\n\n      const request = {\n        type: \"connect_request\",\n        cursor: this.gameCursor,\n      };\n      const packet = new enet.Packet(JSON.stringify(request), enet.PACKET_FLAG.RELIABLE);\n      this.peer.send(0, packet);\n    });\n\n    this.peer.on(\"message\", (packet: any) => {\n      const data = packet.data();\n      if (data.length === 0) {\n        return;\n      }\n\n      const dataString = data.toString(\"ascii\");\n      const message = JSON.parse(dataString);\n      const { dolphin_closed } = message;\n      if (dolphin_closed) {\n        // We got a disconnection request\n        this.disconnect();\n        return;\n      }\n      this.emit(ConnectionEvent.MESSAGE, message);\n      switch (message.type) {\n        case DolphinMessageType.CONNECT_REPLY:\n          this.connectionStatus = ConnectionStatus.CONNECTED;\n          this.gameCursor = message.cursor;\n          this.nickname = message.nick;\n          this.version = message.version;\n          this.emit(ConnectionEvent.HANDSHAKE, this.getDetails());\n          break;\n        case DolphinMessageType.GAME_EVENT: {\n          const { payload } = message;\n          //TODO: remove after game start and end messages have been in stable Ishii for a bit\n          if (!payload) {\n            // We got a disconnection request\n            this.disconnect();\n            return;\n          }\n\n          this._updateCursor(message, dataString);\n\n          const gameData = Buffer.from(payload, \"base64\");\n          this._handleReplayData(gameData);\n          break;\n        }\n        case DolphinMessageType.START_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n        case DolphinMessageType.END_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n      }\n    });\n\n    this.peer.on(\"disconnect\", () => {\n      this.disconnect();\n    });\n\n    this._setStatus(ConnectionStatus.CONNECTING);\n  }\n\n  public disconnect(): void {\n    if (this.peer) {\n      this.peer.disconnect();\n      this.peer = null;\n    }\n    this._setStatus(ConnectionStatus.DISCONNECTED);\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n\n  private _updateCursor(message: { cursor: number; next_cursor: number }, dataString: string): void {\n    const { cursor, next_cursor } = message;\n\n    if (this.gameCursor !== cursor) {\n      const err = new Error(\n        `Unexpected game data cursor. Expected: ${this.gameCursor} but got: ${cursor}. Payload: ${dataString}`,\n      );\n      console.warn(err);\n      this.emit(ConnectionEvent.ERROR, err);\n    }\n\n    this.gameCursor = next_cursor;\n  }\n}\n","import map from \"lodash/map\";\n\nexport function toHalfwidth(str: string): string {\n  // Converts a fullwidth character to halfwidth\n  const convertChar = (charCode: number): number => {\n    /**\n     * Standard full width encodings\n     * https://en.wikipedia.org/wiki/Halfwidth_and_Fullwidth_Forms_(Unicode_block)\n     */\n    if (charCode > 0xff00 && charCode < 0xff5f) {\n      return 0x0020 + (charCode - 0xff00);\n    }\n\n    // space:\n    if (charCode === 0x3000) {\n      return 0x0020;\n    }\n\n    /**\n     * Exceptions found in Melee/Japanese keyboards\n     */\n    // single quote: '\n    if (charCode === 0x2019) {\n      return 0x0027;\n    }\n\n    // double quote: \"\n    if (charCode === 0x201d) {\n      return 0x0022;\n    }\n\n    return charCode;\n  };\n\n  const ret = map(str, (char) => convertChar(char.charCodeAt(0)));\n\n  return String.fromCharCode(...ret);\n}\n","import { decode } from \"@shelacek/ubjson\";\nimport iconv from \"iconv-lite\";\nimport mapValues from \"lodash/mapValues\";\n\nimport type {\n  EventCallbackFunc,\n  EventPayloadTypes,\n  GameEndType,\n  GameInfoType,\n  GameStartType,\n  GeckoCodeType,\n  MetadataType,\n  PlacementType,\n  PlayerType,\n  PostFrameUpdateType,\n  SelfInducedSpeedsType,\n} from \"../types\";\nimport { Command } from \"../types\";\nimport { exists } from \"./exists\";\nimport { toHalfwidth } from \"./fullwidth\";\n\nexport enum SlpInputSource {\n  BUFFER = \"buffer\",\n  FILE = \"file\",\n}\n\ntype SlpFileReadInput = {\n  source: SlpInputSource.FILE;\n  filePath: string;\n};\n\ntype SlpBufferReadInput = {\n  source: SlpInputSource.BUFFER;\n  buffer: Buffer;\n};\n\nexport type SlpReadInput = SlpFileReadInput | SlpBufferReadInput;\n\nexport type SlpRefType = SlpFileSourceRef | SlpBufferSourceRef;\n\nexport type SlpFileType = {\n  ref: SlpRefType;\n  rawDataPosition: number;\n  rawDataLength: number;\n  metadataPosition: number;\n  metadataLength: number;\n  messageSizes: {\n    [command: number]: number;\n  };\n};\n\nexport type SlpFileSourceRef = {\n  source: SlpInputSource.FILE;\n  fileDescriptor: number;\n};\n\nexport type SlpBufferSourceRef = {\n  source: SlpInputSource.BUFFER;\n  buffer: Buffer;\n};\n\nfunction getRef(input: SlpReadInput): SlpRefType {\n  switch (input.source) {\n    case SlpInputSource.BUFFER:\n      return {\n        source: input.source,\n        buffer: input.buffer,\n      };\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction readRef(ref: SlpRefType, buffer: Uint8Array, offset: number, length: number, position: number): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      console.error(\"deleted this for cloudflare worker support :)\");\n\n      throw new Error(\"cfw support\");\n    case SlpInputSource.BUFFER:\n      if (position >= ref.buffer.length) {\n        return 0;\n      }\n      return ref.buffer.copy(buffer, offset, position, position + length);\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction getLenRef(ref: SlpRefType): number {\n  switch (ref.source) {\n    case SlpInputSource.BUFFER:\n      return ref.buffer.length;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\n/**\n * Opens a file at path\n */\nexport function openSlpFile(input: SlpReadInput): SlpFileType {\n  const ref = getRef(input);\n\n  const rawDataPosition = getRawDataPosition(ref);\n  const rawDataLength = getRawDataLength(ref, rawDataPosition);\n  const metadataPosition = rawDataPosition + rawDataLength + 10; // remove metadata string\n  const metadataLength = getMetadataLength(ref, metadataPosition);\n  const messageSizes = getMessageSizes(ref, rawDataPosition);\n\n  return {\n    ref,\n    rawDataPosition,\n    rawDataLength,\n    metadataPosition,\n    metadataLength,\n    messageSizes,\n  };\n}\n\nexport function closeSlpFile(file: SlpFileType): void {\n  switch (file.ref.source) {\n  }\n}\n\n// This function gets the position where the raw data starts\nfunction getRawDataPosition(ref: SlpRefType): number {\n  const buffer = new Uint8Array(1);\n  readRef(ref, buffer, 0, buffer.length, 0);\n\n  if (buffer[0] === 0x36) {\n    return 0;\n  }\n\n  if (buffer[0] !== \"{\".charCodeAt(0)) {\n    return 0; // return error?\n  }\n\n  return 15;\n}\n\nfunction getRawDataLength(ref: SlpRefType, position: number): number {\n  const fileSize = getLenRef(ref);\n  if (position === 0) {\n    return fileSize;\n  }\n\n  const buffer = new Uint8Array(4);\n  readRef(ref, buffer, 0, buffer.length, position - 4);\n\n  const rawDataLen = (buffer[0]! << 24) | (buffer[1]! << 16) | (buffer[2]! << 8) | buffer[3]!;\n  if (rawDataLen > 0) {\n    // If this method manages to read a number, it's probably trustworthy\n    return rawDataLen;\n  }\n\n  // If the above does not return a valid data length,\n  // return a file size based on file length. This enables\n  // some support for severed files\n  return fileSize - position;\n}\n\nfunction getMetadataLength(ref: SlpRefType, position: number): number {\n  const len = getLenRef(ref);\n  return len - position - 1;\n}\n\nfunction getMessageSizes(\n  ref: SlpRefType,\n  position: number,\n): {\n  [command: number]: number;\n} {\n  const messageSizes: {\n    [command: number]: number;\n  } = {};\n  // Support old file format\n  if (position === 0) {\n    messageSizes[0x36] = 0x140;\n    messageSizes[0x37] = 0x6;\n    messageSizes[0x38] = 0x46;\n    messageSizes[0x39] = 0x1;\n    return messageSizes;\n  }\n\n  const buffer = new Uint8Array(2);\n  readRef(ref, buffer, 0, buffer.length, position);\n  if (buffer[0] !== Command.MESSAGE_SIZES) {\n    return {};\n  }\n\n  const payloadLength = buffer[1] as number;\n  (messageSizes[0x35] as any) = payloadLength;\n\n  const messageSizesBuffer = new Uint8Array(payloadLength - 1);\n  readRef(ref, messageSizesBuffer, 0, messageSizesBuffer.length, position + 2);\n  for (let i = 0; i < payloadLength - 1; i += 3) {\n    const command = messageSizesBuffer[i] as number;\n\n    // Get size of command\n    (messageSizes[command] as any) = (messageSizesBuffer[i + 1]! << 8) | messageSizesBuffer[i + 2]!;\n  }\n\n  return messageSizes;\n}\n\nfunction getEnabledItems(view: DataView): number {\n  const offsets = [0x1, 0x100, 0x10000, 0x1000000, 0x100000000];\n  const enabledItems = offsets.reduce((acc, byteOffset, index) => {\n    const byte = readUint8(view, 0x28 + index) as number;\n    return acc + byte * byteOffset;\n  }, 0);\n\n  return enabledItems;\n}\n\nfunction getGameInfoBlock(view: DataView): GameInfoType {\n  const offset = 0x5;\n\n  return {\n    gameBitfield1: readUint8(view, 0x0 + offset),\n    gameBitfield2: readUint8(view, 0x1 + offset),\n    gameBitfield3: readUint8(view, 0x2 + offset),\n    gameBitfield4: readUint8(view, 0x3 + offset),\n    bombRainEnabled: (readUint8(view, 0x6 + offset)! & 0xff) > 0 ? true : false,\n    selfDestructScoreValue: readInt8(view, 0xc + offset),\n    itemSpawnBitfield1: readUint8(view, 0x23 + offset),\n    itemSpawnBitfield2: readUint8(view, 0x24 + offset),\n    itemSpawnBitfield3: readUint8(view, 0x25 + offset),\n    itemSpawnBitfield4: readUint8(view, 0x26 + offset),\n    itemSpawnBitfield5: readUint8(view, 0x27 + offset),\n    damageRatio: readFloat(view, 0x30 + offset),\n  };\n}\n\n/**\n * Iterates through slp events and parses payloads\n */\nexport function iterateEvents(\n  slpFile: SlpFileType,\n  callback: EventCallbackFunc,\n  startPos: number | null = null,\n): number {\n  const ref = slpFile.ref;\n\n  let readPosition = startPos !== null && startPos > 0 ? startPos : slpFile.rawDataPosition;\n  const stopReadingAt = slpFile.rawDataPosition + slpFile.rawDataLength;\n\n  // Generate read buffers for each\n  const commandPayloadBuffers = mapValues(slpFile.messageSizes, (size) => new Uint8Array(size + 1));\n  let splitMessageBuffer = new Uint8Array(0);\n\n  const commandByteBuffer = new Uint8Array(1);\n  while (readPosition < stopReadingAt) {\n    readRef(ref, commandByteBuffer, 0, 1, readPosition);\n    let commandByte = (commandByteBuffer[0] as number) ?? 0;\n    let buffer = commandPayloadBuffers[commandByte];\n    if (buffer === undefined) {\n      // If we don't have an entry for this command, return false to indicate failed read\n      return readPosition;\n    }\n\n    if (buffer.length > stopReadingAt - readPosition) {\n      return readPosition;\n    }\n\n    const advanceAmount = buffer.length;\n\n    readRef(ref, buffer, 0, buffer.length, readPosition);\n    if (commandByte === Command.SPLIT_MESSAGE) {\n      // Here we have a split message, we will collect data from them until the last\n      // message of the list is received\n      const view = new DataView(buffer.buffer);\n      const size = readUint16(view, 0x201) ?? 512;\n      const isLastMessage = readBool(view, 0x204);\n      const internalCommand = readUint8(view, 0x203) ?? 0;\n\n      // If this is the first message, initialize the splitMessageBuffer\n      // with the internal command byte because our parseMessage function\n      // seems to expect a command byte at the start\n      if (splitMessageBuffer.length === 0) {\n        splitMessageBuffer = new Uint8Array(1);\n        splitMessageBuffer[0] = internalCommand;\n      }\n\n      // Collect new data into splitMessageBuffer\n      const appendBuf = buffer.slice(0x1, 0x1 + size);\n      const mergedBuf = new Uint8Array(splitMessageBuffer.length + appendBuf.length);\n      mergedBuf.set(splitMessageBuffer);\n      mergedBuf.set(appendBuf, splitMessageBuffer.length);\n      splitMessageBuffer = mergedBuf;\n\n      if (isLastMessage) {\n        commandByte = splitMessageBuffer[0] ?? 0;\n        buffer = splitMessageBuffer;\n        splitMessageBuffer = new Uint8Array(0);\n      }\n    }\n\n    const parsedPayload = parseMessage(commandByte, buffer);\n    const shouldStop = callback(commandByte, parsedPayload, buffer);\n    if (shouldStop) {\n      break;\n    }\n\n    readPosition += advanceAmount;\n  }\n\n  return readPosition;\n}\n\nexport function parseMessage(command: Command, payload: Uint8Array): EventPayloadTypes | null {\n  const view = new DataView(payload.buffer);\n  switch (command) {\n    case Command.GAME_START:\n      const getPlayerObject = (playerIndex: number): PlayerType => {\n        // Controller Fix stuff\n        const cfOffset = playerIndex * 0x8;\n        const dashback = readUint32(view, 0x141 + cfOffset);\n        const shieldDrop = readUint32(view, 0x145 + cfOffset);\n        let controllerFix = \"None\";\n        if (dashback !== shieldDrop) {\n          controllerFix = \"Mixed\";\n        } else if (dashback === 1) {\n          controllerFix = \"UCF\";\n        } else if (dashback === 2) {\n          controllerFix = \"Dween\";\n        }\n\n        // Nametag stuff\n        const nametagLength = 0x10;\n        const nametagOffset = playerIndex * nametagLength;\n        const nametagStart = 0x161 + nametagOffset;\n        const nametagBuf = payload.slice(nametagStart, nametagStart + nametagLength);\n        const nameTagString = iconv\n          .decode(nametagBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const nametag = nameTagString ? toHalfwidth(nameTagString) : \"\";\n\n        // Display name\n        const displayNameLength = 0x1f;\n        const displayNameOffset = playerIndex * displayNameLength;\n        const displayNameStart = 0x1a5 + displayNameOffset;\n        const displayNameBuf = payload.slice(displayNameStart, displayNameStart + displayNameLength);\n        const displayNameString = iconv\n          .decode(displayNameBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const displayName = displayNameString ? toHalfwidth(displayNameString) : \"\";\n\n        // Connect code\n        const connectCodeLength = 0xa;\n        const connectCodeOffset = playerIndex * connectCodeLength;\n        const connectCodeStart = 0x221 + connectCodeOffset;\n        const connectCodeBuf = payload.slice(connectCodeStart, connectCodeStart + connectCodeLength);\n        const connectCodeString = iconv\n          .decode(connectCodeBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const connectCode = connectCodeString ? toHalfwidth(connectCodeString) : \"\";\n\n        const userIdLength = 0x1d;\n        const userIdOffset = playerIndex * userIdLength;\n        const userIdStart = 0x249 + userIdOffset;\n        const userIdBuf = payload.slice(userIdStart, userIdStart + userIdLength);\n        const userIdString = iconv\n          .decode(userIdBuf as Buffer, \"utf8\")\n          .split(\"\\0\")\n          .shift();\n        const userId = userIdString ?? \"\";\n\n        const offset = playerIndex * 0x24;\n        const playerInfo: PlayerType = {\n          playerIndex,\n          port: playerIndex + 1,\n          characterId: readUint8(view, 0x65 + offset),\n          type: readUint8(view, 0x66 + offset),\n          startStocks: readUint8(view, 0x67 + offset),\n          characterColor: readUint8(view, 0x68 + offset),\n          teamShade: readUint8(view, 0x6c + offset),\n          handicap: readUint8(view, 0x6d + offset),\n          teamId: readUint8(view, 0x6e + offset),\n          staminaMode: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x01)),\n          silentCharacter: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x02)),\n          lowGravity: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x04)),\n          invisible: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x08)),\n          blackStockIcon: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x10)),\n          metal: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x20)),\n          startOnAngelPlatform: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x40)),\n          rumbleEnabled: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x80)),\n          cpuLevel: readUint8(view, 0x74 + offset),\n          offenseRatio: readFloat(view, 0x7d + offset),\n          defenseRatio: readFloat(view, 0x81 + offset),\n          modelScale: readFloat(view, 0x85 + offset),\n          controllerFix,\n          nametag,\n          displayName,\n          connectCode,\n          userId,\n        };\n        return playerInfo;\n      };\n\n      const matchIdLength = 51;\n      const matchIdStart = 0x2be;\n      const matchIdBuf = payload.slice(matchIdStart, matchIdStart + matchIdLength);\n      const matchIdString = iconv\n        .decode(matchIdBuf as Buffer, \"utf8\")\n        .split(\"\\0\")\n        .shift();\n      const matchId = matchIdString ?? \"\";\n\n      const gameSettings: GameStartType = {\n        slpVersion: `${readUint8(view, 0x1)}.${readUint8(view, 0x2)}.${readUint8(view, 0x3)}`,\n        timerType: readUint8(view, 0x5, 0x03),\n        inGameMode: readUint8(view, 0x5, 0xe0),\n        friendlyFireEnabled: !!readUint8(view, 0x6, 0x01),\n        isTeams: readBool(view, 0xd),\n        itemSpawnBehavior: readUint8(view, 0x10),\n        stageId: readUint16(view, 0x13),\n        startingTimerSeconds: readUint32(view, 0x15),\n        enabledItems: getEnabledItems(view),\n        players: [0, 1, 2, 3].map(getPlayerObject),\n        scene: readUint8(view, 0x1a3),\n        gameMode: readUint8(view, 0x1a4),\n        language: readUint8(view, 0x2bd),\n        gameInfoBlock: getGameInfoBlock(view),\n        randomSeed: readUint32(view, 0x13d),\n        isPAL: readBool(view, 0x1a1),\n        isFrozenPS: readBool(view, 0x1a2),\n        matchInfo: {\n          matchId,\n          gameNumber: readUint32(view, 0x2f1),\n          tiebreakerNumber: readUint32(view, 0x2f5),\n        },\n      };\n      return gameSettings;\n    case Command.FRAME_START:\n      return {\n        frame: readInt32(view, 0x1),\n        seed: readUint32(view, 0x5),\n        sceneFrameCounter: readUint32(view, 0x9),\n      };\n\n    case Command.PRE_FRAME_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        seed: readUint32(view, 0x7),\n        actionStateId: readUint16(view, 0xb),\n        positionX: readFloat(view, 0xd),\n        positionY: readFloat(view, 0x11),\n        facingDirection: readFloat(view, 0x15),\n        joystickX: readFloat(view, 0x19),\n        joystickY: readFloat(view, 0x1d),\n        cStickX: readFloat(view, 0x21),\n        cStickY: readFloat(view, 0x25),\n        trigger: readFloat(view, 0x29),\n        buttons: readUint32(view, 0x2d),\n        physicalButtons: readUint16(view, 0x31),\n        physicalLTrigger: readFloat(view, 0x33),\n        physicalRTrigger: readFloat(view, 0x37),\n        rawJoystickX: readInt8(view, 0x3b),\n        percent: readFloat(view, 0x3c),\n      };\n    case Command.POST_FRAME_UPDATE:\n      const selfInducedSpeeds: SelfInducedSpeedsType = {\n        airX: readFloat(view, 0x35),\n        y: readFloat(view, 0x39),\n        attackX: readFloat(view, 0x3d),\n        attackY: readFloat(view, 0x41),\n        groundX: readFloat(view, 0x45),\n      };\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        internalCharacterId: readUint8(view, 0x7),\n        actionStateId: readUint16(view, 0x8),\n        positionX: readFloat(view, 0xa),\n        positionY: readFloat(view, 0xe),\n        facingDirection: readFloat(view, 0x12),\n        percent: readFloat(view, 0x16),\n        shieldSize: readFloat(view, 0x1a),\n        lastAttackLanded: readUint8(view, 0x1e),\n        currentComboCount: readUint8(view, 0x1f),\n        lastHitBy: readUint8(view, 0x20),\n        stocksRemaining: readUint8(view, 0x21),\n        actionStateCounter: readFloat(view, 0x22),\n        miscActionState: readFloat(view, 0x2b),\n        isAirborne: readBool(view, 0x2f),\n        lastGroundId: readUint16(view, 0x30),\n        jumpsRemaining: readUint8(view, 0x32),\n        lCancelStatus: readUint8(view, 0x33),\n        hurtboxCollisionState: readUint8(view, 0x34),\n        selfInducedSpeeds: selfInducedSpeeds,\n        hitlagRemaining: readFloat(view, 0x49),\n        animationIndex: readUint32(view, 0x4d),\n        instanceHitBy: readUint16(view, 0x51),\n        instanceId: readUint16(view, 0x53),\n      };\n    case Command.ITEM_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        typeId: readUint16(view, 0x5),\n        state: readUint8(view, 0x7),\n        facingDirection: readFloat(view, 0x8),\n        velocityX: readFloat(view, 0xc),\n        velocityY: readFloat(view, 0x10),\n        positionX: readFloat(view, 0x14),\n        positionY: readFloat(view, 0x18),\n        damageTaken: readUint16(view, 0x1c),\n        expirationTimer: readFloat(view, 0x1e),\n        spawnId: readUint32(view, 0x22),\n        missileType: readUint8(view, 0x26),\n        turnipFace: readUint8(view, 0x27),\n        chargeShotLaunched: readUint8(view, 0x28),\n        chargePower: readUint8(view, 0x29),\n        owner: readInt8(view, 0x2a),\n        instanceId: readUint16(view, 0x2b),\n      };\n    case Command.FRAME_BOOKEND:\n      return {\n        frame: readInt32(view, 0x1),\n        latestFinalizedFrame: readInt32(view, 0x5),\n      };\n    case Command.GAME_END:\n      const placements = [0, 1, 2, 3].map((playerIndex): PlacementType => {\n        const position = readInt8(view, 0x3 + playerIndex);\n        return { playerIndex, position };\n      });\n\n      return {\n        gameEndMethod: readUint8(view, 0x1),\n        lrasInitiatorIndex: readInt8(view, 0x2),\n        placements,\n      };\n    case Command.GECKO_LIST:\n      const codes: GeckoCodeType[] = [];\n      let pos = 1;\n      while (pos < payload.length) {\n        const word1 = readUint32(view, pos) ?? 0;\n        const codetype = (word1 >> 24) & 0xfe;\n        const address = (word1 & 0x01ffffff) + 0x80000000;\n\n        let offset = 8; // Default code length, most codes are this length\n        if (codetype === 0xc0 || codetype === 0xc2) {\n          const lineCount = readUint32(view, pos + 4) ?? 0;\n          offset = 8 + lineCount * 8;\n        } else if (codetype === 0x06) {\n          const byteLen = readUint32(view, pos + 4) ?? 0;\n          offset = 8 + ((byteLen + 7) & 0xfffffff8);\n        } else if (codetype === 0x08) {\n          offset = 16;\n        }\n\n        codes.push({\n          type: codetype,\n          address: address,\n          contents: payload.slice(pos, pos + offset),\n        });\n\n        pos += offset;\n      }\n\n      return {\n        contents: payload.slice(1),\n        codes: codes,\n      };\n    default:\n      return null;\n  }\n}\n\nfunction canReadFromView(view: DataView, offset: number, length: number): boolean {\n  const viewLength = view.byteLength;\n  return offset + length <= viewLength;\n}\n\nfunction readFloat(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getFloat32(offset);\n}\n\nfunction readInt32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getInt32(offset);\n}\n\nfunction readInt8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getInt8(offset);\n}\n\nfunction readUint32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getUint32(offset);\n}\n\nfunction readUint16(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 2)) {\n    return null;\n  }\n\n  return view.getUint16(offset);\n}\n\nfunction readUint8(view: DataView, offset: number, bitmask = 0xff): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getUint8(offset) & bitmask;\n}\n\nfunction readBool(view: DataView, offset: number): boolean | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return !!view.getUint8(offset);\n}\n\nexport function getMetadata(slpFile: SlpFileType): MetadataType | null {\n  if (slpFile.metadataLength <= 0) {\n    // This will happen on a severed incomplete file\n    // $FlowFixMe\n    return null;\n  }\n\n  const buffer = new Uint8Array(slpFile.metadataLength);\n\n  readRef(slpFile.ref, buffer, 0, buffer.length, slpFile.metadataPosition);\n\n  let metadata = null;\n  try {\n    metadata = decode(buffer);\n  } catch (ex) {\n    // Do nothing\n    // console.log(ex);\n  }\n\n  // $FlowFixMe\n  return metadata;\n}\n\nexport function getGameEnd(slpFile: SlpFileType): GameEndType | null {\n  const { ref, rawDataPosition, rawDataLength, messageSizes } = slpFile;\n  const gameEndPayloadSize = messageSizes[Command.GAME_END];\n  if (!exists(gameEndPayloadSize) || gameEndPayloadSize <= 0) {\n    return null;\n  }\n\n  // Add one to account for command byte\n  const gameEndSize = gameEndPayloadSize + 1;\n  const gameEndPosition = rawDataPosition + rawDataLength - gameEndSize;\n\n  const buffer = new Uint8Array(gameEndSize);\n  readRef(ref, buffer, 0, buffer.length, gameEndPosition);\n  if (buffer[0] !== Command.GAME_END) {\n    // This isn't even a game end payload\n    return null;\n  }\n\n  const gameEndMessage = parseMessage(Command.GAME_END, buffer);\n  if (!gameEndMessage) {\n    return null;\n  }\n\n  return gameEndMessage as GameEndType;\n}\n\nexport function extractFinalPostFrameUpdates(slpFile: SlpFileType): PostFrameUpdateType[] {\n  const { ref, rawDataPosition, rawDataLength, messageSizes } = slpFile;\n\n  // The following should exist on all replay versions\n  const postFramePayloadSize = messageSizes[Command.POST_FRAME_UPDATE];\n  const gameEndPayloadSize = messageSizes[Command.GAME_END];\n  const frameBookendPayloadSize = messageSizes[Command.FRAME_BOOKEND];\n\n  // Technically this should not be possible\n  if (!exists(postFramePayloadSize)) {\n    return [];\n  }\n\n  const gameEndSize = gameEndPayloadSize ? gameEndPayloadSize + 1 : 0;\n  const postFrameSize = postFramePayloadSize + 1;\n  const frameBookendSize = frameBookendPayloadSize ? frameBookendPayloadSize + 1 : 0;\n\n  let frameNum: number | null = null;\n  let postFramePosition = rawDataPosition + rawDataLength - gameEndSize - frameBookendSize - postFrameSize;\n  const postFrameUpdates: PostFrameUpdateType[] = [];\n  do {\n    const buffer = new Uint8Array(postFrameSize);\n    readRef(ref, buffer, 0, buffer.length, postFramePosition);\n    if (buffer[0] !== Command.POST_FRAME_UPDATE) {\n      break;\n    }\n\n    const postFrameMessage = parseMessage(Command.POST_FRAME_UPDATE, buffer) as PostFrameUpdateType | null;\n    if (!postFrameMessage) {\n      break;\n    }\n\n    if (frameNum === null) {\n      frameNum = postFrameMessage.frame;\n    } else if (frameNum !== postFrameMessage.frame) {\n      // If post frame message is found but the frame doesn't match, it's not part of the final frame\n      break;\n    }\n\n    postFrameUpdates.unshift(postFrameMessage);\n    postFramePosition -= postFrameSize;\n  } while (postFramePosition >= rawDataPosition);\n\n  return postFrameUpdates;\n}\n","import type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport { NETWORK_MESSAGE } from \"../console\";\nimport type { EventPayloadTypes } from \"../types\";\nimport { Command } from \"../types\";\nimport { parseMessage } from \"./slpReader\";\n\nexport enum SlpStreamMode {\n  AUTO = \"AUTO\", // Always reading data, but errors on invalid command\n  MANUAL = \"MANUAL\", // Stops parsing inputs after a valid game end command, requires manual restarting\n}\n\nconst defaultSettings = {\n  suppressErrors: false,\n  mode: SlpStreamMode.AUTO,\n};\n\nexport type SlpStreamSettings = typeof defaultSettings;\n\nexport type MessageSizes = Map<Command, number>;\n\nexport type SlpCommandEventPayload = {\n  command: Command;\n  payload: EventPayloadTypes | MessageSizes;\n};\n\nexport type SlpRawEventPayload = {\n  command: Command;\n  payload: Buffer;\n};\n\nexport enum SlpStreamEvent {\n  RAW = \"slp-raw\",\n  COMMAND = \"slp-command\",\n}\n\n/**\n * SlpStream is a writable stream of Slippi data. It passes the data being written in\n * and emits an event based on what kind of Slippi messages were processed.\n *\n * SlpStream emits two events: \"slp-raw\" and \"slp-command\". The \"slp-raw\" event emits the raw buffer\n * bytes whenever it processes each command. You can manually parse this or write it to a\n * file. The \"slp-command\" event returns the parsed payload which you can access the attributes.\n *\n * @class SlpStream\n * @extends {Writable}\n */\nexport class SlpStream extends Writable {\n  private gameEnded = false; // True only if in manual mode and the game has completed\n  private settings: SlpStreamSettings;\n  private payloadSizes: MessageSizes | null = null;\n  private previousBuffer: Uint8Array = Buffer.from([]);\n\n  /**\n   *Creates an instance of SlpStream.\n   * @param {Partial<SlpStreamSettings>} [slpOptions]\n   * @param {WritableOptions} [opts]\n   * @memberof SlpStream\n   */\n  public constructor(slpOptions?: Partial<SlpStreamSettings>, opts?: WritableOptions) {\n    super(opts);\n    this.settings = Object.assign({}, defaultSettings, slpOptions);\n  }\n\n  public restart(): void {\n    this.gameEnded = false;\n    this.payloadSizes = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public _write(newData: Buffer, encoding: string, callback: (error?: Error | null, data?: any) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n\n    // Join the current data with the old data\n    const data = Uint8Array.from(Buffer.concat([this.previousBuffer, newData]));\n\n    // Clear previous data\n    this.previousBuffer = Buffer.from([]);\n\n    const dataView = new DataView(data.buffer);\n\n    // Iterate through the data\n    let index = 0;\n    while (index < data.length) {\n      // We want to filter out the network messages\n      if (Buffer.from(data.slice(index, index + 5)).toString() === NETWORK_MESSAGE) {\n        index += 5;\n        continue;\n      }\n\n      // Make sure we have enough data to read a full payload\n      const command = dataView.getUint8(index);\n      let payloadSize = 0;\n      if (this.payloadSizes) {\n        payloadSize = this.payloadSizes.get(command) ?? 0;\n      }\n      const remainingLen = data.length - index;\n      if (remainingLen < payloadSize + 1) {\n        // If remaining length is not long enough for full payload, save the remaining\n        // data until we receive more data. The data has been split up.\n        this.previousBuffer = data.slice(index);\n        break;\n      }\n\n      // Only process if the game is still going\n      if (this.settings.mode === SlpStreamMode.MANUAL && this.gameEnded) {\n        break;\n      }\n\n      // Increment by one for the command byte\n      index += 1;\n\n      const payloadPtr = data.slice(index);\n      const payloadDataView = new DataView(data.buffer, index);\n      let payloadLen = 0;\n      try {\n        payloadLen = this._processCommand(command, payloadPtr, payloadDataView);\n      } catch (err) {\n        // Only throw the error if we're not suppressing the errors\n        if (!this.settings.suppressErrors) {\n          throw err;\n        }\n        payloadLen = 0;\n      }\n      index += payloadLen;\n    }\n\n    callback();\n  }\n\n  private _writeCommand(command: Command, entirePayload: Uint8Array, payloadSize: number): Uint8Array {\n    const payloadBuf = entirePayload.slice(0, payloadSize);\n    const bufToWrite = Buffer.concat([Buffer.from([command]), payloadBuf]);\n    // Forward the raw buffer onwards\n    const event: SlpRawEventPayload = {\n      command: command,\n      payload: bufToWrite,\n    };\n    this.emit(SlpStreamEvent.RAW, event);\n    return new Uint8Array(bufToWrite);\n  }\n\n  private _processCommand(command: Command, entirePayload: Uint8Array, dataView: DataView): number {\n    // Handle the message size command\n    if (command === Command.MESSAGE_SIZES) {\n      const payloadSize = dataView.getUint8(0);\n      // Set the payload sizes\n      this.payloadSizes = processReceiveCommands(dataView);\n      // Emit the raw command event\n      this._writeCommand(command, entirePayload, payloadSize);\n      const eventPayload: SlpCommandEventPayload = {\n        command: command,\n        payload: this.payloadSizes,\n      };\n      this.emit(SlpStreamEvent.COMMAND, eventPayload);\n      return payloadSize;\n    }\n\n    let payloadSize = 0;\n    if (this.payloadSizes) {\n      payloadSize = this.payloadSizes.get(command) ?? 0;\n    }\n\n    // Fetch the payload and parse it\n    let payload: Uint8Array;\n    let parsedPayload: EventPayloadTypes | null = null;\n    if (payloadSize > 0) {\n      payload = this._writeCommand(command, entirePayload, payloadSize);\n      parsedPayload = parseMessage(command, payload);\n    }\n    if (!parsedPayload) {\n      return payloadSize;\n    }\n\n    switch (command) {\n      case Command.GAME_END:\n        // Stop parsing data until we manually restart the stream\n        if (this.settings.mode === SlpStreamMode.MANUAL) {\n          this.gameEnded = true;\n        }\n        break;\n    }\n\n    const eventPayload: SlpCommandEventPayload = {\n      command: command,\n      payload: parsedPayload,\n    };\n    this.emit(SlpStreamEvent.COMMAND, eventPayload);\n    return payloadSize;\n  }\n}\n\nconst processReceiveCommands = (dataView: DataView): MessageSizes => {\n  const payloadSizes = new Map<Command, number>();\n  const payloadLen = dataView.getUint8(0);\n  for (let i = 1; i < payloadLen; i += 3) {\n    const commandByte = dataView.getUint8(i);\n    const payloadSize = dataView.getUint16(i + 1);\n    payloadSizes.set(commandByte, payloadSize);\n  }\n  return payloadSizes;\n};\n","import type { WriteStream } from \"fs\";\nimport forEach from \"lodash/forEach\";\nimport type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport type { GameStartType, PostFrameUpdateType } from \"../types\";\nimport { Command } from \"../types\";\nimport type { SlpCommandEventPayload } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent, SlpStreamMode } from \"./slpStream\";\n\nconst DEFAULT_NICKNAME = \"unknown\";\n\nexport type SlpFileMetadata = {\n  startTime: Date;\n  lastFrame: number;\n  players: {\n    [playerIndex: number]: {\n      characterUsage: {\n        [internalCharacterId: number]: number;\n      };\n      names: {\n        netplay: string;\n        code: string;\n      };\n    };\n  };\n  consoleNickname?: string;\n};\n\n/**\n * SlpFile is a class that wraps a Writable stream. It handles the writing of the binary\n * header and footer, and also handles the overwriting of the raw data length.\n *\n * @class SlpFile\n * @extends {Writable}\n */\nexport class SlpFile extends Writable {\n  private filePath: string;\n  private metadata: SlpFileMetadata;\n  private fileStream: WriteStream | null = null;\n  private rawDataLength = 0;\n  private slpStream: SlpStream;\n  private usesExternalStream = false;\n\n  /**\n   * Creates an instance of SlpFile.\n   * @param {string} filePath The file location to write to.\n   * @param {WritableOptions} [opts] Options for writing.\n   * @memberof SlpFile\n   */\n  public constructor(filePath: string, slpStream?: SlpStream, opts?: WritableOptions) {\n    super(opts);\n    this.filePath = filePath;\n    this.metadata = {\n      consoleNickname: DEFAULT_NICKNAME,\n      startTime: new Date(),\n      lastFrame: -124,\n      players: {},\n    };\n    this.usesExternalStream = Boolean(slpStream);\n\n    // Create a new SlpStream if one wasn't already provided\n    // This SLP stream represents a single game not multiple, so use manual mode\n    this.slpStream = slpStream ? slpStream : new SlpStream({ mode: SlpStreamMode.MANUAL });\n\n    this._setupListeners();\n    this._initializeNewGame(this.filePath);\n  }\n\n  /**\n   * Get the current file path being written to.\n   *\n   * @returns {string} The location of the current file path\n   * @memberof SlpFile\n   */\n  public path(): string {\n    return this.filePath;\n  }\n\n  /**\n   * Sets the metadata of the Slippi file, such as consoleNickname, lastFrame, and players.\n   * @param metadata The metadata to be written\n   */\n  public setMetadata(metadata: Partial<SlpFileMetadata>): void {\n    this.metadata = Object.assign({}, this.metadata, metadata);\n  }\n\n  public _write(chunk: Uint8Array, encoding: string, callback: (error?: Error | null) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n    // Write it to the file\n    if (this.fileStream) {\n      this.fileStream.write(chunk);\n    }\n\n    // Parse the data manually if it's an internal stream\n    if (!this.usesExternalStream) {\n      this.slpStream.write(chunk);\n    }\n\n    // Keep track of the bytes we've written\n    this.rawDataLength += chunk.length;\n    callback();\n  }\n\n  /**\n   * Here we define what to do on each command. We need to populate the metadata field\n   * so we keep track of the latest frame, as well as the number of frames each character has\n   * been used.\n   *\n   * @param data The parsed data from a SlpStream\n   */\n  private _onCommand(data: SlpCommandEventPayload): void {\n    const { command, payload } = data;\n    switch (command) {\n      case Command.GAME_START:\n        const { players } = payload as GameStartType;\n        forEach(players, (player) => {\n          if (player.type === 3) {\n            return;\n          }\n\n          this.metadata.players[player.playerIndex] = {\n            characterUsage: {},\n            names: {\n              netplay: player.displayName,\n              code: player.connectCode,\n            },\n          };\n        });\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // Here we need to update some metadata fields\n        const { frame, playerIndex, isFollower, internalCharacterId } = payload as PostFrameUpdateType;\n        if (isFollower) {\n          // No need to do this for follower\n          break;\n        }\n\n        // Update frame index\n        this.metadata.lastFrame = frame!;\n\n        // Update character usage\n        const prevPlayer = this.metadata.players[playerIndex!];\n        const characterUsage = prevPlayer!.characterUsage;\n        const curCharFrames = characterUsage[internalCharacterId!] || 0;\n        const player = {\n          ...prevPlayer,\n          characterUsage: {\n            ...characterUsage,\n            [internalCharacterId!]: curCharFrames + 1,\n          },\n        };\n        (this.metadata.players as any)[playerIndex!] = player;\n        break;\n    }\n  }\n\n  private _setupListeners(): void {\n    const streamListener = (data: SlpCommandEventPayload): void => {\n      this._onCommand(data);\n    };\n    this.slpStream.on(SlpStreamEvent.COMMAND, streamListener);\n\n    this.on(\"finish\", () => {\n      // Update file with bytes written\n      console.error(\"removed stuff here for cloudflare worker support\");\n\n      // Unsubscribe from the stream\n      this.slpStream.removeListener(SlpStreamEvent.COMMAND, streamListener);\n      // Terminate the internal stream\n      if (!this.usesExternalStream) {\n        this.slpStream.end();\n      }\n    });\n  }\n\n  private _initializeNewGame(filePath: string): void {\n    console.error(\"removed stuff here for cloudflare worker support\");\n  }\n\n  public _final(callback: (error?: Error | null) => void): void {\n    let footer = Buffer.concat([Buffer.from(\"U\"), Buffer.from([8]), Buffer.from(\"metadata{\")]);\n\n    // Write game start time\n    const startTimeStr = this.metadata.startTime.toISOString();\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([7]),\n      Buffer.from(\"startAtSU\"),\n      Buffer.from([startTimeStr.length]),\n      Buffer.from(startTimeStr),\n    ]);\n\n    // Write last frame index\n    // TODO: Get last frame\n    const lastFrame = this.metadata.lastFrame;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([9]),\n      Buffer.from(\"lastFramel\"),\n      createInt32Buffer(lastFrame),\n    ]);\n\n    // write the Console Nickname\n    const consoleNick = this.metadata.consoleNickname || DEFAULT_NICKNAME;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([11]),\n      Buffer.from(\"consoleNickSU\"),\n      Buffer.from([consoleNick.length]),\n      Buffer.from(consoleNick),\n    ]);\n\n    // Start writting player specific data\n    footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([7]), Buffer.from(\"players{\")]);\n    const players = this.metadata.players;\n    forEach(players, (player, index) => {\n      // Start player obj with index being the player index\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([index.length]), Buffer.from(`${index}{`)]);\n\n      // Start characters key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([10]), Buffer.from(\"characters{\")]);\n\n      // Write character usage\n      forEach(player.characterUsage, (usage, internalId) => {\n        // Write this character\n        footer = Buffer.concat([\n          footer,\n          Buffer.from(\"U\"),\n          Buffer.from([internalId.length]),\n          Buffer.from(`${internalId}l`),\n          createUInt32Buffer(usage),\n        ]);\n      });\n\n      // Close characters\n      footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n      // Start names key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([5]), Buffer.from(\"names{\")]);\n\n      // Write display name\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([7]),\n        Buffer.from(\"netplaySU\"),\n        Buffer.from([player.names.netplay.length]),\n        Buffer.from(`${player.names.netplay}`),\n      ]);\n\n      // Write connect code\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([4]),\n        Buffer.from(\"codeSU\"),\n        Buffer.from([player.names.code.length]),\n        Buffer.from(`${player.names.code}`),\n      ]);\n\n      // Close names and player\n      footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n    });\n\n    // Close players\n    footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n    // Write played on\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([8]),\n      Buffer.from(\"playedOnSU\"),\n      Buffer.from([7]),\n      Buffer.from(\"network\"),\n    ]);\n\n    // Close metadata and file\n    footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n\n    // End the stream\n    if (this.fileStream) {\n      this.fileStream.write(footer, callback);\n    }\n  }\n}\n\nconst createInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeInt32BE(number, 0);\n  return buf;\n};\n\nconst createUInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeUInt32BE(number, 0);\n  return buf;\n};\n","import { format } from \"date-fns\";\nimport path from \"path\";\nimport type { WritableOptions } from \"stream\";\n\nimport { Command } from \"../types\";\nimport { SlpFile } from \"./slpFile\";\nimport type { SlpRawEventPayload, SlpStreamSettings } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent } from \"./slpStream\";\n\n/**\n * The default function to use for generating new SLP files.\n */\nfunction getNewFilePath(folder: string, date: Date): string {\n  return path.join(folder, `Game_${format(date, \"yyyyMMdd\")}T${format(date, \"HHmmss\")}.slp`);\n}\n\nexport type SlpFileWriterOptions = Partial<SlpStreamSettings> & {\n  outputFiles: boolean;\n  folderPath: string;\n  consoleNickname: string;\n  newFilename: (folder: string, startTime: Date) => string;\n};\n\nconst defaultSettings: SlpFileWriterOptions = {\n  outputFiles: true,\n  folderPath: \".\",\n  consoleNickname: \"unknown\",\n  newFilename: getNewFilePath,\n};\n\nexport enum SlpFileWriterEvent {\n  NEW_FILE = \"new-file\",\n  FILE_COMPLETE = \"file-complete\",\n}\n\n/**\n * SlpFileWriter lets us not only emit events as an SlpStream but also\n * writes the data that is being passed in to an SLP file. Use this if\n * you want to process Slippi data in real time but also want to be able\n * to write out the data to an SLP file.\n *\n * @export\n * @class SlpFileWriter\n * @extends {SlpStream}\n */\nexport class SlpFileWriter extends SlpStream {\n  private currentFile: SlpFile | null = null;\n  private options: SlpFileWriterOptions;\n\n  /**\n   * Creates an instance of SlpFileWriter.\n   */\n  public constructor(options?: Partial<SlpFileWriterOptions>, opts?: WritableOptions) {\n    super(options, opts);\n    this.options = Object.assign({}, defaultSettings, options);\n    this._setupListeners();\n  }\n\n  private _writePayload(payload: Buffer): void {\n    // Write data to the current file\n    if (this.currentFile) {\n      this.currentFile.write(payload);\n    }\n  }\n\n  private _setupListeners(): void {\n    this.on(SlpStreamEvent.RAW, (data: SlpRawEventPayload) => {\n      const { command, payload } = data;\n      switch (command) {\n        case Command.MESSAGE_SIZES:\n          // Create the new game first before writing the payload\n          this._handleNewGame();\n          this._writePayload(payload);\n          break;\n        case Command.GAME_END:\n          // Write payload first before ending the game\n          this._writePayload(payload);\n          this._handleEndGame();\n          break;\n        default:\n          this._writePayload(payload);\n          break;\n      }\n    });\n  }\n\n  /**\n   * Return the name of the SLP file currently being written or null if\n   * no file is being written to currently.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public getCurrentFilename(): string | null {\n    if (this.currentFile !== null) {\n      return path.resolve(this.currentFile.path());\n    }\n    return null;\n  }\n\n  /**\n   * Ends the current file being written to.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public endCurrentFile(): void {\n    this._handleEndGame();\n  }\n\n  /**\n   * Updates the settings to be the desired ones passed in.\n   *\n   * @param {Partial<SlpFileWriterOptions>} settings\n   * @memberof SlpFileWriter\n   */\n  public updateSettings(settings: Partial<SlpFileWriterOptions>): void {\n    this.options = Object.assign({}, this.options, settings);\n  }\n\n  private _handleNewGame(): void {\n    // Only create a new file if we're outputting files\n    if (this.options.outputFiles) {\n      const filePath = this.options.newFilename(this.options.folderPath, new Date());\n      this.currentFile = new SlpFile(filePath, this);\n      // console.log(`Creating new file at: ${filePath}`);\n      this.emit(SlpFileWriterEvent.NEW_FILE, filePath);\n    }\n  }\n\n  private _handleEndGame(): void {\n    // End the stream\n    if (this.currentFile) {\n      // Set the console nickname\n      this.currentFile.setMetadata({\n        consoleNickname: this.options.consoleNickname,\n      });\n      this.currentFile.end();\n\n      // console.log(`Finished writing file: ${this.currentFile.path()}`);\n      this.emit(SlpFileWriterEvent.FILE_COMPLETE, this.currentFile.path());\n\n      // Clear current file\n      this.currentFile = null;\n    }\n  }\n}\n","import type { FrameEntryType, RollbackFramesType } from \"../types\";\n\nexport class RollbackCounter {\n  private rollbackFrames: RollbackFramesType = {};\n  private rollbackFrameCount = 0;\n  private rollbackPlayerIdx: number | null = null; // for keeping track of rollbacks by following a single player\n  private lastFrameWasRollback = false;\n  private currentRollbackLength = 0;\n  private rollbackLengths: number[] = [];\n\n  public checkIfRollbackFrame(currentFrame: FrameEntryType | undefined, playerIdx: number) {\n    if (this.rollbackPlayerIdx === null) {\n      // we only want to follow a single player to avoid double counting. So we use whoever is on first.\n      this.rollbackPlayerIdx = playerIdx;\n    } else if (this.rollbackPlayerIdx !== playerIdx) {\n      return;\n    }\n\n    if (currentFrame && currentFrame.players) {\n      // frame already exists for currentFrameNumber so we must be rolling back\n      // Note: We detect during PreFrameUpdate, but new versions have a\n      // FrameStart command that has already initialized the frame, so we must\n      // check for player data too.\n      if (this.rollbackFrames[currentFrame.frame]) {\n        this.rollbackFrames[currentFrame.frame]!.push(currentFrame);\n      } else {\n        this.rollbackFrames[currentFrame.frame] = [currentFrame];\n      }\n      this.rollbackFrameCount++;\n      this.currentRollbackLength++;\n      this.lastFrameWasRollback = true;\n    } else if (this.lastFrameWasRollback) {\n      this.rollbackLengths.push(this.currentRollbackLength);\n      this.currentRollbackLength = 0;\n      this.lastFrameWasRollback = false;\n    }\n    return this.lastFrameWasRollback;\n  }\n\n  public getFrames() {\n    return this.rollbackFrames;\n  }\n\n  public getCount() {\n    return this.rollbackFrameCount;\n  }\n\n  public getLengths() {\n    return this.rollbackLengths;\n  }\n}\n","import { EventEmitter } from \"events\";\nimport get from \"lodash/get\";\nimport keyBy from \"lodash/keyBy\";\nimport set from \"lodash/set\";\nimport semver from \"semver\";\n\nimport type {\n  EnabledItemType,\n  FrameBookendType,\n  FrameEntryType,\n  FrameStartType,\n  FramesType,\n  GameEndType,\n  GameStartType,\n  GeckoListType,\n  ItemUpdateType,\n  PostFrameUpdateType,\n  PreFrameUpdateType,\n  RollbackFrames,\n} from \"../types\";\nimport { ItemSpawnType } from \"../types\";\nimport { Command, Frames, GameMode } from \"../types\";\nimport { exists } from \"./exists\";\nimport { RollbackCounter } from \"./rollbackCounter\";\n\n// There are 5 bytes of item bitfields that can be enabled\nconst ITEM_SETTINGS_BIT_COUNT = 40;\nexport const MAX_ROLLBACK_FRAMES = 7;\n\nexport enum SlpParserEvent {\n  SETTINGS = \"settings\",\n  END = \"end\",\n  FRAME = \"frame\", // Emitted for every frame\n  FINALIZED_FRAME = \"finalized-frame\", // Emitted for only finalized frames\n  ROLLBACK_FRAME = \"rollback-frame\", // Emitted if a frame is being replaced\n}\n\n// If strict mode is on, we will do strict validation checking\n// which could throw errors on invalid data.\n// Default to false though since probably only real time applications\n// would care about valid data.\nconst defaultSlpParserOptions = {\n  strict: false,\n};\n\nexport type SlpParserOptions = typeof defaultSlpParserOptions;\n\nexport class SlpParser extends EventEmitter {\n  private frames: FramesType = {};\n  private rollbackCounter: RollbackCounter = new RollbackCounter();\n  private settings: GameStartType | null = null;\n  private gameEnd: GameEndType | null = null;\n  private latestFrameIndex: number | null = null;\n  private settingsComplete = false;\n  private lastFinalizedFrame = Frames.FIRST - 1;\n  private options: SlpParserOptions;\n  private geckoList: GeckoListType | null = null;\n\n  public constructor(options?: Partial<SlpParserOptions>) {\n    super();\n    this.options = Object.assign({}, defaultSlpParserOptions, options);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public handleCommand(command: Command, payload: any): void {\n    switch (command) {\n      case Command.GAME_START:\n        this._handleGameStart(payload as GameStartType);\n        break;\n      case Command.FRAME_START:\n        this._handleFrameStart(payload as FrameStartType);\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // We need to handle the post frame update first since that\n        // will finalize the settings object, before we fire the frame update\n        this._handlePostFrameUpdate(payload as PostFrameUpdateType);\n        this._handleFrameUpdate(command, payload as PostFrameUpdateType);\n        break;\n      case Command.PRE_FRAME_UPDATE:\n        this._handleFrameUpdate(command, payload as PreFrameUpdateType);\n        break;\n      case Command.ITEM_UPDATE:\n        this._handleItemUpdate(payload as ItemUpdateType);\n        break;\n      case Command.FRAME_BOOKEND:\n        this._handleFrameBookend(payload as FrameBookendType);\n        break;\n      case Command.GAME_END:\n        this._handleGameEnd(payload as GameEndType);\n        break;\n      case Command.GECKO_LIST:\n        this._handleGeckoList(payload as GeckoListType);\n        break;\n    }\n  }\n\n  /**\n   * Resets the parser state to their default values.\n   */\n  public reset(): void {\n    this.frames = {};\n    this.settings = null;\n    this.gameEnd = null;\n    this.latestFrameIndex = null;\n    this.settingsComplete = false;\n    this.lastFinalizedFrame = Frames.FIRST - 1;\n  }\n\n  public getLatestFrameNumber(): number {\n    return this.latestFrameIndex ?? Frames.FIRST - 1;\n  }\n\n  public getPlayableFrameCount(): number {\n    if (this.latestFrameIndex === null) {\n      return 0;\n    }\n    return this.latestFrameIndex < Frames.FIRST_PLAYABLE ? 0 : this.latestFrameIndex - Frames.FIRST_PLAYABLE;\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    // return this.playerFrames[this.latestFrameIndex];\n\n    // TODO: Modify this to check if we actually have all the latest frame data and return that\n    // TODO: If we do. For now I'm just going to take a shortcut\n    const allFrames = this.getFrames();\n    const frameIndex = this.latestFrameIndex !== null ? this.latestFrameIndex : Frames.FIRST;\n    const indexToUse = this.gameEnd ? frameIndex : frameIndex - 1;\n    return get(allFrames, indexToUse) || null;\n  }\n\n  public getSettings(): GameStartType | null {\n    return this.settingsComplete ? this.settings : null;\n  }\n\n  public getItems(): EnabledItemType[] | null {\n    if (this.settings?.itemSpawnBehavior === ItemSpawnType.OFF) {\n      return null;\n    }\n\n    const itemBitfield = this.settings?.enabledItems;\n    if (!exists(itemBitfield)) {\n      return null;\n    }\n\n    const enabledItems: EnabledItemType[] = [];\n\n    // Ideally we would be able to do this with bitshifting instead, but javascript\n    // truncates numbers after 32 bits when doing bitwise operations\n    for (let i = 0; i < ITEM_SETTINGS_BIT_COUNT; i++) {\n      if (Math.floor(itemBitfield / 2 ** i) & 1) {\n        enabledItems.push(2 ** i);\n      }\n    }\n\n    return enabledItems;\n  }\n\n  public getGameEnd(): GameEndType | null {\n    return this.gameEnd;\n  }\n\n  public getFrames(): FramesType {\n    return this.frames;\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    return {\n      frames: this.rollbackCounter.getFrames(),\n      count: this.rollbackCounter.getCount(),\n      lengths: this.rollbackCounter.getLengths(),\n    };\n  }\n\n  public getFrame(num: number): FrameEntryType | null {\n    return this.frames[num] || null;\n  }\n\n  public getGeckoList(): GeckoListType | null {\n    return this.geckoList;\n  }\n\n  private _handleGeckoList(payload: GeckoListType): void {\n    this.geckoList = payload;\n  }\n\n  private _handleGameEnd(payload: GameEndType): void {\n    // Finalize remaining frames if necessary\n    if (this.latestFrameIndex !== null && this.latestFrameIndex !== this.lastFinalizedFrame) {\n      this._finalizeFrames(this.latestFrameIndex);\n    }\n\n    this.gameEnd = payload;\n    this.emit(SlpParserEvent.END, this.gameEnd);\n  }\n\n  private _handleGameStart(payload: GameStartType): void {\n    this.settings = payload;\n    const players = payload.players;\n    this.settings.players = players.filter((player) => player.type !== 3);\n\n    // Check to see if the file was created after the sheik fix so we know\n    // we don't have to process the first frame of the game for the full settings\n    if (payload.slpVersion && semver.gte(payload.slpVersion, \"1.6.0\")) {\n      this._completeSettings();\n    }\n  }\n\n  private _handleFrameStart(payload: FrameStartType): void {\n    const currentFrameNumber = payload.frame!;\n\n    set(this.frames, [currentFrameNumber, \"start\"], payload);\n  }\n\n  private _handlePostFrameUpdate(payload: PostFrameUpdateType): void {\n    if (this.settingsComplete) {\n      return;\n    }\n\n    // Finish calculating settings\n    if (payload.frame! <= Frames.FIRST) {\n      const playerIndex = payload.playerIndex!;\n      const playersByIndex = keyBy(this.settings!.players, \"playerIndex\");\n\n      switch (payload.internalCharacterId) {\n        case 0x7:\n          playersByIndex[playerIndex]!.characterId = 0x13; // Sheik\n          break;\n        case 0x13:\n          playersByIndex[playerIndex]!.characterId = 0x12; // Zelda\n          break;\n      }\n    }\n    if (payload.frame! > Frames.FIRST) {\n      this._completeSettings();\n    }\n  }\n\n  private _handleFrameUpdate(command: Command, payload: PreFrameUpdateType | PostFrameUpdateType): void {\n    const location = command === Command.PRE_FRAME_UPDATE ? \"pre\" : \"post\";\n    const field = payload.isFollower ? \"followers\" : \"players\";\n    const currentFrameNumber = payload.frame!;\n    this.latestFrameIndex = currentFrameNumber;\n    if (location === \"pre\" && !payload.isFollower) {\n      const currentFrame = this.frames[currentFrameNumber];\n      const wasRolledback = this.rollbackCounter.checkIfRollbackFrame(currentFrame, payload.playerIndex!);\n      if (wasRolledback) {\n        // frame is about to be overwritten\n        this.emit(SlpParserEvent.ROLLBACK_FRAME, currentFrame);\n      }\n    }\n    set(this.frames, [currentFrameNumber, field, payload.playerIndex!, location], payload);\n    set(this.frames, [currentFrameNumber, \"frame\"], currentFrameNumber);\n\n    // If file is from before frame bookending, add frame to stats computer here. Does a little\n    // more processing than necessary, but it works\n    const settings = this.getSettings();\n    if (settings && (!settings.slpVersion || semver.lte(settings.slpVersion, \"2.2.0\"))) {\n      this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n      // Finalize the previous frame since no bookending exists\n      this._finalizeFrames(currentFrameNumber - 1);\n    } else {\n      set(this.frames, [currentFrameNumber, \"isTransferComplete\"], false);\n    }\n  }\n\n  private _handleItemUpdate(payload: ItemUpdateType): void {\n    const currentFrameNumber = payload.frame!;\n    const items = this.frames[currentFrameNumber]?.items ?? [];\n    items.push(payload);\n\n    // Set items with newest\n    set(this.frames, [currentFrameNumber, \"items\"], items);\n  }\n\n  private _handleFrameBookend(payload: FrameBookendType): void {\n    const latestFinalizedFrame = payload.latestFinalizedFrame!;\n    const currentFrameNumber = payload.frame!;\n    set(this.frames, [currentFrameNumber, \"isTransferComplete\"], true);\n    // Fire off a normal frame event\n    this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n\n    // Finalize frames if necessary\n    const validLatestFrame = this.settings!.gameMode === GameMode.ONLINE;\n    if (validLatestFrame && latestFinalizedFrame >= Frames.FIRST) {\n      // Ensure valid latestFinalizedFrame\n      if (this.options.strict && latestFinalizedFrame < currentFrameNumber - MAX_ROLLBACK_FRAMES) {\n        throw new Error(`latestFinalizedFrame should be within ${MAX_ROLLBACK_FRAMES} frames of ${currentFrameNumber}`);\n      }\n      this._finalizeFrames(latestFinalizedFrame);\n    } else {\n      // Since we don't have a valid finalized frame, just finalize the frame based on MAX_ROLLBACK_FRAMES\n      this._finalizeFrames(currentFrameNumber - MAX_ROLLBACK_FRAMES);\n    }\n  }\n\n  /**\n   * Fires off the FINALIZED_FRAME event for frames up until a certain number\n   * @param num The frame to finalize until\n   */\n  private _finalizeFrames(num: number): void {\n    while (this.lastFinalizedFrame < num) {\n      const frameToFinalize = this.lastFinalizedFrame + 1;\n      const frame = this.getFrame(frameToFinalize)!;\n\n      // Check that we have all the pre and post frame data for all players if we're in strict mode\n      if (this.options.strict) {\n        for (const player of this.settings!.players) {\n          const playerFrameInfo = frame.players[player.playerIndex];\n          // Allow player frame info to be empty in non 1v1 games since\n          // players which have been defeated will have no frame info.\n          if (this.settings!.players.length > 2 && !playerFrameInfo) {\n            continue;\n          }\n\n          const { pre, post } = playerFrameInfo!;\n          if (!pre || !post) {\n            const preOrPost = pre ? \"pre\" : \"post\";\n            throw new Error(\n              `Could not finalize frame ${frameToFinalize} of ${num}: missing ${preOrPost}-frame update for player ${player.playerIndex}`,\n            );\n          }\n        }\n      }\n\n      // Our frame is complete so finalize the frame\n      this.emit(SlpParserEvent.FINALIZED_FRAME, frame);\n      this.lastFinalizedFrame = frameToFinalize;\n    }\n  }\n\n  private _completeSettings(): void {\n    if (!this.settingsComplete) {\n      this.settingsComplete = true;\n      this.emit(SlpParserEvent.SETTINGS, this.settings);\n    }\n  }\n}\n","import type { GameEndType, GameStartType, PlacementType, PostFrameUpdateType } from \"../types\";\nimport { GameEndMethod } from \"../types\";\nimport { exists } from \"./exists\";\n\nexport function getWinners(\n  gameEnd: GameEndType,\n  settings: Pick<GameStartType, \"players\" | \"isTeams\">,\n  finalPostFrameUpdates: PostFrameUpdateType[],\n): PlacementType[] {\n  const { placements, gameEndMethod, lrasInitiatorIndex } = gameEnd;\n  const { players, isTeams } = settings;\n\n  if (gameEndMethod === GameEndMethod.NO_CONTEST || gameEndMethod === GameEndMethod.UNRESOLVED) {\n    // The winner is the person who didn't LRAS\n    if (exists(lrasInitiatorIndex) && players.length === 2) {\n      const winnerIndex = players.find(({ playerIndex }) => playerIndex !== lrasInitiatorIndex)?.playerIndex;\n      if (exists(winnerIndex)) {\n        return [\n          {\n            playerIndex: winnerIndex,\n            position: 0,\n          },\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  if (gameEndMethod === GameEndMethod.TIME && players.length === 2) {\n    const nonFollowerUpdates = finalPostFrameUpdates.filter((pfu) => !pfu.isFollower);\n    if (nonFollowerUpdates.length !== players.length) {\n      return [];\n    }\n\n    const p1 = nonFollowerUpdates[0]!;\n    const p2 = nonFollowerUpdates[1]!;\n    if (p1.stocksRemaining! > p2.stocksRemaining!) {\n      return [{ playerIndex: p1.playerIndex!, position: 0 }];\n    } else if (p2.stocksRemaining! > p1.stocksRemaining!) {\n      return [{ playerIndex: p2.playerIndex!, position: 0 }];\n    }\n\n    const p1Health = Math.trunc(p1.percent!);\n    const p2Health = Math.trunc(p2.percent!);\n    if (p1Health < p2Health) {\n      return [{ playerIndex: p1.playerIndex!, position: 0 }];\n    } else if (p2Health < p1Health) {\n      return [{ playerIndex: p2.playerIndex!, position: 0 }];\n    }\n\n    // If stocks and percents were tied, no winner\n    return [];\n  }\n\n  const firstPosition = placements.find((placement) => placement.position === 0);\n  if (!firstPosition) {\n    return [];\n  }\n\n  const winningTeam = players.find(({ playerIndex }) => playerIndex === firstPosition.playerIndex)?.teamId ?? null;\n  if (isTeams && exists(winningTeam)) {\n    return placements.filter((placement) => {\n      const teamId = players.find(({ playerIndex }) => playerIndex === placement.playerIndex)?.teamId ?? null;\n      return teamId === winningTeam;\n    });\n  }\n\n  return [firstPosition];\n}\n","import type { FrameEntryType, GameStartType } from \"../types\";\nimport { Language } from \"../types\";\nimport { exists } from \"./exists\";\n\nconst SANDBAG_INTERNAL_ID = 32;\n\nconst FEET_CONVERSION_FACTOR = 0.952462;\nconst METERS_CONVERSION_FACTOR = 1.04167;\n\ntype HomeRunDistanceUnits = \"feet\" | \"meters\";\n\nexport function positionToHomeRunDistance(distance: number, units: HomeRunDistanceUnits = \"feet\"): number {\n  let score = 0;\n  switch (units) {\n    case \"feet\":\n      score = 10 * Math.floor(distance - 70 * FEET_CONVERSION_FACTOR);\n      // convert to float32\n      score = Math.fround(score);\n      score = Math.floor((score / 30.4788) * 10) / 10;\n      break;\n    case \"meters\":\n      score = 10 * Math.floor(distance - 70 * METERS_CONVERSION_FACTOR);\n      // convert to float32\n      score = Math.fround(score);\n      score = Math.floor((score / 100) * 10) / 10;\n      break;\n    default:\n      throw new Error(`Unsupported units: ${units}`);\n  }\n\n  // round to 1 decimal\n  score = Math.round(score * 10) / 10;\n  return Math.max(0, score);\n}\n\nexport function extractDistanceInfoFromFrame(\n  settings: Pick<GameStartType, \"language\">,\n  lastFrame: Pick<FrameEntryType, \"players\">,\n): { distance: number; units: HomeRunDistanceUnits } | null {\n  const sandbagLastFrame = Object.values(lastFrame.players)\n    .filter(exists)\n    .find((playerFrame) => playerFrame.post.internalCharacterId === SANDBAG_INTERNAL_ID);\n\n  if (!sandbagLastFrame) {\n    return null;\n  }\n\n  // Only return the distance in meters if it's a Japanese replay.\n  // Technically we should check if the replay is PAL but we don't yet support\n  // stadium replays in PAL.\n  const units: HomeRunDistanceUnits = settings.language === Language.JAPANESE ? \"meters\" : \"feet\";\n  const distance = positionToHomeRunDistance(sandbagLastFrame.post.positionX ?? 0, units);\n  return {\n    distance,\n    units,\n  };\n}\n","import type { StadiumStatsType, StatOptions, StatsType } from \"./stats\";\nimport { TargetBreakComputer } from \"./stats\";\nimport {\n  ActionsComputer,\n  ComboComputer,\n  ConversionComputer,\n  generateOverallStats,\n  InputComputer,\n  Stats,\n  StockComputer,\n} from \"./stats\";\nimport type {\n  EnabledItemType,\n  EventCallbackFunc,\n  FrameEntryType,\n  FramesType,\n  GameEndType,\n  GameStartType,\n  GeckoListType,\n  MetadataType,\n  PlacementType,\n  PostFrameUpdateType,\n  RollbackFrames,\n} from \"./types\";\nimport { GameEndMethod, GameMode } from \"./types\";\nimport { getWinners } from \"./utils/getWinners\";\nimport { extractDistanceInfoFromFrame } from \"./utils/homeRunDistance\";\nimport { SlpParser, SlpParserEvent } from \"./utils/slpParser\";\nimport type { SlpFileType, SlpReadInput } from \"./utils/slpReader\";\nimport {\n  closeSlpFile,\n  extractFinalPostFrameUpdates,\n  getGameEnd,\n  getMetadata,\n  iterateEvents,\n  openSlpFile,\n  SlpInputSource,\n} from \"./utils/slpReader\";\n\n/**\n * Slippi Game class that wraps a file\n */\nexport class SlippiGame {\n  private input: SlpReadInput;\n  private metadata: MetadataType | null = null;\n  private finalStats: StatsType | null = null;\n  private parser: SlpParser;\n  private readPosition: number | null = null;\n  private actionsComputer: ActionsComputer = new ActionsComputer();\n  private conversionComputer: ConversionComputer = new ConversionComputer();\n  private comboComputer: ComboComputer = new ComboComputer();\n  private stockComputer: StockComputer = new StockComputer();\n  private inputComputer: InputComputer = new InputComputer();\n  private targetBreakComputer: TargetBreakComputer = new TargetBreakComputer();\n  protected statsComputer: Stats;\n\n  public constructor(input: string | Buffer | ArrayBuffer, opts?: StatOptions) {\n    if (typeof input === \"string\") {\n      this.input = {\n        source: SlpInputSource.FILE,\n        filePath: input,\n      };\n    } else if (input instanceof Buffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: input,\n      };\n    } else if (input instanceof ArrayBuffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: Buffer.from(input),\n      };\n    } else {\n      throw new Error(\"Cannot create SlippiGame with input of that type\");\n    }\n\n    // Set up stats calculation\n    this.statsComputer = new Stats(opts);\n    this.statsComputer.register(\n      this.actionsComputer,\n      this.comboComputer,\n      this.conversionComputer,\n      this.inputComputer,\n      this.stockComputer,\n      this.targetBreakComputer,\n    );\n\n    this.parser = new SlpParser();\n    this.parser.on(SlpParserEvent.SETTINGS, (settings) => {\n      this.statsComputer.setup(settings);\n    });\n\n    // Use finalized frames for stats computation\n    this.parser.on(SlpParserEvent.FINALIZED_FRAME, (frame: FrameEntryType) => {\n      this.statsComputer.addFrame(frame);\n    });\n  }\n\n  private _process(shouldStop: EventCallbackFunc = () => false, file?: SlpFileType): void {\n    if (this.parser.getGameEnd() !== null) {\n      return;\n    }\n    const slpfile = file ?? openSlpFile(this.input);\n    // Generate settings from iterating through file\n    this.readPosition = iterateEvents(\n      slpfile,\n      (command, payload) => {\n        if (!payload) {\n          // If payload is falsy, keep iterating. The parser probably just doesn't know\n          // about this command yet\n          return false;\n        }\n        this.parser.handleCommand(command, payload);\n        return shouldStop(command, payload);\n      },\n      this.readPosition,\n    );\n    if (!file) {\n      closeSlpFile(slpfile);\n    }\n  }\n\n  /**\n   * Gets the game settings, these are the settings that describe the starting state of\n   * the game such as characters, stage, etc.\n   */\n  public getSettings(): GameStartType | null {\n    // Settings is only complete after post-frame update\n    this._process(() => this.parser.getSettings() !== null);\n    return this.parser.getSettings();\n  }\n\n  public getItems(): EnabledItemType[] | null {\n    this._process();\n    return this.parser.getItems();\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    this._process();\n    return this.parser.getLatestFrame();\n  }\n\n  public getGameEnd(options: { skipProcessing?: boolean } = {}): GameEndType | null {\n    if (options?.skipProcessing) {\n      // Read game end block directly\n      const slpfile = openSlpFile(this.input);\n      const gameEnd = getGameEnd(slpfile);\n      closeSlpFile(slpfile);\n      return gameEnd;\n    }\n\n    this._process();\n    return this.parser.getGameEnd();\n  }\n\n  public getFrames(): FramesType {\n    this._process();\n    return this.parser.getFrames();\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    this._process();\n    return this.parser.getRollbackFrames();\n  }\n\n  public getGeckoList(): GeckoListType | null {\n    this._process(() => this.parser.getGeckoList() !== null);\n    return this.parser.getGeckoList();\n  }\n\n  public getStats(): StatsType | null {\n    if (this.finalStats) {\n      return this.finalStats;\n    }\n\n    this._process();\n\n    const settings = this.parser.getSettings();\n    if (!settings) {\n      return null;\n    }\n\n    // Finish processing if we're not up to date\n    this.statsComputer.process();\n    const inputs = this.inputComputer.fetch();\n    const stocks = this.stockComputer.fetch();\n    const conversions = this.conversionComputer.fetch();\n    const playableFrameCount = this.parser.getPlayableFrameCount();\n    const overall = generateOverallStats({ settings, inputs, conversions, playableFrameCount });\n\n    const gameEnd = this.parser.getGameEnd();\n    const gameComplete = gameEnd !== null;\n\n    const stats: StatsType = {\n      lastFrame: this.parser.getLatestFrameNumber(),\n      playableFrameCount,\n      stocks: stocks,\n      conversions: conversions,\n      combos: this.comboComputer.fetch(),\n      actionCounts: this.actionsComputer.fetch(),\n      overall: overall,\n      gameComplete,\n    };\n\n    if (gameComplete) {\n      // If the game is complete, store a cached version of stats because it should not\n      // change anymore. Ideally the statsCompuer.process and fetch functions would simply do no\n      // work in this case instead but currently the conversions fetch function,\n      // generateOverallStats, and maybe more are doing work on every call.\n      this.finalStats = stats;\n    }\n\n    return stats;\n  }\n\n  public getStadiumStats(): StadiumStatsType | null {\n    this._process();\n\n    const settings = this.parser.getSettings();\n    if (!settings) {\n      return null;\n    }\n\n    const latestFrame = this.parser.getLatestFrame();\n    const players = latestFrame?.players;\n\n    if (!players) {\n      return null;\n    }\n\n    this.statsComputer.process();\n\n    switch (settings.gameMode) {\n      case GameMode.TARGET_TEST:\n        return {\n          type: \"target-test\",\n          targetBreaks: this.targetBreakComputer.fetch(),\n        };\n      case GameMode.HOME_RUN_CONTEST:\n        const distanceInfo = extractDistanceInfoFromFrame(settings, latestFrame);\n        if (!distanceInfo) {\n          return null;\n        }\n\n        return {\n          type: \"home-run-contest\",\n          distance: distanceInfo.distance,\n          units: distanceInfo.units,\n        };\n      default:\n        return null;\n    }\n  }\n\n  public getMetadata(): MetadataType | null {\n    if (this.metadata) {\n      return this.metadata;\n    }\n    const slpfile = openSlpFile(this.input);\n    this.metadata = getMetadata(slpfile);\n    closeSlpFile(slpfile);\n    return this.metadata;\n  }\n\n  public getFilePath(): string | null {\n    if (this.input.source !== SlpInputSource.FILE) {\n      return null;\n    }\n\n    return this.input.filePath ?? null;\n  }\n\n  public getWinners(): PlacementType[] {\n    // Read game end block directly\n    const slpfile = openSlpFile(this.input);\n    const gameEnd = getGameEnd(slpfile);\n    this._process(() => this.parser.getSettings() !== null, slpfile);\n    const settings = this.parser.getSettings();\n    if (!gameEnd || !settings) {\n      // Technically using the final post frame updates, it should be possible to compute winners for\n      // replays without a gameEnd message. But I'll leave this here anyway\n      closeSlpFile(slpfile);\n      return [];\n    }\n\n    // If we went to time, let's fetch the post frame updates to compute the winner\n    let finalPostFrameUpdates: PostFrameUpdateType[] = [];\n    if (gameEnd.gameEndMethod === GameEndMethod.TIME) {\n      finalPostFrameUpdates = extractFinalPostFrameUpdates(slpfile);\n    }\n\n    closeSlpFile(slpfile);\n    return getWinners(gameEnd, settings, finalPostFrameUpdates);\n  }\n}\n"],"names":["getDeathDirection","actionStateId","DEFAULT_COLOR","UnknownCharacter","id","name","shortName","colors","generateCharacterInfo","info","_info$shortName","_info$colors","getAllCharacters","Object","entries","characters","map","data","parseInt","sort","a","b","getCharacterInfo","externalCharacterId","toString","getCharacterShortName","character","getCharacterName","getCharacterColorName","characterColor","color","UnknownMove","getMoveInfo","moveId","moveName","moveNames","getMoveShortName","move","getMoveName","UnknownStage","getStageInfo","stageId","stageName","stageNames","getStageName","stage","Character","Stage","State","Timers","PUNISH_RESET_FRAMES","RECOVERY_RESET_FRAMES","COMBO_STRING_RESET_FRAMES","getSinglesPlayerPermutationsFromSettings","settings","players","length","playerIndex","opponentIndex","didLoseStock","frame","prevFrame","stocksRemaining","isInControl","state","ground","GROUNDED_CONTROL_START","GROUNDED_CONTROL_END","squat","SQUAT_START","SQUAT_END","groundAttack","GROUND_ATTACK_START","GROUND_ATTACK_END","isGrab","GRAB","isTeching","TECH_START","TECH_END","isDown","DOWN_START","DOWN_END","isDamaged","DAMAGE_START","DAMAGE_END","DAMAGE_FALL","JAB_RESET_UP","JAB_RESET_DOWN","isGrabbed","CAPTURE_START","CAPTURE_END","isCommandGrabbed","COMMAND_GRAB_RANGE1_START","COMMAND_GRAB_RANGE1_END","COMMAND_GRAB_RANGE2_START","COMMAND_GRAB_RANGE2_END","BARREL_WAIT","isDead","DYING_START","DYING_END","calcDamageTaken","_frame$percent","_prevFrame$percent","percent","prevPercent","dashDanceAnimations","DASH","TURN","ActionsComputer","constructor","playerPermutations","Array","Map","setup","forEach","indices","playerCounts","wavedashCount","wavelandCount","airDodgeCount","dashDanceCount","spotDodgeCount","ledgegrabCount","rollCount","lCancelCount","success","fail","attackCount","jab1","jab2","jab3","jabm","dash","ftilt","utilt","dtilt","fsmash","usmash","dsmash","nair","fair","bair","uair","dair","grabCount","throwCount","up","forward","back","down","groundTechCount","away","in","neutral","wallTechCount","playerState","animations","actionFrameCounters","set","processFrame","get","handleActionCompute","fetch","from","values","val","isMissGroundTech","animation","TECH_MISS_DOWN","TECH_MISS_UP","isRolling","ROLL_BACKWARD","ROLL_FORWARD","isGrabAction","THROW_DOWN","DASH_GRAB","isGrabbing","isAerialAttack","AERIAL_ATTACK_START","AERIAL_ATTACK_END","isForwardTilt","ATTACK_FTILT_START","ATTACK_FTILT_END","isForwardSmash","ATTACK_FSMASH_START","ATTACK_FSMASH_END","playerFrame","post","opponentFrame","incrementCount","field","condition","current","currentAnimation","push","currentFrameCounter","actionStateCounter","last3Frames","slice","prevAnimation","prevFrameCounter","isNewAction","didDashDance","isEqual","SPOT_DODGE","AIR_DODGE","CLIFF_CATCH","ATTACK_DASH","ATTACK_JAB1","ATTACK_JAB2","ATTACK_JAB3","ATTACK_JABM","ATTACK_UTILT","ATTACK_DTILT","ATTACK_USMASH","ATTACK_DSMASH","AERIAL_NAIR","AERIAL_FAIR","AERIAL_BAIR","AERIAL_UAIR","AERIAL_DAIR","internalCharacterId","GNW_JAB1","GNW_JABM","GNW_DTILT","GNW_FSMASH","GNW_NAIR","GNW_BAIR","GNW_UAIR","PEACH_FSMASH1","PEACH_FSMASH2","PEACH_FSMASH3","THROW_UP","THROW_FORWARD","THROW_BACK","opponentDir","positionX","facingOpponent","facingDirection","FORWARD_TECH","BACKWARD_TECH","NEUTRAL_TECH","WALL_TECH","MISSED_WALL_TECH","lCancelStatus","handleActionWavedash","counts","last","isSpecialLanding","LANDING_FALL_SPECIAL","isAcceptablePrevious","isWavedashInitiationAnimation","isPossibleWavedash","recentFrames","recentAnimations","keyBy","size","ACTION_KNEE_BEND","isAboveMin","CONTROLLED_JUMP_START","isBelowMax","CONTROLLED_JUMP_END","ComboEvent","ComboComputer","EventEmitter","args","combos","combo","resetCounter","lastHitAnimation","event","allFrames","handleComboCompute","emit","frames","currentFrameNumber","prevFrameNumber","prevPlayerFrame","prevOpponentFrame","oppActionStateId","opntIsDamaged","opntIsGrabbed","opntIsCommandGrabbed","opntDamageTaken","actionChangedSinceHit","actionCounter","prevActionCounter","actionFrameCounterReset","comboStarted","_prevOpponentFrame$pe","_opponentFrame$percen","startFrame","endFrame","startPercent","currentPercent","endPercent","moves","didKill","lastHitBy","lastAttackLanded","hitCount","damage","COMBO_EXTEND","COMBO_START","opntIsTeching","opntIsDowned","opntDidLoseStock","opntIsDying","_opponentFrame$percen2","shouldTerminate","_prevOpponentFrame$pe2","COMBO_END","ConversionComputer","conversions","metadata","lastEndFrameByOppIdx","conversion","terminated","handleConversionCompute","_populateConversionTypes","conversionsToHandle","filter","openingType","groupedConversions","groupBy","sortedConversions","orderBy","isTrade","lastMove","oppEndFrame","isCounterAttack","opntInControl","shouldStartResetCounter","shouldContinueResetCounter","Command","GameMode","Language","TimerType","ItemSpawnType","EnabledItemType","GameEndMethod","Frames","JoystickRegion","InputComputer","inputCount","joystickInputCount","cstickInputCount","buttonInputCount","triggerInputCount","handleInputCompute","pre","FIRST_PLAYABLE","invertedPreviousButtons","physicalButtons","currentButtons","buttonChanges","newInputsPressed","countSetBits","prevAnalogRegion","getJoystickRegion","joystickX","joystickY","currentAnalogRegion","DZ","prevCstickRegion","cStickX","cStickY","currentCstickRegion","physicalLTrigger","physicalRTrigger","x","bits","count","y","region","NE","SE","SW","NW","N","E","S","W","generateOverallStats","inputs","playableFrameCount","inputsByPlayer","originalConversions","conversionsByPlayer","conv","_conv$moves$","conversionsByPlayerByOpening","mapValues","gameMinutes","overall","player","playerInputs","inputCounts","buttons","triggers","cstick","joystick","total","conversionCount","successfulConversionCount","opponentIndices","opp","isTeams","teamId","totalDamage","killCount","successfulConversions","getRatio","inputsPerMinute","digitalInputsPerMinute","openingsPerKill","damagePerOpening","neutralWinRatio","getOpeningRatio","counterHitRatio","beneficialTradeRatio","getBeneficialTradeRatio","ratio","type","openings","opponentOpenings","flatten","playerTrades","opponentTrades","benefitsPlayer","zippedTrades","zip","conversionPair","playerConversion","first","opponentConversion","playerDamage","opponentDamage","defaultOptions","processOnTheFly","Stats","options","lastProcessedFrame","allComputers","assign","v","comp","register","computer","process","i","FIRST","isCompletedFrame","addFrame","playerPostFrame","StockComputer","stocks","stock","handleStockCompute","isPlayerDead","deathAnimation","_prevPlayerFrame$perc","_playerFrame$percent","exists","value","TARGET_ITEM_TYPE_ID","TargetBreakComputer","targetBreaks","isTargetTestGame","gameMode","TARGET_TEST","handleTargetBreak","_frames$currentFrameN","_frames$currentFrameN2","_frames$prevFrameNumb","_frames$prevFrameNumb2","_frames$Frames$FIRST$","_frames$Frames$FIRST","targets","items","item","typeId","target","spawnId","frameDestroyed","positionY","currentTargets","previousTargets","currentTargetIds","previousTargetIds","brokenTargetIds","includes","targetBreak","find","frameToGameTimer","timerType","startingTimerSeconds","DECREASING","centiseconds","Math","ceil","date","Date","format","INCREASING","floor","CommunicationType","ConsoleCommunication","receiveBuf","Buffer","messages","receive","concat","msgSize","readUInt32BE","ubjsonData","decode","getReceiveBuffer","getMessages","toReturn","genHandshakeOut","cursor","clientToken","isRealtime","clientTokenBuf","writeUInt32BE","message","HANDSHAKE","payload","Uint8Array","buf","encode","optimizeArrays","msg","byteLength","ConnectionEvent","ConnectionStatus","Ports","NETWORK_MESSAGE","DEFAULT_CONNECTION_TIMEOUT_MS","CommunicationState","defaultConnectionDetails","consoleNick","gameDataCursor","version","consoleConnectionOptions","autoReconnect","ConsoleConnection","ipAddress","port","connectionStatus","DISCONNECTED","connDetails","client","connection","shouldReconnect","DEFAULT","getStatus","getSettings","getDetails","connect","ip","timeout","_connectOnPort","reconnect","inject","_setStatus","CONNECTING","consoleComms","initialDelay","maxDelay","strategy","failAfter","Infinity","_this$connDetails$cli","CONNECT","setConnectingStatus","RECONNECT_WAIT","on","disconnect","err","console","warn","ERROR","destroy","_getInitialCommState","LEGACY","openingBytes","dataStart","equals","NORMAL","_processMessage","MESSAGE","KEEP_ALIVE","fakeKeepAlive","_handleReplayData","REPLAY","readPos","pos","cmp","compare","forcePos","Error","nextPos","nick","nintendontVersion","tokenBuf","DATA","status","STATUS_CHANGE","MAX_PEERS","DolphinMessageType","DolphinConnection","gameCursor","nickname","peer","log","enet","createClient","peers","channels","error","address","newPeer","ping","CONNECTED","request","packet","Packet","JSON","stringify","PACKET_FLAG","RELIABLE","send","dataString","parse","dolphin_closed","CONNECT_REPLY","GAME_EVENT","_updateCursor","gameData","START_GAME","END_GAME","next_cursor","toHalfwidth","str","convertChar","charCode","ret","char","charCodeAt","String","fromCharCode","SlpInputSource","getRef","input","source","BUFFER","buffer","readRef","ref","offset","position","FILE","copy","getLenRef","openSlpFile","rawDataPosition","getRawDataPosition","rawDataLength","getRawDataLength","metadataPosition","metadataLength","getMetadataLength","messageSizes","getMessageSizes","closeSlpFile","file","fileSize","rawDataLen","len","MESSAGE_SIZES","payloadLength","messageSizesBuffer","command","getEnabledItems","view","offsets","enabledItems","reduce","acc","byteOffset","index","byte","readUint8","getGameInfoBlock","gameBitfield1","gameBitfield2","gameBitfield3","gameBitfield4","bombRainEnabled","selfDestructScoreValue","readInt8","itemSpawnBitfield1","itemSpawnBitfield2","itemSpawnBitfield3","itemSpawnBitfield4","itemSpawnBitfield5","damageRatio","readFloat","iterateEvents","slpFile","callback","startPos","readPosition","stopReadingAt","commandPayloadBuffers","splitMessageBuffer","commandByteBuffer","_commandByteBuffer$","commandByte","undefined","advanceAmount","SPLIT_MESSAGE","_readUint","_readUint2","DataView","readUint16","isLastMessage","readBool","internalCommand","appendBuf","mergedBuf","_splitMessageBuffer$","parsedPayload","parseMessage","shouldStop","GAME_START","getPlayerObject","cfOffset","dashback","readUint32","shieldDrop","controllerFix","nametagLength","nametagOffset","nametagStart","nametagBuf","nameTagString","iconv","split","shift","nametag","displayNameLength","displayNameOffset","displayNameStart","displayNameBuf","displayNameString","displayName","connectCodeLength","connectCodeOffset","connectCodeStart","connectCodeBuf","connectCodeString","connectCode","userIdLength","userIdOffset","userIdStart","userIdBuf","userIdString","userId","playerInfo","characterId","startStocks","teamShade","handicap","staminaMode","Boolean","silentCharacter","lowGravity","invisible","blackStockIcon","metal","startOnAngelPlatform","rumbleEnabled","cpuLevel","offenseRatio","defenseRatio","modelScale","matchIdLength","matchIdStart","matchIdBuf","matchIdString","matchId","gameSettings","slpVersion","inGameMode","friendlyFireEnabled","itemSpawnBehavior","scene","language","gameInfoBlock","randomSeed","isPAL","isFrozenPS","matchInfo","gameNumber","tiebreakerNumber","FRAME_START","readInt32","seed","sceneFrameCounter","PRE_FRAME_UPDATE","isFollower","trigger","rawJoystickX","POST_FRAME_UPDATE","selfInducedSpeeds","airX","attackX","attackY","groundX","shieldSize","currentComboCount","miscActionState","isAirborne","lastGroundId","jumpsRemaining","hurtboxCollisionState","hitlagRemaining","animationIndex","instanceHitBy","instanceId","ITEM_UPDATE","velocityX","velocityY","damageTaken","expirationTimer","missileType","turnipFace","chargeShotLaunched","chargePower","owner","FRAME_BOOKEND","latestFinalizedFrame","GAME_END","placements","gameEndMethod","lrasInitiatorIndex","GECKO_LIST","codes","_readUint3","word1","codetype","_readUint4","lineCount","_readUint5","byteLen","contents","canReadFromView","viewLength","getFloat32","getInt32","getInt8","getUint32","getUint16","bitmask","getUint8","getMetadata","ex","getGameEnd","gameEndPayloadSize","gameEndSize","gameEndPosition","gameEndMessage","extractFinalPostFrameUpdates","postFramePayloadSize","frameBookendPayloadSize","postFrameSize","frameBookendSize","frameNum","postFramePosition","postFrameUpdates","postFrameMessage","unshift","SlpStreamMode","defaultSettings","suppressErrors","mode","AUTO","SlpStreamEvent","SlpStream","Writable","slpOptions","opts","gameEnded","payloadSizes","previousBuffer","restart","_write","newData","encoding","dataView","payloadSize","_this$payloadSizes$ge","remainingLen","MANUAL","payloadPtr","payloadDataView","payloadLen","_processCommand","_writeCommand","entirePayload","payloadBuf","bufToWrite","RAW","processReceiveCommands","eventPayload","COMMAND","_this$payloadSizes$ge2","DEFAULT_NICKNAME","SlpFile","filePath","slpStream","fileStream","usesExternalStream","consoleNickname","startTime","lastFrame","_setupListeners","_initializeNewGame","path","setMetadata","chunk","write","_onCommand","characterUsage","names","netplay","code","prevPlayer","curCharFrames","streamListener","removeListener","end","_final","footer","startTimeStr","toISOString","createInt32Buffer","usage","internalId","createUInt32Buffer","number","alloc","writeInt32BE","getNewFilePath","folder","join","outputFiles","folderPath","newFilename","SlpFileWriterEvent","SlpFileWriter","currentFile","_writePayload","_handleNewGame","_handleEndGame","getCurrentFilename","resolve","endCurrentFile","updateSettings","NEW_FILE","FILE_COMPLETE","RollbackCounter","rollbackFrames","rollbackFrameCount","rollbackPlayerIdx","lastFrameWasRollback","currentRollbackLength","rollbackLengths","checkIfRollbackFrame","currentFrame","playerIdx","getFrames","getCount","getLengths","ITEM_SETTINGS_BIT_COUNT","MAX_ROLLBACK_FRAMES","SlpParserEvent","defaultSlpParserOptions","strict","SlpParser","rollbackCounter","gameEnd","latestFrameIndex","settingsComplete","lastFinalizedFrame","geckoList","handleCommand","_handleGameStart","_handleFrameStart","_handlePostFrameUpdate","_handleFrameUpdate","_handleItemUpdate","_handleFrameBookend","_handleGameEnd","_handleGeckoList","reset","getLatestFrameNumber","_this$latestFrameInde","getPlayableFrameCount","getLatestFrame","frameIndex","indexToUse","getItems","_this$settings","_this$settings2","OFF","itemBitfield","getRollbackFrames","lengths","getFrame","num","getGeckoList","_finalizeFrames","END","semver","gte","_completeSettings","playersByIndex","location","wasRolledback","ROLLBACK_FRAME","lte","FRAME","_this$frames$currentF","_this$frames$currentF2","validLatestFrame","ONLINE","frameToFinalize","playerFrameInfo","preOrPost","FINALIZED_FRAME","SETTINGS","getWinners","finalPostFrameUpdates","_players$find$teamId","_players$find2","NO_CONTEST","UNRESOLVED","_players$find","winnerIndex","TIME","nonFollowerUpdates","pfu","p1","p2","p1Health","trunc","p2Health","firstPosition","placement","winningTeam","_players$find$teamId2","_players$find3","SANDBAG_INTERNAL_ID","FEET_CONVERSION_FACTOR","METERS_CONVERSION_FACTOR","positionToHomeRunDistance","distance","units","score","fround","round","max","extractDistanceInfoFromFrame","_sandbagLastFrame$pos","sandbagLastFrame","JAPANESE","SlippiGame","finalStats","parser","actionsComputer","conversionComputer","comboComputer","stockComputer","inputComputer","targetBreakComputer","statsComputer","ArrayBuffer","_process","slpfile","skipProcessing","getStats","gameComplete","stats","actionCounts","getStadiumStats","latestFrame","HOME_RUN_CONTEST","distanceInfo","getFilePath","_this$input$filePath"],"mappings":"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"}