{"version":3,"file":"actions.esm.js","sources":["../../src/stats/actions.ts"],"sourcesContent":["import get from \"lodash/get\";\nimport isEqual from \"lodash/isEqual\";\nimport keyBy from \"lodash/keyBy\";\nimport last from \"lodash/last\";\nimport set from \"lodash/set\";\nimport size from \"lodash/size\";\n\nimport type { FrameEntryType, GameStartType } from \"../types\";\nimport type { ActionCountsType, PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings, State } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// Frame pattern that indicates a dash dance turn was executed\nconst dashDanceAnimations = [State.DASH, State.TURN, State.DASH];\n\ntype PlayerActionState = {\n  playerCounts: ActionCountsType;\n  animations: number[];\n  actionFrameCounters: number[];\n};\n\nexport class ActionsComputer implements StatComputer<ActionCountsType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, PlayerActionState>();\n\n  public setup(settings: GameStartType): void {\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.playerPermutations.forEach((indices) => {\n      const playerCounts: ActionCountsType = {\n        playerIndex: indices.playerIndex,\n        wavedashCount: 0,\n        wavelandCount: 0,\n        airDodgeCount: 0,\n        dashDanceCount: 0,\n        spotDodgeCount: 0,\n        ledgegrabCount: 0,\n        rollCount: 0,\n        lCancelCount: {\n          success: 0,\n          fail: 0,\n        },\n        attackCount: {\n          jab1: 0,\n          jab2: 0,\n          jab3: 0,\n          jabm: 0,\n          dash: 0,\n          ftilt: 0,\n          utilt: 0,\n          dtilt: 0,\n          fsmash: 0,\n          usmash: 0,\n          dsmash: 0,\n          nair: 0,\n          fair: 0,\n          bair: 0,\n          uair: 0,\n          dair: 0,\n        },\n        grabCount: {\n          success: 0,\n          fail: 0,\n        },\n        throwCount: {\n          up: 0,\n          forward: 0,\n          back: 0,\n          down: 0,\n        },\n        groundTechCount: {\n          // tech away/in are in reference to the opponents position and not the stage\n          away: 0,\n          in: 0,\n          neutral: 0,\n          fail: 0,\n        },\n        wallTechCount: {\n          success: 0,\n          fail: 0,\n        },\n      };\n      const playerState: PlayerActionState = {\n        playerCounts: playerCounts,\n        animations: [],\n        actionFrameCounters: [],\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleActionCompute(state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): ActionCountsType[] {\n    return Array.from(this.state.values()).map((val) => val.playerCounts);\n  }\n}\n\nfunction isMissGroundTech(animation: State): boolean {\n  return animation === State.TECH_MISS_DOWN || animation === State.TECH_MISS_UP;\n}\n\nfunction isRolling(animation: State): boolean {\n  return animation === State.ROLL_BACKWARD || animation === State.ROLL_FORWARD;\n}\n\nfunction isGrabAction(animation: State): boolean {\n  // Includes Grab pull, wait, pummel, and throws\n  return animation > State.GRAB && animation <= State.THROW_DOWN && animation !== State.DASH_GRAB;\n}\n\nfunction isGrabbing(animation: State): boolean {\n  return animation === State.GRAB || animation === State.DASH_GRAB;\n}\n\nfunction isAerialAttack(animation: State): boolean {\n  return animation >= State.AERIAL_ATTACK_START && animation <= State.AERIAL_ATTACK_END;\n}\n\nfunction isForwardTilt(animation: State): boolean {\n  return animation >= State.ATTACK_FTILT_START && animation <= State.ATTACK_FTILT_END;\n}\n\nfunction isForwardSmash(animation: State): boolean {\n  return animation >= State.ATTACK_FSMASH_START && animation <= State.ATTACK_FSMASH_END;\n}\n\nfunction handleActionCompute(state: PlayerActionState, indices: PlayerIndexedType, frame: FrameEntryType): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n  const incrementCount = (field: string, condition: boolean): void => {\n    if (!condition) {\n      return;\n    }\n\n    const current: number = get(state.playerCounts, field, 0);\n    set(state.playerCounts, field, current + 1);\n  };\n\n  // Manage animation state\n  const currentAnimation = playerFrame.actionStateId!;\n  state.animations.push(currentAnimation);\n  const currentFrameCounter = playerFrame.actionStateCounter!;\n  state.actionFrameCounters.push(currentFrameCounter);\n\n  // Grab last 3 frames\n  const last3Frames = state.animations.slice(-3);\n  const prevAnimation = last3Frames[last3Frames.length - 2] as number;\n  const prevFrameCounter = state.actionFrameCounters[state.actionFrameCounters.length - 2] as number;\n\n  // New action if new animation or frame counter goes back down (repeated action)\n  const isNewAction = currentAnimation !== prevAnimation || prevFrameCounter > currentFrameCounter;\n  if (!isNewAction) {\n    return;\n  }\n\n  // Increment counts based on conditions\n  const didDashDance = isEqual(last3Frames, dashDanceAnimations);\n  incrementCount(\"dashDanceCount\", didDashDance);\n\n  incrementCount(\"rollCount\", isRolling(currentAnimation));\n  incrementCount(\"spotDodgeCount\", currentAnimation === State.SPOT_DODGE);\n  incrementCount(\"airDodgeCount\", currentAnimation === State.AIR_DODGE);\n  incrementCount(\"ledgegrabCount\", currentAnimation === State.CLIFF_CATCH);\n\n  // Grabs\n  incrementCount(\"grabCount.success\", isGrabbing(prevAnimation) && isGrabAction(currentAnimation));\n  incrementCount(\"grabCount.fail\", isGrabbing(prevAnimation) && !isGrabAction(currentAnimation));\n  if (currentAnimation === State.DASH_GRAB && prevAnimation === State.ATTACK_DASH) {\n    state.playerCounts.attackCount.dash -= 1; // subtract from dash attack if boost grab\n  }\n\n  // Basic attacks\n  incrementCount(\"attackCount.jab1\", currentAnimation === State.ATTACK_JAB1);\n  incrementCount(\"attackCount.jab2\", currentAnimation === State.ATTACK_JAB2);\n  incrementCount(\"attackCount.jab3\", currentAnimation === State.ATTACK_JAB3);\n  incrementCount(\"attackCount.jabm\", currentAnimation === State.ATTACK_JABM);\n  incrementCount(\"attackCount.dash\", currentAnimation === State.ATTACK_DASH);\n  incrementCount(\"attackCount.ftilt\", isForwardTilt(currentAnimation));\n  incrementCount(\"attackCount.utilt\", currentAnimation === State.ATTACK_UTILT);\n  incrementCount(\"attackCount.dtilt\", currentAnimation === State.ATTACK_DTILT);\n  incrementCount(\"attackCount.fsmash\", isForwardSmash(currentAnimation));\n  incrementCount(\"attackCount.usmash\", currentAnimation === State.ATTACK_USMASH);\n  incrementCount(\"attackCount.dsmash\", currentAnimation === State.ATTACK_DSMASH);\n  incrementCount(\"attackCount.nair\", currentAnimation === State.AERIAL_NAIR);\n  incrementCount(\"attackCount.fair\", currentAnimation === State.AERIAL_FAIR);\n  incrementCount(\"attackCount.bair\", currentAnimation === State.AERIAL_BAIR);\n  incrementCount(\"attackCount.uair\", currentAnimation === State.AERIAL_UAIR);\n  incrementCount(\"attackCount.dair\", currentAnimation === State.AERIAL_DAIR);\n\n  // GnW is weird and has unique IDs for some moves\n  if (playerFrame.internalCharacterId === 0x18) {\n    incrementCount(\"attackCount.jab1\", currentAnimation === State.GNW_JAB1);\n    incrementCount(\"attackCount.jabm\", currentAnimation === State.GNW_JABM);\n    incrementCount(\"attackCount.dtilt\", currentAnimation === State.GNW_DTILT);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.GNW_FSMASH);\n    incrementCount(\"attackCount.nair\", currentAnimation === State.GNW_NAIR);\n    incrementCount(\"attackCount.bair\", currentAnimation === State.GNW_BAIR);\n    incrementCount(\"attackCount.uair\", currentAnimation === State.GNW_UAIR);\n  }\n\n  // Peach is also weird and has a unique ID for her fsmash\n  // FSMASH1 = Golf Club, FSMASH2 = Frying Pan, FSMASH3 = Tennis Racket\n  if (playerFrame.internalCharacterId === 0x09) {\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH1);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH2);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH3);\n  }\n\n  // Throws\n  incrementCount(\"throwCount.up\", currentAnimation === State.THROW_UP);\n  incrementCount(\"throwCount.forward\", currentAnimation === State.THROW_FORWARD);\n  incrementCount(\"throwCount.down\", currentAnimation === State.THROW_DOWN);\n  incrementCount(\"throwCount.back\", currentAnimation === State.THROW_BACK);\n\n  // Techs\n  const opponentDir = playerFrame.positionX! > opponentFrame.positionX! ? -1 : 1;\n  const facingOpponent = playerFrame.facingDirection === opponentDir;\n\n  incrementCount(\"groundTechCount.fail\", isMissGroundTech(currentAnimation));\n  incrementCount(\"groundTechCount.in\", currentAnimation === State.FORWARD_TECH && facingOpponent);\n  incrementCount(\"groundTechCount.in\", currentAnimation === State.BACKWARD_TECH && !facingOpponent);\n  incrementCount(\"groundTechCount.neutral\", currentAnimation === State.NEUTRAL_TECH);\n  incrementCount(\"groundTechCount.away\", currentAnimation === State.BACKWARD_TECH && facingOpponent);\n  incrementCount(\"groundTechCount.away\", currentAnimation === State.FORWARD_TECH && !facingOpponent);\n  incrementCount(\"wallTechCount.success\", currentAnimation === State.WALL_TECH);\n  incrementCount(\"wallTechCount.fail\", currentAnimation === State.MISSED_WALL_TECH);\n\n  if (isAerialAttack(currentAnimation)) {\n    incrementCount(\"lCancelCount.success\", playerFrame.lCancelStatus === 1);\n    incrementCount(\"lCancelCount.fail\", playerFrame.lCancelStatus === 2);\n  }\n\n  // Handles wavedash detection (and waveland)\n  handleActionWavedash(state.playerCounts, state.animations);\n}\n\nfunction handleActionWavedash(counts: ActionCountsType, animations: State[]): void {\n  const currentAnimation = last(animations);\n  const prevAnimation = animations[animations.length - 2] as number;\n\n  const isSpecialLanding = currentAnimation === State.LANDING_FALL_SPECIAL;\n  const isAcceptablePrevious = isWavedashInitiationAnimation(prevAnimation);\n  const isPossibleWavedash = isSpecialLanding && isAcceptablePrevious;\n\n  if (!isPossibleWavedash) {\n    return;\n  }\n\n  // Here we special landed, it might be a wavedash, let's check\n  // We grab the last 8 frames here because that should be enough time to execute a\n  // wavedash. This number could be tweaked if we find false negatives\n  const recentFrames = animations.slice(-8);\n  const recentAnimations = keyBy(recentFrames, (animation) => animation);\n\n  if (size(recentAnimations) === 2 && recentAnimations[State.AIR_DODGE]) {\n    // If the only other animation is air dodge, this might be really late to the point\n    // where it was actually an air dodge. Air dodge animation is really long\n    return;\n  }\n\n  if (recentAnimations[State.AIR_DODGE]) {\n    // If one of the recent animations was an air dodge, let's remove that from the\n    // air dodge counter, we don't want to count air dodges used to wavedash/land\n    counts.airDodgeCount -= 1;\n  }\n\n  if (recentAnimations[State.ACTION_KNEE_BEND]) {\n    // If a jump was started recently, we will consider this a wavedash\n    counts.wavedashCount += 1;\n  } else {\n    // If there was no jump recently, this is a waveland\n    counts.wavelandCount += 1;\n  }\n}\n\nfunction isWavedashInitiationAnimation(animation: State): boolean {\n  if (animation === State.AIR_DODGE) {\n    return true;\n  }\n\n  const isAboveMin = animation >= State.CONTROLLED_JUMP_START;\n  const isBelowMax = animation <= State.CONTROLLED_JUMP_END;\n  return isAboveMin && isBelowMax;\n}\n"],"names":["dashDanceAnimations","State","DASH","TURN","ActionsComputer","constructor","playerPermutations","Array","state","Map","setup","settings","getSinglesPlayerPermutationsFromSettings","forEach","indices","playerCounts","playerIndex","wavedashCount","wavelandCount","airDodgeCount","dashDanceCount","spotDodgeCount","ledgegrabCount","rollCount","lCancelCount","success","fail","attackCount","jab1","jab2","jab3","jabm","dash","ftilt","utilt","dtilt","fsmash","usmash","dsmash","nair","fair","bair","uair","dair","grabCount","throwCount","up","forward","back","down","groundTechCount","away","in","neutral","wallTechCount","playerState","animations","actionFrameCounters","set","processFrame","frame","get","handleActionCompute","fetch","from","values","map","val","isMissGroundTech","animation","TECH_MISS_DOWN","TECH_MISS_UP","isRolling","ROLL_BACKWARD","ROLL_FORWARD","isGrabAction","GRAB","THROW_DOWN","DASH_GRAB","isGrabbing","isAerialAttack","AERIAL_ATTACK_START","AERIAL_ATTACK_END","isForwardTilt","ATTACK_FTILT_START","ATTACK_FTILT_END","isForwardSmash","ATTACK_FSMASH_START","ATTACK_FSMASH_END","playerFrame","players","post","opponentFrame","opponentIndex","incrementCount","field","condition","current","currentAnimation","actionStateId","push","currentFrameCounter","actionStateCounter","last3Frames","slice","prevAnimation","length","prevFrameCounter","isNewAction","didDashDance","isEqual","SPOT_DODGE","AIR_DODGE","CLIFF_CATCH","ATTACK_DASH","ATTACK_JAB1","ATTACK_JAB2","ATTACK_JAB3","ATTACK_JABM","ATTACK_UTILT","ATTACK_DTILT","ATTACK_USMASH","ATTACK_DSMASH","AERIAL_NAIR","AERIAL_FAIR","AERIAL_BAIR","AERIAL_UAIR","AERIAL_DAIR","internalCharacterId","GNW_JAB1","GNW_JABM","GNW_DTILT","GNW_FSMASH","GNW_NAIR","GNW_BAIR","GNW_UAIR","PEACH_FSMASH1","PEACH_FSMASH2","PEACH_FSMASH3","THROW_UP","THROW_FORWARD","THROW_BACK","opponentDir","positionX","facingOpponent","facingDirection","FORWARD_TECH","BACKWARD_TECH","NEUTRAL_TECH","WALL_TECH","MISSED_WALL_TECH","lCancelStatus","handleActionWavedash","counts","last","isSpecialLanding","LANDING_FALL_SPECIAL","isAcceptablePrevious","isWavedashInitiationAnimation","isPossibleWavedash","recentFrames","recentAnimations","keyBy","size","ACTION_KNEE_BEND","isAboveMin","CONTROLLED_JUMP_START","isBelowMax","CONTROLLED_JUMP_END"],"mappings":"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"}