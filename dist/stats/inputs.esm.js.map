{"version":3,"file":"inputs.esm.js","sources":["../../src/stats/inputs.ts"],"sourcesContent":["import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\nimport type { PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nenum JoystickRegion {\n  DZ = 0,\n  NE = 1,\n  SE = 2,\n  SW = 3,\n  NW = 4,\n  N = 5,\n  E = 6,\n  S = 7,\n  W = 8,\n}\n\nexport type PlayerInput = {\n  playerIndex: number;\n  opponentIndex: number;\n  inputCount: number;\n  joystickInputCount: number;\n  cstickInputCount: number;\n  buttonInputCount: number;\n  triggerInputCount: number;\n};\n\nexport class InputComputer implements StatComputer<PlayerInput[]> {\n  private state = new Map<PlayerIndexedType, PlayerInput>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerInput = {\n        playerIndex: indices.playerIndex,\n        opponentIndex: indices.opponentIndex,\n        inputCount: 0,\n        joystickInputCount: 0,\n        cstickInputCount: 0,\n        buttonInputCount: 0,\n        triggerInputCount: 0,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleInputCompute(allFrames, state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): PlayerInput[] {\n    return Array.from(this.state.values());\n  }\n}\n\nfunction handleInputCompute(\n  frames: FramesType,\n  state: PlayerInput,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.pre;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.pre : null;\n\n  if (currentFrameNumber < Frames.FIRST_PLAYABLE || !prevPlayerFrame) {\n    // Don't count inputs until the game actually starts\n    return;\n  }\n\n  // First count the number of buttons that go from 0 to 1\n  // Increment action count by amount of button presses\n  const invertedPreviousButtons = ~prevPlayerFrame.physicalButtons!;\n  const currentButtons = playerFrame.physicalButtons!;\n  const buttonChanges = invertedPreviousButtons & currentButtons & 0xfff;\n  const newInputsPressed = countSetBits(buttonChanges);\n  state.inputCount += newInputsPressed;\n  state.buttonInputCount += newInputsPressed;\n\n  // Increment action count when sticks change from one region to another.\n  // Don't increment when stick returns to deadzone\n  const prevAnalogRegion = getJoystickRegion(prevPlayerFrame.joystickX!, prevPlayerFrame.joystickY!);\n  const currentAnalogRegion = getJoystickRegion(playerFrame.joystickX!, playerFrame.joystickY!);\n  if (prevAnalogRegion !== currentAnalogRegion && currentAnalogRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.joystickInputCount += 1;\n  }\n\n  // Do the same for c-stick\n  const prevCstickRegion = getJoystickRegion(prevPlayerFrame.cStickX!, prevPlayerFrame.cStickY!);\n  const currentCstickRegion = getJoystickRegion(playerFrame.cStickX!, playerFrame.cStickY!);\n  if (prevCstickRegion !== currentCstickRegion && currentCstickRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.cstickInputCount += 1;\n  }\n\n  // Increment action on analog trigger... I'm not sure when. This needs revision\n  // Currently will update input count when the button gets pressed past 0.3\n  // Changes from hard shield to light shield should probably count as inputs but\n  // are not counted here\n  if (prevPlayerFrame.physicalLTrigger! < 0.3 && playerFrame.physicalLTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n  if (prevPlayerFrame.physicalRTrigger! < 0.3 && playerFrame.physicalRTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n}\n\nfunction countSetBits(x: number): number {\n  // This function solves the Hamming Weight problem. Effectively it counts the number of\n  // bits in the input that are set to 1\n  // This implementation is supposedly very efficient when most bits are zero.\n  // Found: https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation\n  let bits = x;\n\n  let count;\n  for (count = 0; bits; count += 1) {\n    bits &= bits - 1;\n  }\n  return count;\n}\n\nfunction getJoystickRegion(x: number, y: number): JoystickRegion {\n  let region = JoystickRegion.DZ;\n\n  if (x >= 0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NE;\n  } else if (x >= 0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SE;\n  } else if (x <= -0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SW;\n  } else if (x <= -0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NW;\n  } else if (y >= 0.2875) {\n    region = JoystickRegion.N;\n  } else if (x >= 0.2875) {\n    region = JoystickRegion.E;\n  } else if (y <= -0.2875) {\n    region = JoystickRegion.S;\n  } else if (x <= -0.2875) {\n    region = JoystickRegion.W;\n  }\n\n  return region;\n}\n"],"names":["JoystickRegion","InputComputer","constructor","state","Map","playerPermutations","Array","setup","settings","getSinglesPlayerPermutationsFromSettings","forEach","indices","playerState","playerIndex","opponentIndex","inputCount","joystickInputCount","cstickInputCount","buttonInputCount","triggerInputCount","set","processFrame","frame","allFrames","get","handleInputCompute","fetch","from","values","frames","playerFrame","players","pre","currentFrameNumber","prevFrameNumber","prevPlayerFrame","Frames","FIRST_PLAYABLE","invertedPreviousButtons","physicalButtons","currentButtons","buttonChanges","newInputsPressed","countSetBits","prevAnalogRegion","getJoystickRegion","joystickX","joystickY","currentAnalogRegion","DZ","prevCstickRegion","cStickX","cStickY","currentCstickRegion","physicalLTrigger","physicalRTrigger","x","bits","count","y","region","NE","SE","SW","NW","N","E","S","W"],"mappings":"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"}