{"version":3,"file":"targets.esm.js","sources":["../../src/stats/targets.ts"],"sourcesContent":["import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames, GameMode } from \"../types\";\nimport { exists } from \"../utils/exists\";\nimport type { TargetBreakType } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// The Target item's in-game ID\nconst TARGET_ITEM_TYPE_ID = 209;\n\nexport class TargetBreakComputer implements StatComputer<TargetBreakType[]> {\n  private targetBreaks = new Array<TargetBreakType>();\n  private isTargetTestGame = false;\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.targetBreaks = [];\n    this.isTargetTestGame = settings.gameMode === GameMode.TARGET_TEST;\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    if (!this.isTargetTestGame) {\n      return;\n    }\n\n    handleTargetBreak(allFrames, frame, this.targetBreaks);\n  }\n\n  public fetch(): TargetBreakType[] {\n    return this.targetBreaks;\n  }\n}\n\nfunction handleTargetBreak(frames: FramesType, frame: FrameEntryType, targetBreaks: TargetBreakType[]) {\n  const currentFrameNumber = frame.frame;\n  const prevFrameNumber = currentFrameNumber - 1;\n\n  // Add all targets on the first frame\n  if (currentFrameNumber === Frames.FIRST) {\n    const targets = frames[Frames.FIRST]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n\n    targets.forEach((target) => {\n      targetBreaks.push({\n        spawnId: target.spawnId as number,\n        frameDestroyed: null,\n        positionX: target.positionX as number,\n        positionY: target.positionY as number,\n      });\n    });\n  }\n\n  const currentTargets = frames[currentFrameNumber]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n  const previousTargets = frames[prevFrameNumber]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n\n  const currentTargetIds = currentTargets.map((item) => item.spawnId).filter(exists);\n  const previousTargetIds = previousTargets.map((item) => item.spawnId).filter(exists);\n\n  // Check if any targets were destroyed\n  const brokenTargetIds = previousTargetIds.filter((id) => !currentTargetIds.includes(id));\n  brokenTargetIds.forEach((id) => {\n    // Update the target break\n    const targetBreak = targetBreaks.find((targetBreak) => targetBreak.spawnId === id);\n    if (targetBreak) {\n      targetBreak.frameDestroyed = currentFrameNumber;\n    }\n  });\n}\n"],"names":["TARGET_ITEM_TYPE_ID","TargetBreakComputer","constructor","targetBreaks","Array","isTargetTestGame","setup","settings","gameMode","GameMode","TARGET_TEST","processFrame","frame","allFrames","handleTargetBreak","fetch","frames","_frames$currentFrameN","_frames$currentFrameN2","_frames$prevFrameNumb","_frames$prevFrameNumb2","currentFrameNumber","prevFrameNumber","Frames","FIRST","_frames$Frames$FIRST$","_frames$Frames$FIRST","targets","items","filter","item","typeId","forEach","target","push","spawnId","frameDestroyed","positionX","positionY","currentTargets","previousTargets","currentTargetIds","map","exists","previousTargetIds","brokenTargetIds","id","includes","targetBreak","find"],"mappings":"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"}