{"version":3,"file":"overall.esm.js","sources":["../../src/stats/overall.ts"],"sourcesContent":["import first from \"lodash/first\";\nimport flatten from \"lodash/flatten\";\nimport get from \"lodash/get\";\nimport groupBy from \"lodash/groupBy\";\nimport keyBy from \"lodash/keyBy\";\nimport last from \"lodash/last\";\nimport mapValues from \"lodash/mapValues\";\nimport zip from \"lodash/zip\";\n\nimport type { GameStartType } from \"../types\";\nimport type { ConversionType, InputCountsType, OverallType, RatioType } from \"./common\";\nimport type { PlayerInput } from \"./inputs\";\n\ntype ConversionsByPlayerByOpening = {\n  [playerIndex: string]: {\n    [openingType: string]: ConversionType[];\n  };\n};\n\nexport function generateOverallStats({\n  settings,\n  inputs,\n  conversions,\n  playableFrameCount,\n}: {\n  settings: GameStartType;\n  inputs: PlayerInput[];\n  conversions: ConversionType[];\n  playableFrameCount: number;\n}): OverallType[] {\n  const inputsByPlayer = keyBy(inputs, \"playerIndex\");\n  const originalConversions = conversions;\n  const conversionsByPlayer = groupBy(conversions, (conv) => conv.moves[0]?.playerIndex);\n  const conversionsByPlayerByOpening: ConversionsByPlayerByOpening = mapValues(conversionsByPlayer, (conversions) =>\n    groupBy(conversions, \"openingType\"),\n  );\n\n  const gameMinutes = playableFrameCount / 3600;\n\n  const overall = settings.players.map((player) => {\n    const playerIndex = player.playerIndex;\n\n    const playerInputs = get(inputsByPlayer, playerIndex) || {};\n    const inputCounts: InputCountsType = {\n      buttons: get(playerInputs, \"buttonInputCount\"),\n      triggers: get(playerInputs, \"triggerInputCount\"),\n      cstick: get(playerInputs, \"cstickInputCount\"),\n      joystick: get(playerInputs, \"joystickInputCount\"),\n      total: get(playerInputs, \"inputCount\"),\n    };\n    // const conversions = get(conversionsByPlayer, playerIndex) || [];\n    // const successfulConversions = conversions.filter((conversion) => conversion.moves.length > 1);\n    let conversionCount = 0;\n    let successfulConversionCount = 0;\n\n    const opponentIndices = settings.players\n      .filter((opp) => {\n        // We want players which aren't ourselves\n        if (opp.playerIndex === playerIndex) {\n          return false;\n        }\n\n        // Make sure they're not on our team either\n        return !settings.isTeams || opp.teamId !== player.teamId;\n      })\n      .map((opp) => opp.playerIndex);\n\n    let totalDamage = 0;\n    let killCount = 0;\n\n    // These are the conversions that we did on our opponents\n    originalConversions\n      // Filter down to conversions of our opponent\n      .filter((conversion) => conversion.playerIndex !== playerIndex)\n      .forEach((conversion) => {\n        conversionCount++;\n\n        // We killed the opponent\n        if (conversion.didKill && conversion.lastHitBy === playerIndex) {\n          killCount += 1;\n        }\n        if (conversion.moves.length > 1 && conversion.moves[0]!.playerIndex === playerIndex) {\n          successfulConversionCount++;\n        }\n        conversion.moves.forEach((move) => {\n          if (move.playerIndex === playerIndex) {\n            totalDamage += move.damage;\n          }\n        });\n      });\n\n    return {\n      playerIndex: playerIndex,\n      inputCounts: inputCounts,\n      conversionCount: conversionCount,\n      totalDamage: totalDamage,\n      killCount: killCount,\n\n      successfulConversions: getRatio(successfulConversionCount, conversionCount),\n      inputsPerMinute: getRatio(inputCounts.total, gameMinutes),\n      digitalInputsPerMinute: getRatio(inputCounts.buttons, gameMinutes),\n      openingsPerKill: getRatio(conversionCount, killCount),\n      damagePerOpening: getRatio(totalDamage, conversionCount),\n      neutralWinRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"neutral-win\"),\n      counterHitRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"counter-attack\"),\n      beneficialTradeRatio: getBeneficialTradeRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices),\n    };\n  });\n\n  return overall;\n}\n\nfunction getRatio(count: number, total: number): RatioType {\n  return {\n    count: count,\n    total: total,\n    ratio: total ? count / total : null,\n  };\n}\n\nfunction getOpeningRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n  type: string,\n): RatioType {\n  const openings = get(conversionsByPlayerByOpening, [playerIndex, type]) || [];\n\n  const opponentOpenings = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, type]) || []),\n  );\n\n  return getRatio(openings.length, openings.length + opponentOpenings.length);\n}\n\nfunction getBeneficialTradeRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n): RatioType {\n  const playerTrades = get(conversionsByPlayerByOpening, [playerIndex, \"trade\"]) || [];\n  const opponentTrades = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, \"trade\"]) || []),\n  );\n\n  const benefitsPlayer = [];\n\n  // Figure out which punishes benefited this player\n  const zippedTrades = zip(playerTrades, opponentTrades);\n  zippedTrades.forEach((conversionPair) => {\n    const playerConversion = first(conversionPair);\n    const opponentConversion = last(conversionPair);\n    if (playerConversion && opponentConversion) {\n      const playerDamage = playerConversion.currentPercent - playerConversion.startPercent;\n      const opponentDamage = opponentConversion.currentPercent - opponentConversion.startPercent;\n\n      if (playerConversion!.didKill && !opponentConversion!.didKill) {\n        benefitsPlayer.push(playerConversion);\n      } else if (playerDamage > opponentDamage) {\n        benefitsPlayer.push(playerConversion);\n      }\n    }\n  });\n\n  return getRatio(benefitsPlayer.length, playerTrades.length);\n}\n"],"names":["generateOverallStats","settings","inputs","conversions","playableFrameCount","inputsByPlayer","keyBy","originalConversions","conversionsByPlayer","groupBy","conv","_conv$moves$","moves","playerIndex","conversionsByPlayerByOpening","mapValues","gameMinutes","overall","players","map","player","playerInputs","get","inputCounts","buttons","triggers","cstick","joystick","total","conversionCount","successfulConversionCount","opponentIndices","filter","opp","isTeams","teamId","totalDamage","killCount","conversion","forEach","didKill","lastHitBy","length","move","damage","successfulConversions","getRatio","inputsPerMinute","digitalInputsPerMinute","openingsPerKill","damagePerOpening","neutralWinRatio","getOpeningRatio","counterHitRatio","beneficialTradeRatio","getBeneficialTradeRatio","count","ratio","type","openings","opponentOpenings","flatten","opponentIndex","playerTrades","opponentTrades","benefitsPlayer","zippedTrades","zip","conversionPair","playerConversion","first","opponentConversion","last","playerDamage","currentPercent","startPercent","opponentDamage","push"],"mappings":";;;;;;;;;AAmBM,SAAUA,oBAAoBA,CAAC;EACnCC,QAAQ;EACRC,MAAM;EACNC,WAAW;AACXC,EAAAA,kBAAAA;AAMD,CAAA,EAAA;AACC,EAAA,MAAMC,cAAc,GAAGC,KAAK,CAACJ,MAAM,EAAE,aAAa,CAAC,CAAA;EACnD,MAAMK,mBAAmB,GAAGJ,WAAW,CAAA;AACvC,EAAA,MAAMK,mBAAmB,GAAGC,OAAO,CAACN,WAAW,EAAGO,IAAI,IAAA;AAAA,IAAA,IAAAC,YAAA,CAAA;IAAA,OAAAA,CAAAA,YAAA,GAAKD,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,KAAA,IAAA,GAAA,KAAA,CAAA,GAAbD,YAAA,CAAeE,WAAW,CAAA;GAAC,CAAA,CAAA;AACtF,EAAA,MAAMC,4BAA4B,GAAiCC,SAAS,CAACP,mBAAmB,EAAGL,WAAW,IAC5GM,OAAO,CAACN,WAAW,EAAE,aAAa,CAAC,CACpC,CAAA;AAED,EAAA,MAAMa,WAAW,GAAGZ,kBAAkB,GAAG,IAAI,CAAA;EAE7C,MAAMa,OAAO,GAAGhB,QAAQ,CAACiB,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAI;AAC9C,IAAA,MAAMP,WAAW,GAAGO,MAAM,CAACP,WAAW,CAAA;IAEtC,MAAMQ,YAAY,GAAGC,GAAG,CAACjB,cAAc,EAAEQ,WAAW,CAAC,IAAI,EAAE,CAAA;AAC3D,IAAA,MAAMU,WAAW,GAAoB;AACnCC,MAAAA,OAAO,EAAEF,GAAG,CAACD,YAAY,EAAE,kBAAkB,CAAC;AAC9CI,MAAAA,QAAQ,EAAEH,GAAG,CAACD,YAAY,EAAE,mBAAmB,CAAC;AAChDK,MAAAA,MAAM,EAAEJ,GAAG,CAACD,YAAY,EAAE,kBAAkB,CAAC;AAC7CM,MAAAA,QAAQ,EAAEL,GAAG,CAACD,YAAY,EAAE,oBAAoB,CAAC;AACjDO,MAAAA,KAAK,EAAEN,GAAG,CAACD,YAAY,EAAE,YAAY,CAAA;KACtC,CAAA;AACD;AACA;IACA,IAAIQ,eAAe,GAAG,CAAC,CAAA;IACvB,IAAIC,yBAAyB,GAAG,CAAC,CAAA;IAEjC,MAAMC,eAAe,GAAG9B,QAAQ,CAACiB,OAAO,CACrCc,MAAM,CAAEC,GAAG,IAAI;AACd;AACA,MAAA,IAAIA,GAAG,CAACpB,WAAW,KAAKA,WAAW,EAAE;AACnC,QAAA,OAAO,KAAK,CAAA;AACb,OAAA;AAED;MACA,OAAO,CAACZ,QAAQ,CAACiC,OAAO,IAAID,GAAG,CAACE,MAAM,KAAKf,MAAM,CAACe,MAAM,CAAA;KACzD,CAAC,CACDhB,GAAG,CAAEc,GAAG,IAAKA,GAAG,CAACpB,WAAW,CAAC,CAAA;IAEhC,IAAIuB,WAAW,GAAG,CAAC,CAAA;IACnB,IAAIC,SAAS,GAAG,CAAC,CAAA;AAEjB;AACA9B,IAAAA,mBAAAA;AACE;AAAA,KACCyB,MAAM,CAAEM,UAAU,IAAKA,UAAU,CAACzB,WAAW,KAAKA,WAAW,CAAC,CAC9D0B,OAAO,CAAED,UAAU,IAAI;AACtBT,MAAAA,eAAe,EAAE,CAAA;AAEjB;MACA,IAAIS,UAAU,CAACE,OAAO,IAAIF,UAAU,CAACG,SAAS,KAAK5B,WAAW,EAAE;AAC9DwB,QAAAA,SAAS,IAAI,CAAC,CAAA;AACf,OAAA;AACD,MAAA,IAAIC,UAAU,CAAC1B,KAAK,CAAC8B,MAAM,GAAG,CAAC,IAAIJ,UAAU,CAAC1B,KAAK,CAAC,CAAC,CAAE,CAACC,WAAW,KAAKA,WAAW,EAAE;AACnFiB,QAAAA,yBAAyB,EAAE,CAAA;AAC5B,OAAA;AACDQ,MAAAA,UAAU,CAAC1B,KAAK,CAAC2B,OAAO,CAAEI,IAAI,IAAI;AAChC,QAAA,IAAIA,IAAI,CAAC9B,WAAW,KAAKA,WAAW,EAAE;UACpCuB,WAAW,IAAIO,IAAI,CAACC,MAAM,CAAA;AAC3B,SAAA;AACH,OAAC,CAAC,CAAA;AACJ,KAAC,CAAC,CAAA;IAEJ,OAAO;AACL/B,MAAAA,WAAW,EAAEA,WAAW;AACxBU,MAAAA,WAAW,EAAEA,WAAW;AACxBM,MAAAA,eAAe,EAAEA,eAAe;AAChCO,MAAAA,WAAW,EAAEA,WAAW;AACxBC,MAAAA,SAAS,EAAEA,SAAS;AAEpBQ,MAAAA,qBAAqB,EAAEC,QAAQ,CAAChB,yBAAyB,EAAED,eAAe,CAAC;MAC3EkB,eAAe,EAAED,QAAQ,CAACvB,WAAW,CAACK,KAAK,EAAEZ,WAAW,CAAC;MACzDgC,sBAAsB,EAAEF,QAAQ,CAACvB,WAAW,CAACC,OAAO,EAAER,WAAW,CAAC;AAClEiC,MAAAA,eAAe,EAAEH,QAAQ,CAACjB,eAAe,EAAEQ,SAAS,CAAC;AACrDa,MAAAA,gBAAgB,EAAEJ,QAAQ,CAACV,WAAW,EAAEP,eAAe,CAAC;MACxDsB,eAAe,EAAEC,eAAe,CAACtC,4BAA4B,EAAED,WAAW,EAAEkB,eAAe,EAAE,aAAa,CAAC;MAC3GsB,eAAe,EAAED,eAAe,CAACtC,4BAA4B,EAAED,WAAW,EAAEkB,eAAe,EAAE,gBAAgB,CAAC;AAC9GuB,MAAAA,oBAAoB,EAAEC,uBAAuB,CAACzC,4BAA4B,EAAED,WAAW,EAAEkB,eAAe,CAAA;KACzG,CAAA;AACH,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOd,OAAO,CAAA;AAChB,CAAA;AAEA,SAAS6B,QAAQA,CAACU,KAAa,EAAE5B,KAAa,EAAA;EAC5C,OAAO;AACL4B,IAAAA,KAAK,EAAEA,KAAK;AACZ5B,IAAAA,KAAK,EAAEA,KAAK;AACZ6B,IAAAA,KAAK,EAAE7B,KAAK,GAAG4B,KAAK,GAAG5B,KAAK,GAAG,IAAA;GAChC,CAAA;AACH,CAAA;AAEA,SAASwB,eAAeA,CACtBtC,4BAA0D,EAC1DD,WAAmB,EACnBkB,eAAyB,EACzB2B,IAAY,EAAA;AAEZ,EAAA,MAAMC,QAAQ,GAAGrC,GAAG,CAACR,4BAA4B,EAAE,CAACD,WAAW,EAAE6C,IAAI,CAAC,CAAC,IAAI,EAAE,CAAA;EAE7E,MAAME,gBAAgB,GAAGC,OAAO,CAC9B9B,eAAe,CAACZ,GAAG,CAAE2C,aAAa,IAAKxC,GAAG,CAACR,4BAA4B,EAAE,CAACgD,aAAa,EAAEJ,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CACvG,CAAA;AAED,EAAA,OAAOZ,QAAQ,CAACa,QAAQ,CAACjB,MAAM,EAAEiB,QAAQ,CAACjB,MAAM,GAAGkB,gBAAgB,CAAClB,MAAM,CAAC,CAAA;AAC7E,CAAA;AAEA,SAASa,uBAAuBA,CAC9BzC,4BAA0D,EAC1DD,WAAmB,EACnBkB,eAAyB,EAAA;AAEzB,EAAA,MAAMgC,YAAY,GAAGzC,GAAG,CAACR,4BAA4B,EAAE,CAACD,WAAW,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAA;EACpF,MAAMmD,cAAc,GAAGH,OAAO,CAC5B9B,eAAe,CAACZ,GAAG,CAAE2C,aAAa,IAAKxC,GAAG,CAACR,4BAA4B,EAAE,CAACgD,aAAa,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAC1G,CAAA;EAED,MAAMG,cAAc,GAAG,EAAE,CAAA;AAEzB;AACA,EAAA,MAAMC,YAAY,GAAGC,GAAG,CAACJ,YAAY,EAAEC,cAAc,CAAC,CAAA;AACtDE,EAAAA,YAAY,CAAC3B,OAAO,CAAE6B,cAAc,IAAI;AACtC,IAAA,MAAMC,gBAAgB,GAAGC,KAAK,CAACF,cAAc,CAAC,CAAA;AAC9C,IAAA,MAAMG,kBAAkB,GAAGC,IAAI,CAACJ,cAAc,CAAC,CAAA;IAC/C,IAAIC,gBAAgB,IAAIE,kBAAkB,EAAE;MAC1C,MAAME,YAAY,GAAGJ,gBAAgB,CAACK,cAAc,GAAGL,gBAAgB,CAACM,YAAY,CAAA;MACpF,MAAMC,cAAc,GAAGL,kBAAkB,CAACG,cAAc,GAAGH,kBAAkB,CAACI,YAAY,CAAA;MAE1F,IAAIN,gBAAiB,CAAC7B,OAAO,IAAI,CAAC+B,kBAAmB,CAAC/B,OAAO,EAAE;AAC7DyB,QAAAA,cAAc,CAACY,IAAI,CAACR,gBAAgB,CAAC,CAAA;AACtC,OAAA,MAAM,IAAII,YAAY,GAAGG,cAAc,EAAE;AACxCX,QAAAA,cAAc,CAACY,IAAI,CAACR,gBAAgB,CAAC,CAAA;AACtC,OAAA;AACF,KAAA;AACH,GAAC,CAAC,CAAA;EAEF,OAAOvB,QAAQ,CAACmB,cAAc,CAACvB,MAAM,EAAEqB,YAAY,CAACrB,MAAM,CAAC,CAAA;AAC7D;;;;"}