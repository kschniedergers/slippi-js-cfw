{"version":3,"file":"stocks.esm.js","sources":["../../src/stats/stocks.ts"],"sourcesContent":["import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport type { PlayerIndexedType, StockType } from \"./common\";\nimport { didLoseStock, getSinglesPlayerPermutationsFromSettings, isDead } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ntype StockState = {\n  stock?: StockType | null;\n};\n\nexport class StockComputer implements StatComputer<StockType[]> {\n  private state = new Map<PlayerIndexedType, StockState>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private stocks = new Array<StockType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.stocks = [];\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: StockState = {\n        stock: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleStockCompute(allFrames, state, indices, frame, this.stocks);\n      }\n    });\n  }\n\n  public fetch(): StockType[] {\n    return this.stocks;\n  }\n}\n\nfunction handleStockCompute(\n  frames: FramesType,\n  state: StockState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  stocks: StockType[],\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.post : null;\n\n  // If there is currently no active stock, wait until the player is no longer spawning.\n  // Once the player is no longer spawning, start the stock\n  if (!state.stock) {\n    const isPlayerDead = isDead(playerFrame.actionStateId!);\n    if (isPlayerDead) {\n      return;\n    }\n\n    state.stock = {\n      playerIndex: indices.playerIndex,\n      startFrame: currentFrameNumber,\n      endFrame: null,\n      startPercent: 0,\n      endPercent: null,\n      currentPercent: 0,\n      count: playerFrame.stocksRemaining!,\n      deathAnimation: null,\n    };\n\n    stocks.push(state.stock);\n  } else if (prevPlayerFrame && didLoseStock(playerFrame, prevPlayerFrame)) {\n    state.stock.endFrame = playerFrame.frame;\n    state.stock.endPercent = prevPlayerFrame.percent ?? 0;\n    state.stock.deathAnimation = playerFrame.actionStateId;\n    state.stock = null;\n  } else {\n    state.stock.currentPercent = playerFrame.percent ?? 0;\n  }\n}\n"],"names":["StockComputer","constructor","state","Map","playerPermutations","Array","stocks","setup","settings","getSinglesPlayerPermutationsFromSettings","forEach","indices","playerState","stock","set","processFrame","frame","allFrames","get","handleStockCompute","fetch","frames","playerFrame","players","playerIndex","post","currentFrameNumber","prevFrameNumber","prevPlayerFrame","isPlayerDead","isDead","actionStateId","startFrame","endFrame","startPercent","endPercent","currentPercent","count","stocksRemaining","deathAnimation","push","didLoseStock","_prevPlayerFrame$perc","percent","_playerFrame$percent"],"mappings":";;MASaA,aAAa,CAAA;EAAAC,WAAA,GAAA;AAAA,IAAA,IAAA,CAChBC,KAAK,GAAG,IAAIC,GAAG,EAAiC,CAAA;AAAA,IAAA,IAAA,CAChDC,kBAAkB,GAAG,IAAIC,KAAK,EAAqB,CAAA;AAAA,IAAA,IAAA,CACnDC,MAAM,GAAG,IAAID,KAAK,EAAa,CAAA;AAAA,GAAA;EAEhCE,KAAKA,CAACC,QAAuB,EAAA;AAClC;AACA,IAAA,IAAI,CAACN,KAAK,GAAG,IAAIC,GAAG,EAAE,CAAA;AACtB,IAAA,IAAI,CAACC,kBAAkB,GAAGK,wCAAwC,CAACD,QAAQ,CAAC,CAAA;IAC5E,IAAI,CAACF,MAAM,GAAG,EAAE,CAAA;AAEhB,IAAA,IAAI,CAACF,kBAAkB,CAACM,OAAO,CAAEC,OAAO,IAAI;AAC1C,MAAA,MAAMC,WAAW,GAAe;AAC9BC,QAAAA,KAAK,EAAE,IAAA;OACR,CAAA;MACD,IAAI,CAACX,KAAK,CAACY,GAAG,CAACH,OAAO,EAAEC,WAAW,CAAC,CAAA;AACtC,KAAC,CAAC,CAAA;AACJ,GAAA;AAEOG,EAAAA,YAAYA,CAACC,KAAqB,EAAEC,SAAqB,EAAA;AAC9D,IAAA,IAAI,CAACb,kBAAkB,CAACM,OAAO,CAAEC,OAAO,IAAI;MAC1C,MAAMT,KAAK,GAAG,IAAI,CAACA,KAAK,CAACgB,GAAG,CAACP,OAAO,CAAC,CAAA;AACrC,MAAA,IAAIT,KAAK,EAAE;AACTiB,QAAAA,kBAAkB,CAACF,SAAS,EAAEf,KAAK,EAAES,OAAO,EAAEK,KAAK,EAAE,IAAI,CAACV,MAAM,CAAC,CAAA;AAClE,OAAA;AACH,KAAC,CAAC,CAAA;AACJ,GAAA;AAEOc,EAAAA,KAAKA,GAAA;IACV,OAAO,IAAI,CAACd,MAAM,CAAA;AACpB,GAAA;AACD,CAAA;AAED,SAASa,kBAAkBA,CACzBE,MAAkB,EAClBnB,KAAiB,EACjBS,OAA0B,EAC1BK,KAAqB,EACrBV,MAAmB,EAAA;EAEnB,MAAMgB,WAAW,GAAGN,KAAK,CAACO,OAAO,CAACZ,OAAO,CAACa,WAAW,CAAE,CAACC,IAAI,CAAA;AAC5D,EAAA,MAAMC,kBAAkB,GAAGJ,WAAW,CAACN,KAAM,CAAA;AAC7C,EAAA,MAAMW,eAAe,GAAGD,kBAAkB,GAAG,CAAC,CAAA;EAC9C,MAAME,eAAe,GAAGP,MAAM,CAACM,eAAe,CAAC,GAAGN,MAAM,CAACM,eAAe,CAAE,CAACJ,OAAO,CAACZ,OAAO,CAACa,WAAW,CAAE,CAACC,IAAI,GAAG,IAAI,CAAA;AAEpH;AACA;AACA,EAAA,IAAI,CAACvB,KAAK,CAACW,KAAK,EAAE;AAChB,IAAA,MAAMgB,YAAY,GAAGC,MAAM,CAACR,WAAW,CAACS,aAAc,CAAC,CAAA;AACvD,IAAA,IAAIF,YAAY,EAAE;AAChB,MAAA,OAAA;AACD,KAAA;IAED3B,KAAK,CAACW,KAAK,GAAG;MACZW,WAAW,EAAEb,OAAO,CAACa,WAAW;AAChCQ,MAAAA,UAAU,EAAEN,kBAAkB;AAC9BO,MAAAA,QAAQ,EAAE,IAAI;AACdC,MAAAA,YAAY,EAAE,CAAC;AACfC,MAAAA,UAAU,EAAE,IAAI;AAChBC,MAAAA,cAAc,EAAE,CAAC;MACjBC,KAAK,EAAEf,WAAW,CAACgB,eAAgB;AACnCC,MAAAA,cAAc,EAAE,IAAA;KACjB,CAAA;AAEDjC,IAAAA,MAAM,CAACkC,IAAI,CAACtC,KAAK,CAACW,KAAK,CAAC,CAAA;GACzB,MAAM,IAAIe,eAAe,IAAIa,YAAY,CAACnB,WAAW,EAAEM,eAAe,CAAC,EAAE;AAAA,IAAA,IAAAc,qBAAA,CAAA;AACxExC,IAAAA,KAAK,CAACW,KAAK,CAACoB,QAAQ,GAAGX,WAAW,CAACN,KAAK,CAAA;AACxCd,IAAAA,KAAK,CAACW,KAAK,CAACsB,UAAU,GAAAO,CAAAA,qBAAA,GAAGd,eAAe,CAACe,OAAO,KAAAD,IAAAA,GAAAA,qBAAA,GAAI,CAAC,CAAA;AACrDxC,IAAAA,KAAK,CAACW,KAAK,CAAC0B,cAAc,GAAGjB,WAAW,CAACS,aAAa,CAAA;IACtD7B,KAAK,CAACW,KAAK,GAAG,IAAI,CAAA;AACnB,GAAA,MAAM;AAAA,IAAA,IAAA+B,oBAAA,CAAA;AACL1C,IAAAA,KAAK,CAACW,KAAK,CAACuB,cAAc,GAAAQ,CAAAA,oBAAA,GAAGtB,WAAW,CAACqB,OAAO,KAAAC,IAAAA,GAAAA,oBAAA,GAAI,CAAC,CAAA;AACtD,GAAA;AACH;;;;"}