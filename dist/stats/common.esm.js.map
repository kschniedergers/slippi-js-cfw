{"version":3,"file":"common.esm.js","sources":["../../src/stats/common.ts"],"sourcesContent":["import type { GameStartType, PostFrameUpdateType } from \"../types\";\n\nexport type StatsType = {\n  gameComplete: boolean;\n  lastFrame: number;\n  playableFrameCount: number;\n  stocks: StockType[];\n  conversions: ConversionType[];\n  combos: ComboType[];\n  actionCounts: ActionCountsType[];\n  overall: OverallType[];\n};\n\nexport type StadiumStatsType = HomeRunContestResultType | TargetTestResultType;\n\nexport type TargetTestResultType = {\n  type: \"target-test\";\n  targetBreaks: TargetBreakType[];\n};\n\nexport type HomeRunContestResultType = {\n  type: \"home-run-contest\";\n  distance: number;\n  units: \"feet\" | \"meters\";\n};\n\nexport type RatioType = {\n  count: number;\n  total: number;\n  ratio: number | null;\n};\n\nexport type PlayerIndexedType = {\n  playerIndex: number;\n  opponentIndex: number;\n};\n\nexport type DurationType = {\n  startFrame: number;\n  endFrame?: number | null;\n};\n\nexport type DamageType = {\n  startPercent: number;\n  currentPercent: number;\n  endPercent?: number | null;\n};\n\nexport type StockType = DurationType &\n  DamageType & {\n    playerIndex: number;\n    count: number;\n    deathAnimation?: number | null;\n  };\n\nexport type MoveLandedType = {\n  playerIndex: number;\n  frame: number;\n  moveId: number;\n  hitCount: number;\n  damage: number;\n};\n\nexport type ComboType = DurationType &\n  DamageType & {\n    playerIndex: number;\n    moves: MoveLandedType[];\n    didKill: boolean;\n    lastHitBy: number | null;\n  };\n\nexport type TargetBreakType = {\n  spawnId: number;\n  frameDestroyed: number | null;\n  positionX: number;\n  positionY: number;\n};\n\nexport type ConversionType = ComboType & {\n  openingType: string;\n};\n\nexport type ActionCountsType = {\n  playerIndex: number;\n  wavedashCount: number;\n  wavelandCount: number;\n  airDodgeCount: number;\n  dashDanceCount: number;\n  spotDodgeCount: number;\n  ledgegrabCount: number;\n  rollCount: number;\n  lCancelCount: {\n    success: number;\n    fail: number;\n  };\n  attackCount: {\n    jab1: number;\n    jab2: number;\n    jab3: number;\n    jabm: number;\n    dash: number;\n    ftilt: number;\n    utilt: number;\n    dtilt: number;\n    fsmash: number;\n    usmash: number;\n    dsmash: number;\n    nair: number;\n    fair: number;\n    bair: number;\n    uair: number;\n    dair: number;\n  };\n  grabCount: {\n    success: number;\n    fail: number;\n  };\n  throwCount: {\n    up: number;\n    forward: number;\n    back: number;\n    down: number;\n  };\n  groundTechCount: {\n    // tech away/in are in reference to the opponents position and not the stage\n    away: number;\n    in: number;\n    neutral: number;\n    fail: number;\n  };\n  wallTechCount: {\n    success: number;\n    fail: number;\n  };\n};\n\nexport type InputCountsType = {\n  buttons: number;\n  triggers: number;\n  joystick: number;\n  cstick: number;\n  total: number;\n};\n\nexport type OverallType = {\n  playerIndex: number;\n  inputCounts: InputCountsType;\n  conversionCount: number;\n  totalDamage: number;\n  killCount: number;\n  successfulConversions: RatioType;\n  inputsPerMinute: RatioType;\n  digitalInputsPerMinute: RatioType;\n  openingsPerKill: RatioType;\n  damagePerOpening: RatioType;\n  neutralWinRatio: RatioType;\n  counterHitRatio: RatioType;\n  beneficialTradeRatio: RatioType;\n};\n\nexport enum State {\n  // Animation ID ranges\n  DAMAGE_START = 0x4b,\n  DAMAGE_END = 0x5b,\n  CAPTURE_START = 0xdf,\n  CAPTURE_END = 0xe8,\n  GUARD_START = 0xb2,\n  GUARD_END = 0xb6,\n  GROUNDED_CONTROL_START = 0xe,\n  GROUNDED_CONTROL_END = 0x18,\n  SQUAT_START = 0x27,\n  SQUAT_END = 0x29,\n  DOWN_START = 0xb7,\n  DOWN_END = 0xc6,\n  TECH_START = 0xc7,\n  TECH_END = 0xcc,\n  DYING_START = 0x0,\n  DYING_END = 0xa,\n  CONTROLLED_JUMP_START = 0x18,\n  CONTROLLED_JUMP_END = 0x22,\n  GROUND_ATTACK_START = 0x2c,\n  GROUND_ATTACK_END = 0x40,\n  AERIAL_ATTACK_START = 0x41,\n  AERIAL_ATTACK_END = 0x4a,\n  ATTACK_FTILT_START = 0x33,\n  ATTACK_FTILT_END = 0x37,\n  ATTACK_FSMASH_START = 0x3a,\n  ATTACK_FSMASH_END = 0x3e,\n\n  // Animation ID specific\n  ROLL_FORWARD = 0xe9,\n  ROLL_BACKWARD = 0xea,\n  SPOT_DODGE = 0xeb,\n  AIR_DODGE = 0xec,\n  ACTION_WAIT = 0xe,\n  ACTION_DASH = 0x14,\n  ACTION_KNEE_BEND = 0x18,\n  GUARD_ON = 0xb2,\n  TECH_MISS_UP = 0xb7,\n  JAB_RESET_UP = 0xb9,\n  TECH_MISS_DOWN = 0xbf,\n  JAB_RESET_DOWN = 0xc1,\n  NEUTRAL_TECH = 0xc7,\n  FORWARD_TECH = 0xc8,\n  BACKWARD_TECH = 0xc9,\n  WALL_TECH = 0xca,\n  MISSED_WALL_TECH = 0xf7,\n  DASH = 0x14,\n  TURN = 0x12,\n  LANDING_FALL_SPECIAL = 0x2b,\n  JUMP_FORWARD = 0x19,\n  JUMP_BACKWARD = 0x1a,\n  FALL_FORWARD = 0x1e,\n  FALL_BACKWARD = 0x1f,\n  GRAB = 0xd4,\n  DASH_GRAB = 0xd6,\n  GRAB_WAIT = 0xd8,\n  PUMMEL = 0xd9,\n  CLIFF_CATCH = 0xfc,\n  THROW_UP = 0xdd,\n  THROW_FORWARD = 0xdb,\n  THROW_DOWN = 0xde,\n  THROW_BACK = 0xdc,\n  DAMAGE_FALL = 0x26,\n  ATTACK_JAB1 = 0x2c,\n  ATTACK_JAB2 = 0x2d,\n  ATTACK_JAB3 = 0x2e,\n  ATTACK_JABM = 0x2f,\n  ATTACK_DASH = 0x32,\n  ATTACK_UTILT = 0x38,\n  ATTACK_DTILT = 0x39,\n  ATTACK_USMASH = 0x3f,\n  ATTACK_DSMASH = 0x40,\n  AERIAL_NAIR = 0x41,\n  AERIAL_FAIR = 0x42,\n  AERIAL_BAIR = 0x43,\n  AERIAL_UAIR = 0x44,\n  AERIAL_DAIR = 0x45,\n\n  // Weird GnW IDs\n  GNW_JAB1 = 0x155,\n  GNW_JABM = 0x156,\n  GNW_DTILT = 0x159,\n  GNW_FSMASH = 0x15a,\n  GNW_NAIR = 0x15b,\n  GNW_BAIR = 0x15c,\n  GNW_UAIR = 0x15d,\n\n  // Peach FSMASH ID\n  // FSMASH1 = Golf Club, FSMASH2 = Frying Pan, FSMASH3 = Tennis Racket\n  PEACH_FSMASH1 = 0x15d,\n  PEACH_FSMASH2 = 0x15e,\n  PEACH_FSMASH3 = 0x15f,\n\n  // Command Grabs\n  BARREL_WAIT = 0x125,\n  COMMAND_GRAB_RANGE1_START = 0x10a,\n  COMMAND_GRAB_RANGE1_END = 0x130,\n\n  COMMAND_GRAB_RANGE2_START = 0x147,\n  COMMAND_GRAB_RANGE2_END = 0x152,\n}\n\nexport const Timers = {\n  PUNISH_RESET_FRAMES: 45,\n  RECOVERY_RESET_FRAMES: 45,\n  COMBO_STRING_RESET_FRAMES: 45,\n};\n\nexport function getSinglesPlayerPermutationsFromSettings(settings: GameStartType): PlayerIndexedType[] {\n  if (!settings || settings.players.length !== 2) {\n    // Only return opponent indices for singles\n    return [];\n  }\n\n  return [\n    {\n      playerIndex: settings.players[0]!.playerIndex,\n      opponentIndex: settings.players[1]!.playerIndex,\n    },\n    {\n      playerIndex: settings.players[1]!.playerIndex,\n      opponentIndex: settings.players[0]!.playerIndex,\n    },\n  ];\n}\n\nexport function didLoseStock(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): boolean {\n  if (!frame || !prevFrame) {\n    return false;\n  }\n\n  return prevFrame.stocksRemaining! - frame.stocksRemaining! > 0;\n}\n\nexport function isInControl(state: number): boolean {\n  const ground = state >= State.GROUNDED_CONTROL_START && state <= State.GROUNDED_CONTROL_END;\n  const squat = state >= State.SQUAT_START && state <= State.SQUAT_END;\n  const groundAttack = state > State.GROUND_ATTACK_START && state <= State.GROUND_ATTACK_END;\n  const isGrab = state === State.GRAB;\n  // TODO: Add grounded b moves?\n  return ground || squat || groundAttack || isGrab;\n}\n\nexport function isTeching(state: number): boolean {\n  return state >= State.TECH_START && state <= State.TECH_END;\n}\n\nexport function isDown(state: number): boolean {\n  return state >= State.DOWN_START && state <= State.DOWN_END;\n}\n\nexport function isDamaged(state: number): boolean {\n  return (\n    (state >= State.DAMAGE_START && state <= State.DAMAGE_END) ||\n    state === State.DAMAGE_FALL ||\n    state === State.JAB_RESET_UP ||\n    state === State.JAB_RESET_DOWN\n  );\n}\n\nexport function isGrabbed(state: number): boolean {\n  return state >= State.CAPTURE_START && state <= State.CAPTURE_END;\n}\n\n// TODO: Find better implementation of 3 seperate ranges\nexport function isCommandGrabbed(state: number): boolean {\n  return (\n    ((state >= State.COMMAND_GRAB_RANGE1_START && state <= State.COMMAND_GRAB_RANGE1_END) ||\n      (state >= State.COMMAND_GRAB_RANGE2_START && state <= State.COMMAND_GRAB_RANGE2_END)) &&\n    state !== State.BARREL_WAIT\n  );\n}\n\nexport function isDead(state: number): boolean {\n  return state >= State.DYING_START && state <= State.DYING_END;\n}\n\nexport function calcDamageTaken(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): number {\n  const percent = frame.percent ?? 0;\n  const prevPercent = prevFrame.percent ?? 0;\n\n  return percent - prevPercent;\n}\n"],"names":["State","Timers","PUNISH_RESET_FRAMES","RECOVERY_RESET_FRAMES","COMBO_STRING_RESET_FRAMES","getSinglesPlayerPermutationsFromSettings","settings","players","length","playerIndex","opponentIndex","didLoseStock","frame","prevFrame","stocksRemaining","isInControl","state","ground","GROUNDED_CONTROL_START","GROUNDED_CONTROL_END","squat","SQUAT_START","SQUAT_END","groundAttack","GROUND_ATTACK_START","GROUND_ATTACK_END","isGrab","GRAB","isTeching","TECH_START","TECH_END","isDown","DOWN_START","DOWN_END","isDamaged","DAMAGE_START","DAMAGE_END","DAMAGE_FALL","JAB_RESET_UP","JAB_RESET_DOWN","isGrabbed","CAPTURE_START","CAPTURE_END","isCommandGrabbed","COMMAND_GRAB_RANGE1_START","COMMAND_GRAB_RANGE1_END","COMMAND_GRAB_RANGE2_START","COMMAND_GRAB_RANGE2_END","BARREL_WAIT","isDead","DYING_START","DYING_END","calcDamageTaken","_frame$percent","_prevFrame$percent","percent","prevPercent"],"mappings":"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"}