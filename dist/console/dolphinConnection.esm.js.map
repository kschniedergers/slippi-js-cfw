{"version":3,"file":"dolphinConnection.esm.js","sources":["../../src/console/dolphinConnection.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\n\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nconst MAX_PEERS = 32;\n\nexport enum DolphinMessageType {\n  CONNECT_REPLY = \"connect_reply\",\n  GAME_EVENT = \"game_event\",\n  START_GAME = \"start_game\",\n  END_GAME = \"end_game\",\n}\n\nexport class DolphinConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private gameCursor = 0;\n  private nickname = \"unknown\";\n  private version = \"\";\n  private peer: any | null = null;\n\n  public constructor() {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  public getDetails(): ConnectionDetails {\n    return {\n      consoleNick: this.nickname,\n      gameDataCursor: this.gameCursor,\n      version: this.version,\n    };\n  }\n\n  public async connect(ip: string, port: number): Promise<void> {\n    console.log(`Connecting to: ${ip}:${port}`);\n    this.ipAddress = ip;\n    this.port = port;\n\n    const enet = await import(\"enet\");\n    // Create the enet client\n    const client = enet.createClient({ peers: MAX_PEERS, channels: 3, down: 0, up: 0 }, (err) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n\n    this.peer = client.connect(\n      {\n        address: this.ipAddress,\n        port: this.port,\n      },\n      3,\n      1337, // Data to send, not sure what this is or what this represents\n      (err: any, newPeer: any) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        newPeer.ping();\n        this.emit(ConnectionEvent.CONNECT);\n        this._setStatus(ConnectionStatus.CONNECTED);\n      },\n    );\n\n    this.peer.on(\"connect\", () => {\n      // Reset the game cursor to the beginning of the game. Do we need to do this or\n      // should it just continue from where it left off?\n      this.gameCursor = 0;\n\n      const request = {\n        type: \"connect_request\",\n        cursor: this.gameCursor,\n      };\n      const packet = new enet.Packet(JSON.stringify(request), enet.PACKET_FLAG.RELIABLE);\n      this.peer.send(0, packet);\n    });\n\n    this.peer.on(\"message\", (packet: any) => {\n      const data = packet.data();\n      if (data.length === 0) {\n        return;\n      }\n\n      const dataString = data.toString(\"ascii\");\n      const message = JSON.parse(dataString);\n      const { dolphin_closed } = message;\n      if (dolphin_closed) {\n        // We got a disconnection request\n        this.disconnect();\n        return;\n      }\n      this.emit(ConnectionEvent.MESSAGE, message);\n      switch (message.type) {\n        case DolphinMessageType.CONNECT_REPLY:\n          this.connectionStatus = ConnectionStatus.CONNECTED;\n          this.gameCursor = message.cursor;\n          this.nickname = message.nick;\n          this.version = message.version;\n          this.emit(ConnectionEvent.HANDSHAKE, this.getDetails());\n          break;\n        case DolphinMessageType.GAME_EVENT: {\n          const { payload } = message;\n          //TODO: remove after game start and end messages have been in stable Ishii for a bit\n          if (!payload) {\n            // We got a disconnection request\n            this.disconnect();\n            return;\n          }\n\n          this._updateCursor(message, dataString);\n\n          const gameData = Buffer.from(payload, \"base64\");\n          this._handleReplayData(gameData);\n          break;\n        }\n        case DolphinMessageType.START_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n        case DolphinMessageType.END_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n      }\n    });\n\n    this.peer.on(\"disconnect\", () => {\n      this.disconnect();\n    });\n\n    this._setStatus(ConnectionStatus.CONNECTING);\n  }\n\n  public disconnect(): void {\n    if (this.peer) {\n      this.peer.disconnect();\n      this.peer = null;\n    }\n    this._setStatus(ConnectionStatus.DISCONNECTED);\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n\n  private _updateCursor(message: { cursor: number; next_cursor: number }, dataString: string): void {\n    const { cursor, next_cursor } = message;\n\n    if (this.gameCursor !== cursor) {\n      const err = new Error(\n        `Unexpected game data cursor. Expected: ${this.gameCursor} but got: ${cursor}. Payload: ${dataString}`,\n      );\n      console.warn(err);\n      this.emit(ConnectionEvent.ERROR, err);\n    }\n\n    this.gameCursor = next_cursor;\n  }\n}\n"],"names":["MAX_PEERS","DolphinMessageType","DolphinConnection","EventEmitter","constructor","ipAddress","port","connectionStatus","ConnectionStatus","DISCONNECTED","gameCursor","nickname","version","peer","Ports","DEFAULT","getStatus","getSettings","getDetails","consoleNick","gameDataCursor","connect","ip","console","log","enet","client","createClient","peers","channels","down","up","err","error","address","newPeer","ping","emit","ConnectionEvent","CONNECT","_setStatus","CONNECTED","on","request","type","cursor","packet","Packet","JSON","stringify","PACKET_FLAG","RELIABLE","send","data","length","dataString","toString","message","parse","dolphin_closed","disconnect","MESSAGE","CONNECT_REPLY","nick","HANDSHAKE","GAME_EVENT","payload","_updateCursor","gameData","Buffer","from","_handleReplayData","START_GAME","END_GAME","CONNECTING","DATA","status","STATUS_CHANGE","next_cursor","Error","warn","ERROR"],"mappings":"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"}