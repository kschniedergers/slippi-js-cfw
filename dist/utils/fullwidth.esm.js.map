{"version":3,"file":"fullwidth.esm.js","sources":["../../src/utils/fullwidth.ts"],"sourcesContent":["import map from \"lodash/map\";\n\nexport function toHalfwidth(str: string): string {\n  // Converts a fullwidth character to halfwidth\n  const convertChar = (charCode: number): number => {\n    /**\n     * Standard full width encodings\n     * https://en.wikipedia.org/wiki/Halfwidth_and_Fullwidth_Forms_(Unicode_block)\n     */\n    if (charCode > 0xff00 && charCode < 0xff5f) {\n      return 0x0020 + (charCode - 0xff00);\n    }\n\n    // space:\n    if (charCode === 0x3000) {\n      return 0x0020;\n    }\n\n    /**\n     * Exceptions found in Melee/Japanese keyboards\n     */\n    // single quote: '\n    if (charCode === 0x2019) {\n      return 0x0027;\n    }\n\n    // double quote: \"\n    if (charCode === 0x201d) {\n      return 0x0022;\n    }\n\n    return charCode;\n  };\n\n  const ret = map(str, (char) => convertChar(char.charCodeAt(0)));\n\n  return String.fromCharCode(...ret);\n}\n"],"names":["toHalfwidth","str","convertChar","charCode","ret","map","char","charCodeAt","String","fromCharCode"],"mappings":";;AAEM,SAAUA,WAAWA,CAACC,GAAW,EAAA;AACrC;EACA,MAAMC,WAAW,GAAIC,QAAgB,IAAY;AAC/C;;;AAGG;AACH,IAAA,IAAIA,QAAQ,GAAG,MAAM,IAAIA,QAAQ,GAAG,MAAM,EAAE;AAC1C,MAAA,OAAO,MAAM,IAAIA,QAAQ,GAAG,MAAM,CAAC,CAAA;AACpC,KAAA;AAED;IACA,IAAIA,QAAQ,KAAK,MAAM,EAAE;AACvB,MAAA,OAAO,MAAM,CAAA;AACd,KAAA;AAED;;AAEG;AACH;IACA,IAAIA,QAAQ,KAAK,MAAM,EAAE;AACvB,MAAA,OAAO,MAAM,CAAA;AACd,KAAA;AAED;IACA,IAAIA,QAAQ,KAAK,MAAM,EAAE;AACvB,MAAA,OAAO,MAAM,CAAA;AACd,KAAA;AAED,IAAA,OAAOA,QAAQ,CAAA;GAChB,CAAA;AAED,EAAA,MAAMC,GAAG,GAAGC,GAAG,CAACJ,GAAG,EAAGK,IAAI,IAAKJ,WAAW,CAACI,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAE/D,EAAA,OAAOC,MAAM,CAACC,YAAY,CAAC,GAAGL,GAAG,CAAC,CAAA;AACpC;;;;"}