{"version":3,"file":"slpParser.esm.js","sources":["../../src/utils/slpParser.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport get from \"lodash/get\";\nimport keyBy from \"lodash/keyBy\";\nimport set from \"lodash/set\";\nimport semver from \"semver\";\n\nimport type {\n  EnabledItemType,\n  FrameBookendType,\n  FrameEntryType,\n  FrameStartType,\n  FramesType,\n  GameEndType,\n  GameStartType,\n  GeckoListType,\n  ItemUpdateType,\n  PostFrameUpdateType,\n  PreFrameUpdateType,\n  RollbackFrames,\n} from \"../types\";\nimport { ItemSpawnType } from \"../types\";\nimport { Command, Frames, GameMode } from \"../types\";\nimport { exists } from \"./exists\";\nimport { RollbackCounter } from \"./rollbackCounter\";\n\n// There are 5 bytes of item bitfields that can be enabled\nconst ITEM_SETTINGS_BIT_COUNT = 40;\nexport const MAX_ROLLBACK_FRAMES = 7;\n\nexport enum SlpParserEvent {\n  SETTINGS = \"settings\",\n  END = \"end\",\n  FRAME = \"frame\", // Emitted for every frame\n  FINALIZED_FRAME = \"finalized-frame\", // Emitted for only finalized frames\n  ROLLBACK_FRAME = \"rollback-frame\", // Emitted if a frame is being replaced\n}\n\n// If strict mode is on, we will do strict validation checking\n// which could throw errors on invalid data.\n// Default to false though since probably only real time applications\n// would care about valid data.\nconst defaultSlpParserOptions = {\n  strict: false,\n};\n\nexport type SlpParserOptions = typeof defaultSlpParserOptions;\n\nexport class SlpParser extends EventEmitter {\n  private frames: FramesType = {};\n  private rollbackCounter: RollbackCounter = new RollbackCounter();\n  private settings: GameStartType | null = null;\n  private gameEnd: GameEndType | null = null;\n  private latestFrameIndex: number | null = null;\n  private settingsComplete = false;\n  private lastFinalizedFrame = Frames.FIRST - 1;\n  private options: SlpParserOptions;\n  private geckoList: GeckoListType | null = null;\n\n  public constructor(options?: Partial<SlpParserOptions>) {\n    super();\n    this.options = Object.assign({}, defaultSlpParserOptions, options);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public handleCommand(command: Command, payload: any): void {\n    switch (command) {\n      case Command.GAME_START:\n        this._handleGameStart(payload as GameStartType);\n        break;\n      case Command.FRAME_START:\n        this._handleFrameStart(payload as FrameStartType);\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // We need to handle the post frame update first since that\n        // will finalize the settings object, before we fire the frame update\n        this._handlePostFrameUpdate(payload as PostFrameUpdateType);\n        this._handleFrameUpdate(command, payload as PostFrameUpdateType);\n        break;\n      case Command.PRE_FRAME_UPDATE:\n        this._handleFrameUpdate(command, payload as PreFrameUpdateType);\n        break;\n      case Command.ITEM_UPDATE:\n        this._handleItemUpdate(payload as ItemUpdateType);\n        break;\n      case Command.FRAME_BOOKEND:\n        this._handleFrameBookend(payload as FrameBookendType);\n        break;\n      case Command.GAME_END:\n        this._handleGameEnd(payload as GameEndType);\n        break;\n      case Command.GECKO_LIST:\n        this._handleGeckoList(payload as GeckoListType);\n        break;\n    }\n  }\n\n  /**\n   * Resets the parser state to their default values.\n   */\n  public reset(): void {\n    this.frames = {};\n    this.settings = null;\n    this.gameEnd = null;\n    this.latestFrameIndex = null;\n    this.settingsComplete = false;\n    this.lastFinalizedFrame = Frames.FIRST - 1;\n  }\n\n  public getLatestFrameNumber(): number {\n    return this.latestFrameIndex ?? Frames.FIRST - 1;\n  }\n\n  public getPlayableFrameCount(): number {\n    if (this.latestFrameIndex === null) {\n      return 0;\n    }\n    return this.latestFrameIndex < Frames.FIRST_PLAYABLE ? 0 : this.latestFrameIndex - Frames.FIRST_PLAYABLE;\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    // return this.playerFrames[this.latestFrameIndex];\n\n    // TODO: Modify this to check if we actually have all the latest frame data and return that\n    // TODO: If we do. For now I'm just going to take a shortcut\n    const allFrames = this.getFrames();\n    const frameIndex = this.latestFrameIndex !== null ? this.latestFrameIndex : Frames.FIRST;\n    const indexToUse = this.gameEnd ? frameIndex : frameIndex - 1;\n    return get(allFrames, indexToUse) || null;\n  }\n\n  public getSettings(): GameStartType | null {\n    return this.settingsComplete ? this.settings : null;\n  }\n\n  public getItems(): EnabledItemType[] | null {\n    if (this.settings?.itemSpawnBehavior === ItemSpawnType.OFF) {\n      return null;\n    }\n\n    const itemBitfield = this.settings?.enabledItems;\n    if (!exists(itemBitfield)) {\n      return null;\n    }\n\n    const enabledItems: EnabledItemType[] = [];\n\n    // Ideally we would be able to do this with bitshifting instead, but javascript\n    // truncates numbers after 32 bits when doing bitwise operations\n    for (let i = 0; i < ITEM_SETTINGS_BIT_COUNT; i++) {\n      if (Math.floor(itemBitfield / 2 ** i) & 1) {\n        enabledItems.push(2 ** i);\n      }\n    }\n\n    return enabledItems;\n  }\n\n  public getGameEnd(): GameEndType | null {\n    return this.gameEnd;\n  }\n\n  public getFrames(): FramesType {\n    return this.frames;\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    return {\n      frames: this.rollbackCounter.getFrames(),\n      count: this.rollbackCounter.getCount(),\n      lengths: this.rollbackCounter.getLengths(),\n    };\n  }\n\n  public getFrame(num: number): FrameEntryType | null {\n    return this.frames[num] || null;\n  }\n\n  public getGeckoList(): GeckoListType | null {\n    return this.geckoList;\n  }\n\n  private _handleGeckoList(payload: GeckoListType): void {\n    this.geckoList = payload;\n  }\n\n  private _handleGameEnd(payload: GameEndType): void {\n    // Finalize remaining frames if necessary\n    if (this.latestFrameIndex !== null && this.latestFrameIndex !== this.lastFinalizedFrame) {\n      this._finalizeFrames(this.latestFrameIndex);\n    }\n\n    this.gameEnd = payload;\n    this.emit(SlpParserEvent.END, this.gameEnd);\n  }\n\n  private _handleGameStart(payload: GameStartType): void {\n    this.settings = payload;\n    const players = payload.players;\n    this.settings.players = players.filter((player) => player.type !== 3);\n\n    // Check to see if the file was created after the sheik fix so we know\n    // we don't have to process the first frame of the game for the full settings\n    if (payload.slpVersion && semver.gte(payload.slpVersion, \"1.6.0\")) {\n      this._completeSettings();\n    }\n  }\n\n  private _handleFrameStart(payload: FrameStartType): void {\n    const currentFrameNumber = payload.frame!;\n\n    set(this.frames, [currentFrameNumber, \"start\"], payload);\n  }\n\n  private _handlePostFrameUpdate(payload: PostFrameUpdateType): void {\n    if (this.settingsComplete) {\n      return;\n    }\n\n    // Finish calculating settings\n    if (payload.frame! <= Frames.FIRST) {\n      const playerIndex = payload.playerIndex!;\n      const playersByIndex = keyBy(this.settings!.players, \"playerIndex\");\n\n      switch (payload.internalCharacterId) {\n        case 0x7:\n          playersByIndex[playerIndex]!.characterId = 0x13; // Sheik\n          break;\n        case 0x13:\n          playersByIndex[playerIndex]!.characterId = 0x12; // Zelda\n          break;\n      }\n    }\n    if (payload.frame! > Frames.FIRST) {\n      this._completeSettings();\n    }\n  }\n\n  private _handleFrameUpdate(command: Command, payload: PreFrameUpdateType | PostFrameUpdateType): void {\n    const location = command === Command.PRE_FRAME_UPDATE ? \"pre\" : \"post\";\n    const field = payload.isFollower ? \"followers\" : \"players\";\n    const currentFrameNumber = payload.frame!;\n    this.latestFrameIndex = currentFrameNumber;\n    if (location === \"pre\" && !payload.isFollower) {\n      const currentFrame = this.frames[currentFrameNumber];\n      const wasRolledback = this.rollbackCounter.checkIfRollbackFrame(currentFrame, payload.playerIndex!);\n      if (wasRolledback) {\n        // frame is about to be overwritten\n        this.emit(SlpParserEvent.ROLLBACK_FRAME, currentFrame);\n      }\n    }\n    set(this.frames, [currentFrameNumber, field, payload.playerIndex!, location], payload);\n    set(this.frames, [currentFrameNumber, \"frame\"], currentFrameNumber);\n\n    // If file is from before frame bookending, add frame to stats computer here. Does a little\n    // more processing than necessary, but it works\n    const settings = this.getSettings();\n    if (settings && (!settings.slpVersion || semver.lte(settings.slpVersion, \"2.2.0\"))) {\n      this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n      // Finalize the previous frame since no bookending exists\n      this._finalizeFrames(currentFrameNumber - 1);\n    } else {\n      set(this.frames, [currentFrameNumber, \"isTransferComplete\"], false);\n    }\n  }\n\n  private _handleItemUpdate(payload: ItemUpdateType): void {\n    const currentFrameNumber = payload.frame!;\n    const items = this.frames[currentFrameNumber]?.items ?? [];\n    items.push(payload);\n\n    // Set items with newest\n    set(this.frames, [currentFrameNumber, \"items\"], items);\n  }\n\n  private _handleFrameBookend(payload: FrameBookendType): void {\n    const latestFinalizedFrame = payload.latestFinalizedFrame!;\n    const currentFrameNumber = payload.frame!;\n    set(this.frames, [currentFrameNumber, \"isTransferComplete\"], true);\n    // Fire off a normal frame event\n    this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n\n    // Finalize frames if necessary\n    const validLatestFrame = this.settings!.gameMode === GameMode.ONLINE;\n    if (validLatestFrame && latestFinalizedFrame >= Frames.FIRST) {\n      // Ensure valid latestFinalizedFrame\n      if (this.options.strict && latestFinalizedFrame < currentFrameNumber - MAX_ROLLBACK_FRAMES) {\n        throw new Error(`latestFinalizedFrame should be within ${MAX_ROLLBACK_FRAMES} frames of ${currentFrameNumber}`);\n      }\n      this._finalizeFrames(latestFinalizedFrame);\n    } else {\n      // Since we don't have a valid finalized frame, just finalize the frame based on MAX_ROLLBACK_FRAMES\n      this._finalizeFrames(currentFrameNumber - MAX_ROLLBACK_FRAMES);\n    }\n  }\n\n  /**\n   * Fires off the FINALIZED_FRAME event for frames up until a certain number\n   * @param num The frame to finalize until\n   */\n  private _finalizeFrames(num: number): void {\n    while (this.lastFinalizedFrame < num) {\n      const frameToFinalize = this.lastFinalizedFrame + 1;\n      const frame = this.getFrame(frameToFinalize)!;\n\n      // Check that we have all the pre and post frame data for all players if we're in strict mode\n      if (this.options.strict) {\n        for (const player of this.settings!.players) {\n          const playerFrameInfo = frame.players[player.playerIndex];\n          // Allow player frame info to be empty in non 1v1 games since\n          // players which have been defeated will have no frame info.\n          if (this.settings!.players.length > 2 && !playerFrameInfo) {\n            continue;\n          }\n\n          const { pre, post } = playerFrameInfo!;\n          if (!pre || !post) {\n            const preOrPost = pre ? \"pre\" : \"post\";\n            throw new Error(\n              `Could not finalize frame ${frameToFinalize} of ${num}: missing ${preOrPost}-frame update for player ${player.playerIndex}`,\n            );\n          }\n        }\n      }\n\n      // Our frame is complete so finalize the frame\n      this.emit(SlpParserEvent.FINALIZED_FRAME, frame);\n      this.lastFinalizedFrame = frameToFinalize;\n    }\n  }\n\n  private _completeSettings(): void {\n    if (!this.settingsComplete) {\n      this.settingsComplete = true;\n      this.emit(SlpParserEvent.SETTINGS, this.settings);\n    }\n  }\n}\n"],"names":["ITEM_SETTINGS_BIT_COUNT","MAX_ROLLBACK_FRAMES","SlpParserEvent","defaultSlpParserOptions","strict","SlpParser","EventEmitter","constructor","options","frames","rollbackCounter","RollbackCounter","settings","gameEnd","latestFrameIndex","settingsComplete","lastFinalizedFrame","Frames","FIRST","geckoList","Object","assign","handleCommand","command","payload","Command","GAME_START","_handleGameStart","FRAME_START","_handleFrameStart","POST_FRAME_UPDATE","_handlePostFrameUpdate","_handleFrameUpdate","PRE_FRAME_UPDATE","ITEM_UPDATE","_handleItemUpdate","FRAME_BOOKEND","_handleFrameBookend","GAME_END","_handleGameEnd","GECKO_LIST","_handleGeckoList","reset","getLatestFrameNumber","_this$latestFrameInde","getPlayableFrameCount","FIRST_PLAYABLE","getLatestFrame","allFrames","getFrames","frameIndex","indexToUse","get","getSettings","getItems","_this$settings","_this$settings2","itemSpawnBehavior","ItemSpawnType","OFF","itemBitfield","enabledItems","exists","i","Math","floor","push","getGameEnd","getRollbackFrames","count","getCount","lengths","getLengths","getFrame","num","getGeckoList","_finalizeFrames","emit","END","players","filter","player","type","slpVersion","semver","gte","_completeSettings","currentFrameNumber","frame","set","playerIndex","playersByIndex","keyBy","internalCharacterId","characterId","location","field","isFollower","currentFrame","wasRolledback","checkIfRollbackFrame","ROLLBACK_FRAME","lte","FRAME","_this$frames$currentF","_this$frames$currentF2","items","latestFinalizedFrame","validLatestFrame","gameMode","GameMode","ONLINE","Error","frameToFinalize","playerFrameInfo","length","pre","post","preOrPost","FINALIZED_FRAME","SETTINGS"],"mappings":"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"}