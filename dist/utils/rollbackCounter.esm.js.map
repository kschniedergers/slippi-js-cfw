{"version":3,"file":"rollbackCounter.esm.js","sources":["../../src/utils/rollbackCounter.ts"],"sourcesContent":["import type { FrameEntryType, RollbackFramesType } from \"../types\";\n\nexport class RollbackCounter {\n  private rollbackFrames: RollbackFramesType = {};\n  private rollbackFrameCount = 0;\n  private rollbackPlayerIdx: number | null = null; // for keeping track of rollbacks by following a single player\n  private lastFrameWasRollback = false;\n  private currentRollbackLength = 0;\n  private rollbackLengths: number[] = [];\n\n  public checkIfRollbackFrame(currentFrame: FrameEntryType | undefined, playerIdx: number) {\n    if (this.rollbackPlayerIdx === null) {\n      // we only want to follow a single player to avoid double counting. So we use whoever is on first.\n      this.rollbackPlayerIdx = playerIdx;\n    } else if (this.rollbackPlayerIdx !== playerIdx) {\n      return;\n    }\n\n    if (currentFrame && currentFrame.players) {\n      // frame already exists for currentFrameNumber so we must be rolling back\n      // Note: We detect during PreFrameUpdate, but new versions have a\n      // FrameStart command that has already initialized the frame, so we must\n      // check for player data too.\n      if (this.rollbackFrames[currentFrame.frame]) {\n        this.rollbackFrames[currentFrame.frame]!.push(currentFrame);\n      } else {\n        this.rollbackFrames[currentFrame.frame] = [currentFrame];\n      }\n      this.rollbackFrameCount++;\n      this.currentRollbackLength++;\n      this.lastFrameWasRollback = true;\n    } else if (this.lastFrameWasRollback) {\n      this.rollbackLengths.push(this.currentRollbackLength);\n      this.currentRollbackLength = 0;\n      this.lastFrameWasRollback = false;\n    }\n    return this.lastFrameWasRollback;\n  }\n\n  public getFrames() {\n    return this.rollbackFrames;\n  }\n\n  public getCount() {\n    return this.rollbackFrameCount;\n  }\n\n  public getLengths() {\n    return this.rollbackLengths;\n  }\n}\n"],"names":["RollbackCounter","constructor","rollbackFrames","rollbackFrameCount","rollbackPlayerIdx","lastFrameWasRollback","currentRollbackLength","rollbackLengths","checkIfRollbackFrame","currentFrame","playerIdx","players","frame","push","getFrames","getCount","getLengths"],"mappings":"MAEaA,eAAe,CAAA;EAAAC,WAAA,GAAA;IAAA,IAClBC,CAAAA,cAAc,GAAuB,EAAE,CAAA;IAAA,IACvCC,CAAAA,kBAAkB,GAAG,CAAC,CAAA;IAAA,IACtBC,CAAAA,iBAAiB,GAAkB,IAAI,CAAA;AAAE;IAAA,IACzCC,CAAAA,oBAAoB,GAAG,KAAK,CAAA;IAAA,IAC5BC,CAAAA,qBAAqB,GAAG,CAAC,CAAA;IAAA,IACzBC,CAAAA,eAAe,GAAa,EAAE,CAAA;AAAA,GAAA;AAE/BC,EAAAA,oBAAoBA,CAACC,YAAwC,EAAEC,SAAiB,EAAA;AACrF,IAAA,IAAI,IAAI,CAACN,iBAAiB,KAAK,IAAI,EAAE;AACnC;MACA,IAAI,CAACA,iBAAiB,GAAGM,SAAS,CAAA;AACnC,KAAA,MAAM,IAAI,IAAI,CAACN,iBAAiB,KAAKM,SAAS,EAAE;AAC/C,MAAA,OAAA;AACD,KAAA;AAED,IAAA,IAAID,YAAY,IAAIA,YAAY,CAACE,OAAO,EAAE;AACxC;AACA;AACA;AACA;MACA,IAAI,IAAI,CAACT,cAAc,CAACO,YAAY,CAACG,KAAK,CAAC,EAAE;QAC3C,IAAI,CAACV,cAAc,CAACO,YAAY,CAACG,KAAK,CAAE,CAACC,IAAI,CAACJ,YAAY,CAAC,CAAA;AAC5D,OAAA,MAAM;QACL,IAAI,CAACP,cAAc,CAACO,YAAY,CAACG,KAAK,CAAC,GAAG,CAACH,YAAY,CAAC,CAAA;AACzD,OAAA;MACD,IAAI,CAACN,kBAAkB,EAAE,CAAA;MACzB,IAAI,CAACG,qBAAqB,EAAE,CAAA;MAC5B,IAAI,CAACD,oBAAoB,GAAG,IAAI,CAAA;AACjC,KAAA,MAAM,IAAI,IAAI,CAACA,oBAAoB,EAAE;MACpC,IAAI,CAACE,eAAe,CAACM,IAAI,CAAC,IAAI,CAACP,qBAAqB,CAAC,CAAA;MACrD,IAAI,CAACA,qBAAqB,GAAG,CAAC,CAAA;MAC9B,IAAI,CAACD,oBAAoB,GAAG,KAAK,CAAA;AAClC,KAAA;IACD,OAAO,IAAI,CAACA,oBAAoB,CAAA;AAClC,GAAA;AAEOS,EAAAA,SAASA,GAAA;IACd,OAAO,IAAI,CAACZ,cAAc,CAAA;AAC5B,GAAA;AAEOa,EAAAA,QAAQA,GAAA;IACb,OAAO,IAAI,CAACZ,kBAAkB,CAAA;AAChC,GAAA;AAEOa,EAAAA,UAAUA,GAAA;IACf,OAAO,IAAI,CAACT,eAAe,CAAA;AAC7B,GAAA;AACD;;;;"}