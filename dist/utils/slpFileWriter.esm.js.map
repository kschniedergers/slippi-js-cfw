{"version":3,"file":"slpFileWriter.esm.js","sources":["../../src/utils/slpFileWriter.ts"],"sourcesContent":["import { format } from \"date-fns\";\nimport path from \"path\";\nimport type { WritableOptions } from \"stream\";\n\nimport { Command } from \"../types\";\nimport { SlpFile } from \"./slpFile\";\nimport type { SlpRawEventPayload, SlpStreamSettings } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent } from \"./slpStream\";\n\n/**\n * The default function to use for generating new SLP files.\n */\nfunction getNewFilePath(folder: string, date: Date): string {\n  return path.join(folder, `Game_${format(date, \"yyyyMMdd\")}T${format(date, \"HHmmss\")}.slp`);\n}\n\nexport type SlpFileWriterOptions = Partial<SlpStreamSettings> & {\n  outputFiles: boolean;\n  folderPath: string;\n  consoleNickname: string;\n  newFilename: (folder: string, startTime: Date) => string;\n};\n\nconst defaultSettings: SlpFileWriterOptions = {\n  outputFiles: true,\n  folderPath: \".\",\n  consoleNickname: \"unknown\",\n  newFilename: getNewFilePath,\n};\n\nexport enum SlpFileWriterEvent {\n  NEW_FILE = \"new-file\",\n  FILE_COMPLETE = \"file-complete\",\n}\n\n/**\n * SlpFileWriter lets us not only emit events as an SlpStream but also\n * writes the data that is being passed in to an SLP file. Use this if\n * you want to process Slippi data in real time but also want to be able\n * to write out the data to an SLP file.\n *\n * @export\n * @class SlpFileWriter\n * @extends {SlpStream}\n */\nexport class SlpFileWriter extends SlpStream {\n  private currentFile: SlpFile | null = null;\n  private options: SlpFileWriterOptions;\n\n  /**\n   * Creates an instance of SlpFileWriter.\n   */\n  public constructor(options?: Partial<SlpFileWriterOptions>, opts?: WritableOptions) {\n    super(options, opts);\n    this.options = Object.assign({}, defaultSettings, options);\n    this._setupListeners();\n  }\n\n  private _writePayload(payload: Buffer): void {\n    // Write data to the current file\n    if (this.currentFile) {\n      this.currentFile.write(payload);\n    }\n  }\n\n  private _setupListeners(): void {\n    this.on(SlpStreamEvent.RAW, (data: SlpRawEventPayload) => {\n      const { command, payload } = data;\n      switch (command) {\n        case Command.MESSAGE_SIZES:\n          // Create the new game first before writing the payload\n          this._handleNewGame();\n          this._writePayload(payload);\n          break;\n        case Command.GAME_END:\n          // Write payload first before ending the game\n          this._writePayload(payload);\n          this._handleEndGame();\n          break;\n        default:\n          this._writePayload(payload);\n          break;\n      }\n    });\n  }\n\n  /**\n   * Return the name of the SLP file currently being written or null if\n   * no file is being written to currently.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public getCurrentFilename(): string | null {\n    if (this.currentFile !== null) {\n      return path.resolve(this.currentFile.path());\n    }\n    return null;\n  }\n\n  /**\n   * Ends the current file being written to.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public endCurrentFile(): void {\n    this._handleEndGame();\n  }\n\n  /**\n   * Updates the settings to be the desired ones passed in.\n   *\n   * @param {Partial<SlpFileWriterOptions>} settings\n   * @memberof SlpFileWriter\n   */\n  public updateSettings(settings: Partial<SlpFileWriterOptions>): void {\n    this.options = Object.assign({}, this.options, settings);\n  }\n\n  private _handleNewGame(): void {\n    // Only create a new file if we're outputting files\n    if (this.options.outputFiles) {\n      const filePath = this.options.newFilename(this.options.folderPath, new Date());\n      this.currentFile = new SlpFile(filePath, this);\n      // console.log(`Creating new file at: ${filePath}`);\n      this.emit(SlpFileWriterEvent.NEW_FILE, filePath);\n    }\n  }\n\n  private _handleEndGame(): void {\n    // End the stream\n    if (this.currentFile) {\n      // Set the console nickname\n      this.currentFile.setMetadata({\n        consoleNickname: this.options.consoleNickname,\n      });\n      this.currentFile.end();\n\n      // console.log(`Finished writing file: ${this.currentFile.path()}`);\n      this.emit(SlpFileWriterEvent.FILE_COMPLETE, this.currentFile.path());\n\n      // Clear current file\n      this.currentFile = null;\n    }\n  }\n}\n"],"names":["getNewFilePath","folder","date","path","join","format","defaultSettings","outputFiles","folderPath","consoleNickname","newFilename","SlpFileWriterEvent","SlpFileWriter","SlpStream","constructor","options","opts","currentFile","Object","assign","_setupListeners","_writePayload","payload","write","on","SlpStreamEvent","RAW","data","command","Command","MESSAGE_SIZES","_handleNewGame","GAME_END","_handleEndGame","getCurrentFilename","resolve","endCurrentFile","updateSettings","settings","filePath","Date","SlpFile","emit","NEW_FILE","setMetadata","end","FILE_COMPLETE"],"mappings":"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"}