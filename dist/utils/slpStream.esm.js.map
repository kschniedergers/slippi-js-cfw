{"version":3,"file":"slpStream.esm.js","sources":["../../src/utils/slpStream.ts"],"sourcesContent":["import type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport { NETWORK_MESSAGE } from \"../console\";\nimport type { EventPayloadTypes } from \"../types\";\nimport { Command } from \"../types\";\nimport { parseMessage } from \"./slpReader\";\n\nexport enum SlpStreamMode {\n  AUTO = \"AUTO\", // Always reading data, but errors on invalid command\n  MANUAL = \"MANUAL\", // Stops parsing inputs after a valid game end command, requires manual restarting\n}\n\nconst defaultSettings = {\n  suppressErrors: false,\n  mode: SlpStreamMode.AUTO,\n};\n\nexport type SlpStreamSettings = typeof defaultSettings;\n\nexport type MessageSizes = Map<Command, number>;\n\nexport type SlpCommandEventPayload = {\n  command: Command;\n  payload: EventPayloadTypes | MessageSizes;\n};\n\nexport type SlpRawEventPayload = {\n  command: Command;\n  payload: Buffer;\n};\n\nexport enum SlpStreamEvent {\n  RAW = \"slp-raw\",\n  COMMAND = \"slp-command\",\n}\n\n/**\n * SlpStream is a writable stream of Slippi data. It passes the data being written in\n * and emits an event based on what kind of Slippi messages were processed.\n *\n * SlpStream emits two events: \"slp-raw\" and \"slp-command\". The \"slp-raw\" event emits the raw buffer\n * bytes whenever it processes each command. You can manually parse this or write it to a\n * file. The \"slp-command\" event returns the parsed payload which you can access the attributes.\n *\n * @class SlpStream\n * @extends {Writable}\n */\nexport class SlpStream extends Writable {\n  private gameEnded = false; // True only if in manual mode and the game has completed\n  private settings: SlpStreamSettings;\n  private payloadSizes: MessageSizes | null = null;\n  private previousBuffer: Uint8Array = Buffer.from([]);\n\n  /**\n   *Creates an instance of SlpStream.\n   * @param {Partial<SlpStreamSettings>} [slpOptions]\n   * @param {WritableOptions} [opts]\n   * @memberof SlpStream\n   */\n  public constructor(slpOptions?: Partial<SlpStreamSettings>, opts?: WritableOptions) {\n    super(opts);\n    this.settings = Object.assign({}, defaultSettings, slpOptions);\n  }\n\n  public restart(): void {\n    this.gameEnded = false;\n    this.payloadSizes = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public _write(newData: Buffer, encoding: string, callback: (error?: Error | null, data?: any) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n\n    // Join the current data with the old data\n    const data = Uint8Array.from(Buffer.concat([this.previousBuffer, newData]));\n\n    // Clear previous data\n    this.previousBuffer = Buffer.from([]);\n\n    const dataView = new DataView(data.buffer);\n\n    // Iterate through the data\n    let index = 0;\n    while (index < data.length) {\n      // We want to filter out the network messages\n      if (Buffer.from(data.slice(index, index + 5)).toString() === NETWORK_MESSAGE) {\n        index += 5;\n        continue;\n      }\n\n      // Make sure we have enough data to read a full payload\n      const command = dataView.getUint8(index);\n      let payloadSize = 0;\n      if (this.payloadSizes) {\n        payloadSize = this.payloadSizes.get(command) ?? 0;\n      }\n      const remainingLen = data.length - index;\n      if (remainingLen < payloadSize + 1) {\n        // If remaining length is not long enough for full payload, save the remaining\n        // data until we receive more data. The data has been split up.\n        this.previousBuffer = data.slice(index);\n        break;\n      }\n\n      // Only process if the game is still going\n      if (this.settings.mode === SlpStreamMode.MANUAL && this.gameEnded) {\n        break;\n      }\n\n      // Increment by one for the command byte\n      index += 1;\n\n      const payloadPtr = data.slice(index);\n      const payloadDataView = new DataView(data.buffer, index);\n      let payloadLen = 0;\n      try {\n        payloadLen = this._processCommand(command, payloadPtr, payloadDataView);\n      } catch (err) {\n        // Only throw the error if we're not suppressing the errors\n        if (!this.settings.suppressErrors) {\n          throw err;\n        }\n        payloadLen = 0;\n      }\n      index += payloadLen;\n    }\n\n    callback();\n  }\n\n  private _writeCommand(command: Command, entirePayload: Uint8Array, payloadSize: number): Uint8Array {\n    const payloadBuf = entirePayload.slice(0, payloadSize);\n    const bufToWrite = Buffer.concat([Buffer.from([command]), payloadBuf]);\n    // Forward the raw buffer onwards\n    const event: SlpRawEventPayload = {\n      command: command,\n      payload: bufToWrite,\n    };\n    this.emit(SlpStreamEvent.RAW, event);\n    return new Uint8Array(bufToWrite);\n  }\n\n  private _processCommand(command: Command, entirePayload: Uint8Array, dataView: DataView): number {\n    // Handle the message size command\n    if (command === Command.MESSAGE_SIZES) {\n      const payloadSize = dataView.getUint8(0);\n      // Set the payload sizes\n      this.payloadSizes = processReceiveCommands(dataView);\n      // Emit the raw command event\n      this._writeCommand(command, entirePayload, payloadSize);\n      const eventPayload: SlpCommandEventPayload = {\n        command: command,\n        payload: this.payloadSizes,\n      };\n      this.emit(SlpStreamEvent.COMMAND, eventPayload);\n      return payloadSize;\n    }\n\n    let payloadSize = 0;\n    if (this.payloadSizes) {\n      payloadSize = this.payloadSizes.get(command) ?? 0;\n    }\n\n    // Fetch the payload and parse it\n    let payload: Uint8Array;\n    let parsedPayload: EventPayloadTypes | null = null;\n    if (payloadSize > 0) {\n      payload = this._writeCommand(command, entirePayload, payloadSize);\n      parsedPayload = parseMessage(command, payload);\n    }\n    if (!parsedPayload) {\n      return payloadSize;\n    }\n\n    switch (command) {\n      case Command.GAME_END:\n        // Stop parsing data until we manually restart the stream\n        if (this.settings.mode === SlpStreamMode.MANUAL) {\n          this.gameEnded = true;\n        }\n        break;\n    }\n\n    const eventPayload: SlpCommandEventPayload = {\n      command: command,\n      payload: parsedPayload,\n    };\n    this.emit(SlpStreamEvent.COMMAND, eventPayload);\n    return payloadSize;\n  }\n}\n\nconst processReceiveCommands = (dataView: DataView): MessageSizes => {\n  const payloadSizes = new Map<Command, number>();\n  const payloadLen = dataView.getUint8(0);\n  for (let i = 1; i < payloadLen; i += 3) {\n    const commandByte = dataView.getUint8(i);\n    const payloadSize = dataView.getUint16(i + 1);\n    payloadSizes.set(commandByte, payloadSize);\n  }\n  return payloadSizes;\n};\n"],"names":["SlpStreamMode","defaultSettings","suppressErrors","mode","AUTO","SlpStreamEvent","SlpStream","Writable","constructor","slpOptions","opts","gameEnded","settings","payloadSizes","previousBuffer","Buffer","from","Object","assign","restart","_write","newData","encoding","callback","Error","data","Uint8Array","concat","dataView","DataView","buffer","index","length","slice","toString","NETWORK_MESSAGE","command","getUint8","payloadSize","_this$payloadSizes$ge","get","remainingLen","MANUAL","payloadPtr","payloadDataView","payloadLen","_processCommand","err","_writeCommand","entirePayload","payloadBuf","bufToWrite","event","payload","emit","RAW","Command","MESSAGE_SIZES","processReceiveCommands","eventPayload","COMMAND","_this$payloadSizes$ge2","parsedPayload","parseMessage","GAME_END","Map","i","commandByte","getUint16","set"],"mappings":"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"}