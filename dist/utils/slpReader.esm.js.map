{"version":3,"file":"slpReader.esm.js","sources":["../../src/utils/slpReader.ts"],"sourcesContent":["import { decode } from \"@shelacek/ubjson\";\nimport iconv from \"iconv-lite\";\nimport mapValues from \"lodash/mapValues\";\n\nimport type {\n  EventCallbackFunc,\n  EventPayloadTypes,\n  GameEndType,\n  GameInfoType,\n  GameStartType,\n  GeckoCodeType,\n  MetadataType,\n  PlacementType,\n  PlayerType,\n  PostFrameUpdateType,\n  SelfInducedSpeedsType,\n} from \"../types\";\nimport { Command } from \"../types\";\nimport { exists } from \"./exists\";\nimport { toHalfwidth } from \"./fullwidth\";\n\nexport enum SlpInputSource {\n  BUFFER = \"buffer\",\n  FILE = \"file\",\n}\n\ntype SlpFileReadInput = {\n  source: SlpInputSource.FILE;\n  filePath: string;\n};\n\ntype SlpBufferReadInput = {\n  source: SlpInputSource.BUFFER;\n  buffer: Buffer;\n};\n\nexport type SlpReadInput = SlpFileReadInput | SlpBufferReadInput;\n\nexport type SlpRefType = SlpFileSourceRef | SlpBufferSourceRef;\n\nexport type SlpFileType = {\n  ref: SlpRefType;\n  rawDataPosition: number;\n  rawDataLength: number;\n  metadataPosition: number;\n  metadataLength: number;\n  messageSizes: {\n    [command: number]: number;\n  };\n};\n\nexport type SlpFileSourceRef = {\n  source: SlpInputSource.FILE;\n  fileDescriptor: number;\n};\n\nexport type SlpBufferSourceRef = {\n  source: SlpInputSource.BUFFER;\n  buffer: Buffer;\n};\n\nfunction getRef(input: SlpReadInput): SlpRefType {\n  switch (input.source) {\n    case SlpInputSource.BUFFER:\n      return {\n        source: input.source,\n        buffer: input.buffer,\n      };\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction readRef(ref: SlpRefType, buffer: Uint8Array, offset: number, length: number, position: number): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      console.error(\"deleted this for cloudflare worker support :)\");\n\n      throw new Error(\"cfw support\");\n    case SlpInputSource.BUFFER:\n      if (position >= ref.buffer.length) {\n        return 0;\n      }\n      return ref.buffer.copy(buffer, offset, position, position + length);\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction getLenRef(ref: SlpRefType): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      console.error(\"deleted this for cloudflare worker support :)\");\n\n      throw new Error(\"cfw support\");\n    case SlpInputSource.BUFFER:\n      return ref.buffer.length;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\n/**\n * Opens a file at path\n */\nexport function openSlpFile(input: SlpReadInput): SlpFileType {\n  const ref = getRef(input);\n\n  const rawDataPosition = getRawDataPosition(ref);\n  const rawDataLength = getRawDataLength(ref, rawDataPosition);\n  const metadataPosition = rawDataPosition + rawDataLength + 10; // remove metadata string\n  const metadataLength = getMetadataLength(ref, metadataPosition);\n  const messageSizes = getMessageSizes(ref, rawDataPosition);\n\n  return {\n    ref,\n    rawDataPosition,\n    rawDataLength,\n    metadataPosition,\n    metadataLength,\n    messageSizes,\n  };\n}\n\nexport function closeSlpFile(file: SlpFileType): void {\n  switch (file.ref.source) {\n  }\n}\n\n// This function gets the position where the raw data starts\nfunction getRawDataPosition(ref: SlpRefType): number {\n  const buffer = new Uint8Array(1);\n  readRef(ref, buffer, 0, buffer.length, 0);\n\n  if (buffer[0] === 0x36) {\n    return 0;\n  }\n\n  if (buffer[0] !== \"{\".charCodeAt(0)) {\n    return 0; // return error?\n  }\n\n  return 15;\n}\n\nfunction getRawDataLength(ref: SlpRefType, position: number): number {\n  const fileSize = getLenRef(ref);\n  if (position === 0) {\n    return fileSize;\n  }\n\n  const buffer = new Uint8Array(4);\n  readRef(ref, buffer, 0, buffer.length, position - 4);\n\n  const rawDataLen = (buffer[0]! << 24) | (buffer[1]! << 16) | (buffer[2]! << 8) | buffer[3]!;\n  if (rawDataLen > 0) {\n    // If this method manages to read a number, it's probably trustworthy\n    return rawDataLen;\n  }\n\n  // If the above does not return a valid data length,\n  // return a file size based on file length. This enables\n  // some support for severed files\n  return fileSize - position;\n}\n\nfunction getMetadataLength(ref: SlpRefType, position: number): number {\n  const len = getLenRef(ref);\n  return len - position - 1;\n}\n\nfunction getMessageSizes(\n  ref: SlpRefType,\n  position: number,\n): {\n  [command: number]: number;\n} {\n  const messageSizes: {\n    [command: number]: number;\n  } = {};\n  // Support old file format\n  if (position === 0) {\n    messageSizes[0x36] = 0x140;\n    messageSizes[0x37] = 0x6;\n    messageSizes[0x38] = 0x46;\n    messageSizes[0x39] = 0x1;\n    return messageSizes;\n  }\n\n  const buffer = new Uint8Array(2);\n  readRef(ref, buffer, 0, buffer.length, position);\n  if (buffer[0] !== Command.MESSAGE_SIZES) {\n    return {};\n  }\n\n  const payloadLength = buffer[1] as number;\n  (messageSizes[0x35] as any) = payloadLength;\n\n  const messageSizesBuffer = new Uint8Array(payloadLength - 1);\n  readRef(ref, messageSizesBuffer, 0, messageSizesBuffer.length, position + 2);\n  for (let i = 0; i < payloadLength - 1; i += 3) {\n    const command = messageSizesBuffer[i] as number;\n\n    // Get size of command\n    (messageSizes[command] as any) = (messageSizesBuffer[i + 1]! << 8) | messageSizesBuffer[i + 2]!;\n  }\n\n  return messageSizes;\n}\n\nfunction getEnabledItems(view: DataView): number {\n  const offsets = [0x1, 0x100, 0x10000, 0x1000000, 0x100000000];\n  const enabledItems = offsets.reduce((acc, byteOffset, index) => {\n    const byte = readUint8(view, 0x28 + index) as number;\n    return acc + byte * byteOffset;\n  }, 0);\n\n  return enabledItems;\n}\n\nfunction getGameInfoBlock(view: DataView): GameInfoType {\n  const offset = 0x5;\n\n  return {\n    gameBitfield1: readUint8(view, 0x0 + offset),\n    gameBitfield2: readUint8(view, 0x1 + offset),\n    gameBitfield3: readUint8(view, 0x2 + offset),\n    gameBitfield4: readUint8(view, 0x3 + offset),\n    bombRainEnabled: (readUint8(view, 0x6 + offset)! & 0xff) > 0 ? true : false,\n    selfDestructScoreValue: readInt8(view, 0xc + offset),\n    itemSpawnBitfield1: readUint8(view, 0x23 + offset),\n    itemSpawnBitfield2: readUint8(view, 0x24 + offset),\n    itemSpawnBitfield3: readUint8(view, 0x25 + offset),\n    itemSpawnBitfield4: readUint8(view, 0x26 + offset),\n    itemSpawnBitfield5: readUint8(view, 0x27 + offset),\n    damageRatio: readFloat(view, 0x30 + offset),\n  };\n}\n\n/**\n * Iterates through slp events and parses payloads\n */\nexport function iterateEvents(\n  slpFile: SlpFileType,\n  callback: EventCallbackFunc,\n  startPos: number | null = null,\n): number {\n  const ref = slpFile.ref;\n\n  let readPosition = startPos !== null && startPos > 0 ? startPos : slpFile.rawDataPosition;\n  const stopReadingAt = slpFile.rawDataPosition + slpFile.rawDataLength;\n\n  // Generate read buffers for each\n  const commandPayloadBuffers = mapValues(slpFile.messageSizes, (size) => new Uint8Array(size + 1));\n  let splitMessageBuffer = new Uint8Array(0);\n\n  const commandByteBuffer = new Uint8Array(1);\n  while (readPosition < stopReadingAt) {\n    readRef(ref, commandByteBuffer, 0, 1, readPosition);\n    let commandByte = (commandByteBuffer[0] as number) ?? 0;\n    let buffer = commandPayloadBuffers[commandByte];\n    if (buffer === undefined) {\n      // If we don't have an entry for this command, return false to indicate failed read\n      return readPosition;\n    }\n\n    if (buffer.length > stopReadingAt - readPosition) {\n      return readPosition;\n    }\n\n    const advanceAmount = buffer.length;\n\n    readRef(ref, buffer, 0, buffer.length, readPosition);\n    if (commandByte === Command.SPLIT_MESSAGE) {\n      // Here we have a split message, we will collect data from them until the last\n      // message of the list is received\n      const view = new DataView(buffer.buffer);\n      const size = readUint16(view, 0x201) ?? 512;\n      const isLastMessage = readBool(view, 0x204);\n      const internalCommand = readUint8(view, 0x203) ?? 0;\n\n      // If this is the first message, initialize the splitMessageBuffer\n      // with the internal command byte because our parseMessage function\n      // seems to expect a command byte at the start\n      if (splitMessageBuffer.length === 0) {\n        splitMessageBuffer = new Uint8Array(1);\n        splitMessageBuffer[0] = internalCommand;\n      }\n\n      // Collect new data into splitMessageBuffer\n      const appendBuf = buffer.slice(0x1, 0x1 + size);\n      const mergedBuf = new Uint8Array(splitMessageBuffer.length + appendBuf.length);\n      mergedBuf.set(splitMessageBuffer);\n      mergedBuf.set(appendBuf, splitMessageBuffer.length);\n      splitMessageBuffer = mergedBuf;\n\n      if (isLastMessage) {\n        commandByte = splitMessageBuffer[0] ?? 0;\n        buffer = splitMessageBuffer;\n        splitMessageBuffer = new Uint8Array(0);\n      }\n    }\n\n    const parsedPayload = parseMessage(commandByte, buffer);\n    const shouldStop = callback(commandByte, parsedPayload, buffer);\n    if (shouldStop) {\n      break;\n    }\n\n    readPosition += advanceAmount;\n  }\n\n  return readPosition;\n}\n\nexport function parseMessage(command: Command, payload: Uint8Array): EventPayloadTypes | null {\n  const view = new DataView(payload.buffer);\n  switch (command) {\n    case Command.GAME_START:\n      const getPlayerObject = (playerIndex: number): PlayerType => {\n        // Controller Fix stuff\n        const cfOffset = playerIndex * 0x8;\n        const dashback = readUint32(view, 0x141 + cfOffset);\n        const shieldDrop = readUint32(view, 0x145 + cfOffset);\n        let controllerFix = \"None\";\n        if (dashback !== shieldDrop) {\n          controllerFix = \"Mixed\";\n        } else if (dashback === 1) {\n          controllerFix = \"UCF\";\n        } else if (dashback === 2) {\n          controllerFix = \"Dween\";\n        }\n\n        // Nametag stuff\n        const nametagLength = 0x10;\n        const nametagOffset = playerIndex * nametagLength;\n        const nametagStart = 0x161 + nametagOffset;\n        const nametagBuf = payload.slice(nametagStart, nametagStart + nametagLength);\n        const nameTagString = iconv\n          .decode(nametagBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const nametag = nameTagString ? toHalfwidth(nameTagString) : \"\";\n\n        // Display name\n        const displayNameLength = 0x1f;\n        const displayNameOffset = playerIndex * displayNameLength;\n        const displayNameStart = 0x1a5 + displayNameOffset;\n        const displayNameBuf = payload.slice(displayNameStart, displayNameStart + displayNameLength);\n        const displayNameString = iconv\n          .decode(displayNameBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const displayName = displayNameString ? toHalfwidth(displayNameString) : \"\";\n\n        // Connect code\n        const connectCodeLength = 0xa;\n        const connectCodeOffset = playerIndex * connectCodeLength;\n        const connectCodeStart = 0x221 + connectCodeOffset;\n        const connectCodeBuf = payload.slice(connectCodeStart, connectCodeStart + connectCodeLength);\n        const connectCodeString = iconv\n          .decode(connectCodeBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const connectCode = connectCodeString ? toHalfwidth(connectCodeString) : \"\";\n\n        const userIdLength = 0x1d;\n        const userIdOffset = playerIndex * userIdLength;\n        const userIdStart = 0x249 + userIdOffset;\n        const userIdBuf = payload.slice(userIdStart, userIdStart + userIdLength);\n        const userIdString = iconv\n          .decode(userIdBuf as Buffer, \"utf8\")\n          .split(\"\\0\")\n          .shift();\n        const userId = userIdString ?? \"\";\n\n        const offset = playerIndex * 0x24;\n        const playerInfo: PlayerType = {\n          playerIndex,\n          port: playerIndex + 1,\n          characterId: readUint8(view, 0x65 + offset),\n          type: readUint8(view, 0x66 + offset),\n          startStocks: readUint8(view, 0x67 + offset),\n          characterColor: readUint8(view, 0x68 + offset),\n          teamShade: readUint8(view, 0x6c + offset),\n          handicap: readUint8(view, 0x6d + offset),\n          teamId: readUint8(view, 0x6e + offset),\n          staminaMode: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x01)),\n          silentCharacter: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x02)),\n          lowGravity: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x04)),\n          invisible: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x08)),\n          blackStockIcon: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x10)),\n          metal: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x20)),\n          startOnAngelPlatform: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x40)),\n          rumbleEnabled: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x80)),\n          cpuLevel: readUint8(view, 0x74 + offset),\n          offenseRatio: readFloat(view, 0x7d + offset),\n          defenseRatio: readFloat(view, 0x81 + offset),\n          modelScale: readFloat(view, 0x85 + offset),\n          controllerFix,\n          nametag,\n          displayName,\n          connectCode,\n          userId,\n        };\n        return playerInfo;\n      };\n\n      const matchIdLength = 51;\n      const matchIdStart = 0x2be;\n      const matchIdBuf = payload.slice(matchIdStart, matchIdStart + matchIdLength);\n      const matchIdString = iconv\n        .decode(matchIdBuf as Buffer, \"utf8\")\n        .split(\"\\0\")\n        .shift();\n      const matchId = matchIdString ?? \"\";\n\n      const gameSettings: GameStartType = {\n        slpVersion: `${readUint8(view, 0x1)}.${readUint8(view, 0x2)}.${readUint8(view, 0x3)}`,\n        timerType: readUint8(view, 0x5, 0x03),\n        inGameMode: readUint8(view, 0x5, 0xe0),\n        friendlyFireEnabled: !!readUint8(view, 0x6, 0x01),\n        isTeams: readBool(view, 0xd),\n        itemSpawnBehavior: readUint8(view, 0x10),\n        stageId: readUint16(view, 0x13),\n        startingTimerSeconds: readUint32(view, 0x15),\n        enabledItems: getEnabledItems(view),\n        players: [0, 1, 2, 3].map(getPlayerObject),\n        scene: readUint8(view, 0x1a3),\n        gameMode: readUint8(view, 0x1a4),\n        language: readUint8(view, 0x2bd),\n        gameInfoBlock: getGameInfoBlock(view),\n        randomSeed: readUint32(view, 0x13d),\n        isPAL: readBool(view, 0x1a1),\n        isFrozenPS: readBool(view, 0x1a2),\n        matchInfo: {\n          matchId,\n          gameNumber: readUint32(view, 0x2f1),\n          tiebreakerNumber: readUint32(view, 0x2f5),\n        },\n      };\n      return gameSettings;\n    case Command.FRAME_START:\n      return {\n        frame: readInt32(view, 0x1),\n        seed: readUint32(view, 0x5),\n        sceneFrameCounter: readUint32(view, 0x9),\n      };\n\n    case Command.PRE_FRAME_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        seed: readUint32(view, 0x7),\n        actionStateId: readUint16(view, 0xb),\n        positionX: readFloat(view, 0xd),\n        positionY: readFloat(view, 0x11),\n        facingDirection: readFloat(view, 0x15),\n        joystickX: readFloat(view, 0x19),\n        joystickY: readFloat(view, 0x1d),\n        cStickX: readFloat(view, 0x21),\n        cStickY: readFloat(view, 0x25),\n        trigger: readFloat(view, 0x29),\n        buttons: readUint32(view, 0x2d),\n        physicalButtons: readUint16(view, 0x31),\n        physicalLTrigger: readFloat(view, 0x33),\n        physicalRTrigger: readFloat(view, 0x37),\n        rawJoystickX: readInt8(view, 0x3b),\n        percent: readFloat(view, 0x3c),\n      };\n    case Command.POST_FRAME_UPDATE:\n      const selfInducedSpeeds: SelfInducedSpeedsType = {\n        airX: readFloat(view, 0x35),\n        y: readFloat(view, 0x39),\n        attackX: readFloat(view, 0x3d),\n        attackY: readFloat(view, 0x41),\n        groundX: readFloat(view, 0x45),\n      };\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        internalCharacterId: readUint8(view, 0x7),\n        actionStateId: readUint16(view, 0x8),\n        positionX: readFloat(view, 0xa),\n        positionY: readFloat(view, 0xe),\n        facingDirection: readFloat(view, 0x12),\n        percent: readFloat(view, 0x16),\n        shieldSize: readFloat(view, 0x1a),\n        lastAttackLanded: readUint8(view, 0x1e),\n        currentComboCount: readUint8(view, 0x1f),\n        lastHitBy: readUint8(view, 0x20),\n        stocksRemaining: readUint8(view, 0x21),\n        actionStateCounter: readFloat(view, 0x22),\n        miscActionState: readFloat(view, 0x2b),\n        isAirborne: readBool(view, 0x2f),\n        lastGroundId: readUint16(view, 0x30),\n        jumpsRemaining: readUint8(view, 0x32),\n        lCancelStatus: readUint8(view, 0x33),\n        hurtboxCollisionState: readUint8(view, 0x34),\n        selfInducedSpeeds: selfInducedSpeeds,\n        hitlagRemaining: readFloat(view, 0x49),\n        animationIndex: readUint32(view, 0x4d),\n        instanceHitBy: readUint16(view, 0x51),\n        instanceId: readUint16(view, 0x53),\n      };\n    case Command.ITEM_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        typeId: readUint16(view, 0x5),\n        state: readUint8(view, 0x7),\n        facingDirection: readFloat(view, 0x8),\n        velocityX: readFloat(view, 0xc),\n        velocityY: readFloat(view, 0x10),\n        positionX: readFloat(view, 0x14),\n        positionY: readFloat(view, 0x18),\n        damageTaken: readUint16(view, 0x1c),\n        expirationTimer: readFloat(view, 0x1e),\n        spawnId: readUint32(view, 0x22),\n        missileType: readUint8(view, 0x26),\n        turnipFace: readUint8(view, 0x27),\n        chargeShotLaunched: readUint8(view, 0x28),\n        chargePower: readUint8(view, 0x29),\n        owner: readInt8(view, 0x2a),\n        instanceId: readUint16(view, 0x2b),\n      };\n    case Command.FRAME_BOOKEND:\n      return {\n        frame: readInt32(view, 0x1),\n        latestFinalizedFrame: readInt32(view, 0x5),\n      };\n    case Command.GAME_END:\n      const placements = [0, 1, 2, 3].map((playerIndex): PlacementType => {\n        const position = readInt8(view, 0x3 + playerIndex);\n        return { playerIndex, position };\n      });\n\n      return {\n        gameEndMethod: readUint8(view, 0x1),\n        lrasInitiatorIndex: readInt8(view, 0x2),\n        placements,\n      };\n    case Command.GECKO_LIST:\n      const codes: GeckoCodeType[] = [];\n      let pos = 1;\n      while (pos < payload.length) {\n        const word1 = readUint32(view, pos) ?? 0;\n        const codetype = (word1 >> 24) & 0xfe;\n        const address = (word1 & 0x01ffffff) + 0x80000000;\n\n        let offset = 8; // Default code length, most codes are this length\n        if (codetype === 0xc0 || codetype === 0xc2) {\n          const lineCount = readUint32(view, pos + 4) ?? 0;\n          offset = 8 + lineCount * 8;\n        } else if (codetype === 0x06) {\n          const byteLen = readUint32(view, pos + 4) ?? 0;\n          offset = 8 + ((byteLen + 7) & 0xfffffff8);\n        } else if (codetype === 0x08) {\n          offset = 16;\n        }\n\n        codes.push({\n          type: codetype,\n          address: address,\n          contents: payload.slice(pos, pos + offset),\n        });\n\n        pos += offset;\n      }\n\n      return {\n        contents: payload.slice(1),\n        codes: codes,\n      };\n    default:\n      return null;\n  }\n}\n\nfunction canReadFromView(view: DataView, offset: number, length: number): boolean {\n  const viewLength = view.byteLength;\n  return offset + length <= viewLength;\n}\n\nfunction readFloat(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getFloat32(offset);\n}\n\nfunction readInt32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getInt32(offset);\n}\n\nfunction readInt8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getInt8(offset);\n}\n\nfunction readUint32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getUint32(offset);\n}\n\nfunction readUint16(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 2)) {\n    return null;\n  }\n\n  return view.getUint16(offset);\n}\n\nfunction readUint8(view: DataView, offset: number, bitmask = 0xff): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getUint8(offset) & bitmask;\n}\n\nfunction readBool(view: DataView, offset: number): boolean | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return !!view.getUint8(offset);\n}\n\nexport function getMetadata(slpFile: SlpFileType): MetadataType | null {\n  if (slpFile.metadataLength <= 0) {\n    // This will happen on a severed incomplete file\n    // $FlowFixMe\n    return null;\n  }\n\n  const buffer = new Uint8Array(slpFile.metadataLength);\n\n  readRef(slpFile.ref, buffer, 0, buffer.length, slpFile.metadataPosition);\n\n  let metadata = null;\n  try {\n    metadata = decode(buffer);\n  } catch (ex) {\n    // Do nothing\n    // console.log(ex);\n  }\n\n  // $FlowFixMe\n  return metadata;\n}\n\nexport function getGameEnd(slpFile: SlpFileType): GameEndType | null {\n  const { ref, rawDataPosition, rawDataLength, messageSizes } = slpFile;\n  const gameEndPayloadSize = messageSizes[Command.GAME_END];\n  if (!exists(gameEndPayloadSize) || gameEndPayloadSize <= 0) {\n    return null;\n  }\n\n  // Add one to account for command byte\n  const gameEndSize = gameEndPayloadSize + 1;\n  const gameEndPosition = rawDataPosition + rawDataLength - gameEndSize;\n\n  const buffer = new Uint8Array(gameEndSize);\n  readRef(ref, buffer, 0, buffer.length, gameEndPosition);\n  if (buffer[0] !== Command.GAME_END) {\n    // This isn't even a game end payload\n    return null;\n  }\n\n  const gameEndMessage = parseMessage(Command.GAME_END, buffer);\n  if (!gameEndMessage) {\n    return null;\n  }\n\n  return gameEndMessage as GameEndType;\n}\n\nexport function extractFinalPostFrameUpdates(slpFile: SlpFileType): PostFrameUpdateType[] {\n  const { ref, rawDataPosition, rawDataLength, messageSizes } = slpFile;\n\n  // The following should exist on all replay versions\n  const postFramePayloadSize = messageSizes[Command.POST_FRAME_UPDATE];\n  const gameEndPayloadSize = messageSizes[Command.GAME_END];\n  const frameBookendPayloadSize = messageSizes[Command.FRAME_BOOKEND];\n\n  // Technically this should not be possible\n  if (!exists(postFramePayloadSize)) {\n    return [];\n  }\n\n  const gameEndSize = gameEndPayloadSize ? gameEndPayloadSize + 1 : 0;\n  const postFrameSize = postFramePayloadSize + 1;\n  const frameBookendSize = frameBookendPayloadSize ? frameBookendPayloadSize + 1 : 0;\n\n  let frameNum: number | null = null;\n  let postFramePosition = rawDataPosition + rawDataLength - gameEndSize - frameBookendSize - postFrameSize;\n  const postFrameUpdates: PostFrameUpdateType[] = [];\n  do {\n    const buffer = new Uint8Array(postFrameSize);\n    readRef(ref, buffer, 0, buffer.length, postFramePosition);\n    if (buffer[0] !== Command.POST_FRAME_UPDATE) {\n      break;\n    }\n\n    const postFrameMessage = parseMessage(Command.POST_FRAME_UPDATE, buffer) as PostFrameUpdateType | null;\n    if (!postFrameMessage) {\n      break;\n    }\n\n    if (frameNum === null) {\n      frameNum = postFrameMessage.frame;\n    } else if (frameNum !== postFrameMessage.frame) {\n      // If post frame message is found but the frame doesn't match, it's not part of the final frame\n      break;\n    }\n\n    postFrameUpdates.unshift(postFrameMessage);\n    postFramePosition -= postFrameSize;\n  } while (postFramePosition >= rawDataPosition);\n\n  return postFrameUpdates;\n}\n"],"names":["SlpInputSource","getRef","input","source","BUFFER","buffer","Error","readRef","ref","offset","length","position","FILE","console","error","copy","getLenRef","openSlpFile","rawDataPosition","getRawDataPosition","rawDataLength","getRawDataLength","metadataPosition","metadataLength","getMetadataLength","messageSizes","getMessageSizes","closeSlpFile","file","Uint8Array","charCodeAt","fileSize","rawDataLen","len","Command","MESSAGE_SIZES","payloadLength","messageSizesBuffer","i","command","getEnabledItems","view","offsets","enabledItems","reduce","acc","byteOffset","index","byte","readUint8","getGameInfoBlock","gameBitfield1","gameBitfield2","gameBitfield3","gameBitfield4","bombRainEnabled","selfDestructScoreValue","readInt8","itemSpawnBitfield1","itemSpawnBitfield2","itemSpawnBitfield3","itemSpawnBitfield4","itemSpawnBitfield5","damageRatio","readFloat","iterateEvents","slpFile","callback","startPos","readPosition","stopReadingAt","commandPayloadBuffers","mapValues","size","splitMessageBuffer","commandByteBuffer","commandByte","undefined","advanceAmount","SPLIT_MESSAGE","DataView","readUint16","isLastMessage","readBool","internalCommand","appendBuf","slice","mergedBuf","set","parsedPayload","parseMessage","shouldStop","payload","GAME_START","getPlayerObject","playerIndex","cfOffset","dashback","readUint32","shieldDrop","controllerFix","nametagLength","nametagOffset","nametagStart","nametagBuf","nameTagString","iconv","decode","split","shift","nametag","toHalfwidth","displayNameLength","displayNameOffset","displayNameStart","displayNameBuf","displayNameString","displayName","connectCodeLength","connectCodeOffset","connectCodeStart","connectCodeBuf","connectCodeString","connectCode","userIdLength","userIdOffset","userIdStart","userIdBuf","userIdString","userId","playerInfo","port","characterId","type","startStocks","characterColor","teamShade","handicap","teamId","staminaMode","Boolean","silentCharacter","lowGravity","invisible","blackStockIcon","metal","startOnAngelPlatform","rumbleEnabled","cpuLevel","offenseRatio","defenseRatio","modelScale","matchIdLength","matchIdStart","matchIdBuf","matchIdString","matchId","gameSettings","slpVersion","timerType","inGameMode","friendlyFireEnabled","isTeams","itemSpawnBehavior","stageId","startingTimerSeconds","players","map","scene","gameMode","language","gameInfoBlock","randomSeed","isPAL","isFrozenPS","matchInfo","gameNumber","tiebreakerNumber","FRAME_START","frame","readInt32","seed","sceneFrameCounter","PRE_FRAME_UPDATE","isFollower","actionStateId","positionX","positionY","facingDirection","joystickX","joystickY","cStickX","cStickY","trigger","buttons","physicalButtons","physicalLTrigger","physicalRTrigger","rawJoystickX","percent","POST_FRAME_UPDATE","selfInducedSpeeds","airX","y","attackX","attackY","groundX","internalCharacterId","shieldSize","lastAttackLanded","currentComboCount","lastHitBy","stocksRemaining","actionStateCounter","miscActionState","isAirborne","lastGroundId","jumpsRemaining","lCancelStatus","hurtboxCollisionState","hitlagRemaining","animationIndex","instanceHitBy","instanceId","ITEM_UPDATE","typeId","state","velocityX","velocityY","damageTaken","expirationTimer","spawnId","missileType","turnipFace","chargeShotLaunched","chargePower","owner","FRAME_BOOKEND","latestFinalizedFrame","GAME_END","placements","gameEndMethod","lrasInitiatorIndex","GECKO_LIST","codes","pos","word1","codetype","address","lineCount","byteLen","push","contents","canReadFromView","viewLength","byteLength","getFloat32","getInt32","getInt8","getUint32","getUint16","bitmask","getUint8","getMetadata","metadata","ex","getGameEnd","gameEndPayloadSize","exists","gameEndSize","gameEndPosition","gameEndMessage","extractFinalPostFrameUpdates","postFramePayloadSize","frameBookendPayloadSize","postFrameSize","frameBookendSize","frameNum","postFramePosition","postFrameUpdates","postFrameMessage","unshift"],"mappings":"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"}