{"version":3,"file":"homeRunDistance.esm.js","sources":["../../src/utils/homeRunDistance.ts"],"sourcesContent":["import type { FrameEntryType, GameStartType } from \"../types\";\nimport { Language } from \"../types\";\nimport { exists } from \"./exists\";\n\nconst SANDBAG_INTERNAL_ID = 32;\n\nconst FEET_CONVERSION_FACTOR = 0.952462;\nconst METERS_CONVERSION_FACTOR = 1.04167;\n\ntype HomeRunDistanceUnits = \"feet\" | \"meters\";\n\nexport function positionToHomeRunDistance(distance: number, units: HomeRunDistanceUnits = \"feet\"): number {\n  let score = 0;\n  switch (units) {\n    case \"feet\":\n      score = 10 * Math.floor(distance - 70 * FEET_CONVERSION_FACTOR);\n      // convert to float32\n      score = Math.fround(score);\n      score = Math.floor((score / 30.4788) * 10) / 10;\n      break;\n    case \"meters\":\n      score = 10 * Math.floor(distance - 70 * METERS_CONVERSION_FACTOR);\n      // convert to float32\n      score = Math.fround(score);\n      score = Math.floor((score / 100) * 10) / 10;\n      break;\n    default:\n      throw new Error(`Unsupported units: ${units}`);\n  }\n\n  // round to 1 decimal\n  score = Math.round(score * 10) / 10;\n  return Math.max(0, score);\n}\n\nexport function extractDistanceInfoFromFrame(\n  settings: Pick<GameStartType, \"language\">,\n  lastFrame: Pick<FrameEntryType, \"players\">,\n): { distance: number; units: HomeRunDistanceUnits } | null {\n  const sandbagLastFrame = Object.values(lastFrame.players)\n    .filter(exists)\n    .find((playerFrame) => playerFrame.post.internalCharacterId === SANDBAG_INTERNAL_ID);\n\n  if (!sandbagLastFrame) {\n    return null;\n  }\n\n  // Only return the distance in meters if it's a Japanese replay.\n  // Technically we should check if the replay is PAL but we don't yet support\n  // stadium replays in PAL.\n  const units: HomeRunDistanceUnits = settings.language === Language.JAPANESE ? \"meters\" : \"feet\";\n  const distance = positionToHomeRunDistance(sandbagLastFrame.post.positionX ?? 0, units);\n  return {\n    distance,\n    units,\n  };\n}\n"],"names":["SANDBAG_INTERNAL_ID","FEET_CONVERSION_FACTOR","METERS_CONVERSION_FACTOR","positionToHomeRunDistance","distance","units","score","Math","floor","fround","Error","round","max","extractDistanceInfoFromFrame","settings","lastFrame","_sandbagLastFrame$pos","sandbagLastFrame","Object","values","players","filter","exists","find","playerFrame","post","internalCharacterId","language","Language","JAPANESE","positionX"],"mappings":";;;AAIA,MAAMA,mBAAmB,GAAG,EAAE,CAAA;AAE9B,MAAMC,sBAAsB,GAAG,QAAQ,CAAA;AACvC,MAAMC,wBAAwB,GAAG,OAAO,CAAA;SAIxBC,yBAAyBA,CAACC,QAAgB,EAAEC,QAA8B,MAAM,EAAA;EAC9F,IAAIC,KAAK,GAAG,CAAC,CAAA;AACb,EAAA,QAAQD,KAAK;AACX,IAAA,KAAK,MAAM;AACTC,MAAAA,KAAK,GAAG,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACJ,QAAQ,GAAG,EAAE,GAAGH,sBAAsB,CAAC,CAAA;AAC/D;AACAK,MAAAA,KAAK,GAAGC,IAAI,CAACE,MAAM,CAACH,KAAK,CAAC,CAAA;AAC1BA,MAAAA,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAEF,KAAK,GAAG,OAAO,GAAI,EAAE,CAAC,GAAG,EAAE,CAAA;AAC/C,MAAA,MAAA;AACF,IAAA,KAAK,QAAQ;AACXA,MAAAA,KAAK,GAAG,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACJ,QAAQ,GAAG,EAAE,GAAGF,wBAAwB,CAAC,CAAA;AACjE;AACAI,MAAAA,KAAK,GAAGC,IAAI,CAACE,MAAM,CAACH,KAAK,CAAC,CAAA;AAC1BA,MAAAA,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAEF,KAAK,GAAG,GAAG,GAAI,EAAE,CAAC,GAAG,EAAE,CAAA;AAC3C,MAAA,MAAA;AACF,IAAA;AACE,MAAA,MAAM,IAAII,KAAK,CAAC,CAAsBL,mBAAAA,EAAAA,KAAK,EAAE,CAAC,CAAA;AACjD,GAAA;AAED;EACAC,KAAK,GAAGC,IAAI,CAACI,KAAK,CAACL,KAAK,GAAG,EAAE,CAAC,GAAG,EAAE,CAAA;AACnC,EAAA,OAAOC,IAAI,CAACK,GAAG,CAAC,CAAC,EAAEN,KAAK,CAAC,CAAA;AAC3B,CAAA;AAEgB,SAAAO,4BAA4BA,CAC1CC,QAAyC,EACzCC,SAA0C,EAAA;AAAA,EAAA,IAAAC,qBAAA,CAAA;EAE1C,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAACJ,SAAS,CAACK,OAAO,CAAC,CACtDC,MAAM,CAACC,MAAM,CAAC,CACdC,IAAI,CAAEC,WAAW,IAAKA,WAAW,CAACC,IAAI,CAACC,mBAAmB,KAAK1B,mBAAmB,CAAC,CAAA;EAEtF,IAAI,CAACiB,gBAAgB,EAAE;AACrB,IAAA,OAAO,IAAI,CAAA;AACZ,GAAA;AAED;AACA;AACA;AACA,EAAA,MAAMZ,KAAK,GAAyBS,QAAQ,CAACa,QAAQ,KAAKC,QAAQ,CAACC,QAAQ,GAAG,QAAQ,GAAG,MAAM,CAAA;AAC/F,EAAA,MAAMzB,QAAQ,GAAGD,yBAAyB,CAAAa,CAAAA,qBAAA,GAACC,gBAAgB,CAACQ,IAAI,CAACK,SAAS,KAAAd,IAAAA,GAAAA,qBAAA,GAAI,CAAC,EAAEX,KAAK,CAAC,CAAA;EACvF,OAAO;IACLD,QAAQ;AACRC,IAAAA,KAAAA;GACD,CAAA;AACH;;;;"}