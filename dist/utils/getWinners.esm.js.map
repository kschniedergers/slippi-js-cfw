{"version":3,"file":"getWinners.esm.js","sources":["../../src/utils/getWinners.ts"],"sourcesContent":["import type { GameEndType, GameStartType, PlacementType, PostFrameUpdateType } from \"../types\";\nimport { GameEndMethod } from \"../types\";\nimport { exists } from \"./exists\";\n\nexport function getWinners(\n  gameEnd: GameEndType,\n  settings: Pick<GameStartType, \"players\" | \"isTeams\">,\n  finalPostFrameUpdates: PostFrameUpdateType[],\n): PlacementType[] {\n  const { placements, gameEndMethod, lrasInitiatorIndex } = gameEnd;\n  const { players, isTeams } = settings;\n\n  if (gameEndMethod === GameEndMethod.NO_CONTEST || gameEndMethod === GameEndMethod.UNRESOLVED) {\n    // The winner is the person who didn't LRAS\n    if (exists(lrasInitiatorIndex) && players.length === 2) {\n      const winnerIndex = players.find(({ playerIndex }) => playerIndex !== lrasInitiatorIndex)?.playerIndex;\n      if (exists(winnerIndex)) {\n        return [\n          {\n            playerIndex: winnerIndex,\n            position: 0,\n          },\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  if (gameEndMethod === GameEndMethod.TIME && players.length === 2) {\n    const nonFollowerUpdates = finalPostFrameUpdates.filter((pfu) => !pfu.isFollower);\n    if (nonFollowerUpdates.length !== players.length) {\n      return [];\n    }\n\n    const p1 = nonFollowerUpdates[0]!;\n    const p2 = nonFollowerUpdates[1]!;\n    if (p1.stocksRemaining! > p2.stocksRemaining!) {\n      return [{ playerIndex: p1.playerIndex!, position: 0 }];\n    } else if (p2.stocksRemaining! > p1.stocksRemaining!) {\n      return [{ playerIndex: p2.playerIndex!, position: 0 }];\n    }\n\n    const p1Health = Math.trunc(p1.percent!);\n    const p2Health = Math.trunc(p2.percent!);\n    if (p1Health < p2Health) {\n      return [{ playerIndex: p1.playerIndex!, position: 0 }];\n    } else if (p2Health < p1Health) {\n      return [{ playerIndex: p2.playerIndex!, position: 0 }];\n    }\n\n    // If stocks and percents were tied, no winner\n    return [];\n  }\n\n  const firstPosition = placements.find((placement) => placement.position === 0);\n  if (!firstPosition) {\n    return [];\n  }\n\n  const winningTeam = players.find(({ playerIndex }) => playerIndex === firstPosition.playerIndex)?.teamId ?? null;\n  if (isTeams && exists(winningTeam)) {\n    return placements.filter((placement) => {\n      const teamId = players.find(({ playerIndex }) => playerIndex === placement.playerIndex)?.teamId ?? null;\n      return teamId === winningTeam;\n    });\n  }\n\n  return [firstPosition];\n}\n"],"names":["getWinners","gameEnd","settings","finalPostFrameUpdates","_players$find$teamId","_players$find2","placements","gameEndMethod","lrasInitiatorIndex","players","isTeams","GameEndMethod","NO_CONTEST","UNRESOLVED","exists","length","_players$find","winnerIndex","find","playerIndex","position","TIME","nonFollowerUpdates","filter","pfu","isFollower","p1","p2","stocksRemaining","p1Health","Math","trunc","percent","p2Health","firstPosition","placement","winningTeam","teamId","_players$find$teamId2","_players$find3"],"mappings":"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"}