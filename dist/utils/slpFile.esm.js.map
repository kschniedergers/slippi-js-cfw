{"version":3,"file":"slpFile.esm.js","sources":["../../src/utils/slpFile.ts"],"sourcesContent":["import type { WriteStream } from \"fs\";\nimport forEach from \"lodash/forEach\";\nimport type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport type { GameStartType, PostFrameUpdateType } from \"../types\";\nimport { Command } from \"../types\";\nimport type { SlpCommandEventPayload } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent, SlpStreamMode } from \"./slpStream\";\n\nconst DEFAULT_NICKNAME = \"unknown\";\n\nexport type SlpFileMetadata = {\n  startTime: Date;\n  lastFrame: number;\n  players: {\n    [playerIndex: number]: {\n      characterUsage: {\n        [internalCharacterId: number]: number;\n      };\n      names: {\n        netplay: string;\n        code: string;\n      };\n    };\n  };\n  consoleNickname?: string;\n};\n\n/**\n * SlpFile is a class that wraps a Writable stream. It handles the writing of the binary\n * header and footer, and also handles the overwriting of the raw data length.\n *\n * @class SlpFile\n * @extends {Writable}\n */\nexport class SlpFile extends Writable {\n  private filePath: string;\n  private metadata: SlpFileMetadata;\n  private fileStream: WriteStream | null = null;\n  private rawDataLength = 0;\n  private slpStream: SlpStream;\n  private usesExternalStream = false;\n\n  /**\n   * Creates an instance of SlpFile.\n   * @param {string} filePath The file location to write to.\n   * @param {WritableOptions} [opts] Options for writing.\n   * @memberof SlpFile\n   */\n  public constructor(filePath: string, slpStream?: SlpStream, opts?: WritableOptions) {\n    super(opts);\n    this.filePath = filePath;\n    this.metadata = {\n      consoleNickname: DEFAULT_NICKNAME,\n      startTime: new Date(),\n      lastFrame: -124,\n      players: {},\n    };\n    this.usesExternalStream = Boolean(slpStream);\n\n    // Create a new SlpStream if one wasn't already provided\n    // This SLP stream represents a single game not multiple, so use manual mode\n    this.slpStream = slpStream ? slpStream : new SlpStream({ mode: SlpStreamMode.MANUAL });\n\n    this._setupListeners();\n    this._initializeNewGame(this.filePath);\n  }\n\n  /**\n   * Get the current file path being written to.\n   *\n   * @returns {string} The location of the current file path\n   * @memberof SlpFile\n   */\n  public path(): string {\n    return this.filePath;\n  }\n\n  /**\n   * Sets the metadata of the Slippi file, such as consoleNickname, lastFrame, and players.\n   * @param metadata The metadata to be written\n   */\n  public setMetadata(metadata: Partial<SlpFileMetadata>): void {\n    this.metadata = Object.assign({}, this.metadata, metadata);\n  }\n\n  public _write(chunk: Uint8Array, encoding: string, callback: (error?: Error | null) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n    // Write it to the file\n    if (this.fileStream) {\n      this.fileStream.write(chunk);\n    }\n\n    // Parse the data manually if it's an internal stream\n    if (!this.usesExternalStream) {\n      this.slpStream.write(chunk);\n    }\n\n    // Keep track of the bytes we've written\n    this.rawDataLength += chunk.length;\n    callback();\n  }\n\n  /**\n   * Here we define what to do on each command. We need to populate the metadata field\n   * so we keep track of the latest frame, as well as the number of frames each character has\n   * been used.\n   *\n   * @param data The parsed data from a SlpStream\n   */\n  private _onCommand(data: SlpCommandEventPayload): void {\n    const { command, payload } = data;\n    switch (command) {\n      case Command.GAME_START:\n        const { players } = payload as GameStartType;\n        forEach(players, (player) => {\n          if (player.type === 3) {\n            return;\n          }\n\n          this.metadata.players[player.playerIndex] = {\n            characterUsage: {},\n            names: {\n              netplay: player.displayName,\n              code: player.connectCode,\n            },\n          };\n        });\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // Here we need to update some metadata fields\n        const { frame, playerIndex, isFollower, internalCharacterId } = payload as PostFrameUpdateType;\n        if (isFollower) {\n          // No need to do this for follower\n          break;\n        }\n\n        // Update frame index\n        this.metadata.lastFrame = frame!;\n\n        // Update character usage\n        const prevPlayer = this.metadata.players[playerIndex!];\n        const characterUsage = prevPlayer!.characterUsage;\n        const curCharFrames = characterUsage[internalCharacterId!] || 0;\n        const player = {\n          ...prevPlayer,\n          characterUsage: {\n            ...characterUsage,\n            [internalCharacterId!]: curCharFrames + 1,\n          },\n        };\n        (this.metadata.players as any)[playerIndex!] = player;\n        break;\n    }\n  }\n\n  private _setupListeners(): void {\n    const streamListener = (data: SlpCommandEventPayload): void => {\n      this._onCommand(data);\n    };\n    this.slpStream.on(SlpStreamEvent.COMMAND, streamListener);\n\n    this.on(\"finish\", () => {\n      // Update file with bytes written\n      console.error(\"removed stuff here for cloudflare worker support\");\n\n      // Unsubscribe from the stream\n      this.slpStream.removeListener(SlpStreamEvent.COMMAND, streamListener);\n      // Terminate the internal stream\n      if (!this.usesExternalStream) {\n        this.slpStream.end();\n      }\n    });\n  }\n\n  private _initializeNewGame(filePath: string): void {\n    console.error(\"removed stuff here for cloudflare worker support\");\n  }\n\n  public _final(callback: (error?: Error | null) => void): void {\n    let footer = Buffer.concat([Buffer.from(\"U\"), Buffer.from([8]), Buffer.from(\"metadata{\")]);\n\n    // Write game start time\n    const startTimeStr = this.metadata.startTime.toISOString();\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([7]),\n      Buffer.from(\"startAtSU\"),\n      Buffer.from([startTimeStr.length]),\n      Buffer.from(startTimeStr),\n    ]);\n\n    // Write last frame index\n    // TODO: Get last frame\n    const lastFrame = this.metadata.lastFrame;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([9]),\n      Buffer.from(\"lastFramel\"),\n      createInt32Buffer(lastFrame),\n    ]);\n\n    // write the Console Nickname\n    const consoleNick = this.metadata.consoleNickname || DEFAULT_NICKNAME;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([11]),\n      Buffer.from(\"consoleNickSU\"),\n      Buffer.from([consoleNick.length]),\n      Buffer.from(consoleNick),\n    ]);\n\n    // Start writting player specific data\n    footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([7]), Buffer.from(\"players{\")]);\n    const players = this.metadata.players;\n    forEach(players, (player, index) => {\n      // Start player obj with index being the player index\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([index.length]), Buffer.from(`${index}{`)]);\n\n      // Start characters key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([10]), Buffer.from(\"characters{\")]);\n\n      // Write character usage\n      forEach(player.characterUsage, (usage, internalId) => {\n        // Write this character\n        footer = Buffer.concat([\n          footer,\n          Buffer.from(\"U\"),\n          Buffer.from([internalId.length]),\n          Buffer.from(`${internalId}l`),\n          createUInt32Buffer(usage),\n        ]);\n      });\n\n      // Close characters\n      footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n      // Start names key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([5]), Buffer.from(\"names{\")]);\n\n      // Write display name\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([7]),\n        Buffer.from(\"netplaySU\"),\n        Buffer.from([player.names.netplay.length]),\n        Buffer.from(`${player.names.netplay}`),\n      ]);\n\n      // Write connect code\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([4]),\n        Buffer.from(\"codeSU\"),\n        Buffer.from([player.names.code.length]),\n        Buffer.from(`${player.names.code}`),\n      ]);\n\n      // Close names and player\n      footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n    });\n\n    // Close players\n    footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n    // Write played on\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([8]),\n      Buffer.from(\"playedOnSU\"),\n      Buffer.from([7]),\n      Buffer.from(\"network\"),\n    ]);\n\n    // Close metadata and file\n    footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n\n    // End the stream\n    if (this.fileStream) {\n      this.fileStream.write(footer, callback);\n    }\n  }\n}\n\nconst createInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeInt32BE(number, 0);\n  return buf;\n};\n\nconst createUInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeUInt32BE(number, 0);\n  return buf;\n};\n"],"names":["DEFAULT_NICKNAME","SlpFile","Writable","constructor","filePath","slpStream","opts","metadata","fileStream","rawDataLength","usesExternalStream","consoleNickname","startTime","Date","lastFrame","players","Boolean","SlpStream","mode","SlpStreamMode","MANUAL","_setupListeners","_initializeNewGame","path","setMetadata","Object","assign","_write","chunk","encoding","callback","Error","write","length","_onCommand","data","command","payload","Command","GAME_START","forEach","player","type","playerIndex","characterUsage","names","netplay","displayName","code","connectCode","POST_FRAME_UPDATE","frame","isFollower","internalCharacterId","prevPlayer","curCharFrames","streamListener","on","SlpStreamEvent","COMMAND","console","error","removeListener","end","_final","footer","Buffer","concat","from","startTimeStr","toISOString","createInt32Buffer","consoleNick","index","usage","internalId","createUInt32Buffer","number","buf","alloc","writeInt32BE","writeUInt32BE"],"mappings":"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"}