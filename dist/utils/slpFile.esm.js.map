{"version":3,"file":"slpFile.esm.js","sources":["../../src/utils/slpFile.ts"],"sourcesContent":["import type { WriteStream } from \"fs\";\nimport forEach from \"lodash/forEach\";\nimport type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport type { GameStartType, PostFrameUpdateType } from \"../types\";\nimport { Command } from \"../types\";\nimport type { SlpCommandEventPayload } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent, SlpStreamMode } from \"./slpStream\";\n\nconst DEFAULT_NICKNAME = \"unknown\";\n\nexport type SlpFileMetadata = {\n  startTime: Date;\n  lastFrame: number;\n  players: {\n    [playerIndex: number]: {\n      characterUsage: {\n        [internalCharacterId: number]: number;\n      };\n      names: {\n        netplay: string;\n        code: string;\n      };\n    };\n  };\n  consoleNickname?: string;\n};\n\n/**\n * SlpFile is a class that wraps a Writable stream. It handles the writing of the binary\n * header and footer, and also handles the overwriting of the raw data length.\n *\n * @class SlpFile\n * @extends {Writable}\n */\nexport class SlpFile extends Writable {\n  private filePath: string;\n  private metadata: SlpFileMetadata;\n  private fileStream: WriteStream | null = null;\n  private rawDataLength = 0;\n  private slpStream: SlpStream;\n  private usesExternalStream = false;\n\n  /**\n   * Creates an instance of SlpFile.\n   * @param {string} filePath The file location to write to.\n   * @param {WritableOptions} [opts] Options for writing.\n   * @memberof SlpFile\n   */\n  public constructor(filePath: string, slpStream?: SlpStream, opts?: WritableOptions) {\n    super(opts);\n    this.filePath = filePath;\n    this.metadata = {\n      consoleNickname: DEFAULT_NICKNAME,\n      startTime: new Date(),\n      lastFrame: -124,\n      players: {},\n    };\n    this.usesExternalStream = Boolean(slpStream);\n\n    // Create a new SlpStream if one wasn't already provided\n    // This SLP stream represents a single game not multiple, so use manual mode\n    this.slpStream = slpStream ? slpStream : new SlpStream({ mode: SlpStreamMode.MANUAL });\n\n    this._setupListeners();\n    this._initializeNewGame(this.filePath);\n  }\n\n  /**\n   * Get the current file path being written to.\n   *\n   * @returns {string} The location of the current file path\n   * @memberof SlpFile\n   */\n  public path(): string {\n    return this.filePath;\n  }\n\n  /**\n   * Sets the metadata of the Slippi file, such as consoleNickname, lastFrame, and players.\n   * @param metadata The metadata to be written\n   */\n  public setMetadata(metadata: Partial<SlpFileMetadata>): void {\n    this.metadata = Object.assign({}, this.metadata, metadata);\n  }\n\n  public _write(chunk: Uint8Array, encoding: string, callback: (error?: Error | null) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n    // Write it to the file\n    if (this.fileStream) {\n      this.fileStream.write(chunk);\n    }\n\n    // Parse the data manually if it's an internal stream\n    if (!this.usesExternalStream) {\n      this.slpStream.write(chunk);\n    }\n\n    // Keep track of the bytes we've written\n    this.rawDataLength += chunk.length;\n    callback();\n  }\n\n  /**\n   * Here we define what to do on each command. We need to populate the metadata field\n   * so we keep track of the latest frame, as well as the number of frames each character has\n   * been used.\n   *\n   * @param data The parsed data from a SlpStream\n   */\n  private _onCommand(data: SlpCommandEventPayload): void {\n    const { command, payload } = data;\n    switch (command) {\n      case Command.GAME_START:\n        const { players } = payload as GameStartType;\n        forEach(players, (player) => {\n          if (player.type === 3) {\n            return;\n          }\n\n          this.metadata.players[player.playerIndex] = {\n            characterUsage: {},\n            names: {\n              netplay: player.displayName,\n              code: player.connectCode,\n            },\n          };\n        });\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // Here we need to update some metadata fields\n        const { frame, playerIndex, isFollower, internalCharacterId } = payload as PostFrameUpdateType;\n        if (isFollower) {\n          // No need to do this for follower\n          break;\n        }\n\n        // Update frame index\n        this.metadata.lastFrame = frame!;\n\n        // Update character usage\n        const prevPlayer = this.metadata.players[playerIndex!];\n        const characterUsage = prevPlayer!.characterUsage;\n        const curCharFrames = characterUsage[internalCharacterId!] || 0;\n        const player = {\n          ...prevPlayer,\n          characterUsage: {\n            ...characterUsage,\n            [internalCharacterId!]: curCharFrames + 1,\n          },\n        };\n        (this.metadata.players as any)[playerIndex!] = player;\n        break;\n    }\n  }\n\n  private _setupListeners(): void {\n    const streamListener = (data: SlpCommandEventPayload): void => {\n      this._onCommand(data);\n    };\n    this.slpStream.on(SlpStreamEvent.COMMAND, streamListener);\n\n    this.on(\"finish\", () => {\n      // Update file with bytes written\n      console.error(\"removed stuff here for cloudflare worker support\");\n\n      // Unsubscribe from the stream\n      this.slpStream.removeListener(SlpStreamEvent.COMMAND, streamListener);\n      // Terminate the internal stream\n      if (!this.usesExternalStream) {\n        this.slpStream.end();\n      }\n    });\n  }\n\n  private _initializeNewGame(filePath: string): void {\n    console.error(\"removed stuff here for cloudflare worker support\");\n  }\n\n  public _final(callback: (error?: Error | null) => void): void {\n    let footer = Buffer.concat([Buffer.from(\"U\"), Buffer.from([8]), Buffer.from(\"metadata{\")]);\n\n    // Write game start time\n    const startTimeStr = this.metadata.startTime.toISOString();\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([7]),\n      Buffer.from(\"startAtSU\"),\n      Buffer.from([startTimeStr.length]),\n      Buffer.from(startTimeStr),\n    ]);\n\n    // Write last frame index\n    // TODO: Get last frame\n    const lastFrame = this.metadata.lastFrame;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([9]),\n      Buffer.from(\"lastFramel\"),\n      createInt32Buffer(lastFrame),\n    ]);\n\n    // write the Console Nickname\n    const consoleNick = this.metadata.consoleNickname || DEFAULT_NICKNAME;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([11]),\n      Buffer.from(\"consoleNickSU\"),\n      Buffer.from([consoleNick.length]),\n      Buffer.from(consoleNick),\n    ]);\n\n    // Start writting player specific data\n    footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([7]), Buffer.from(\"players{\")]);\n    const players = this.metadata.players;\n    forEach(players, (player, index) => {\n      // Start player obj with index being the player index\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([index.length]), Buffer.from(`${index}{`)]);\n\n      // Start characters key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([10]), Buffer.from(\"characters{\")]);\n\n      // Write character usage\n      forEach(player.characterUsage, (usage, internalId) => {\n        // Write this character\n        footer = Buffer.concat([\n          footer,\n          Buffer.from(\"U\"),\n          Buffer.from([internalId.length]),\n          Buffer.from(`${internalId}l`),\n          createUInt32Buffer(usage),\n        ]);\n      });\n\n      // Close characters\n      footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n      // Start names key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([5]), Buffer.from(\"names{\")]);\n\n      // Write display name\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([7]),\n        Buffer.from(\"netplaySU\"),\n        Buffer.from([player.names.netplay.length]),\n        Buffer.from(`${player.names.netplay}`),\n      ]);\n\n      // Write connect code\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([4]),\n        Buffer.from(\"codeSU\"),\n        Buffer.from([player.names.code.length]),\n        Buffer.from(`${player.names.code}`),\n      ]);\n\n      // Close names and player\n      footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n    });\n\n    // Close players\n    footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n    // Write played on\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([8]),\n      Buffer.from(\"playedOnSU\"),\n      Buffer.from([7]),\n      Buffer.from(\"network\"),\n    ]);\n\n    // Close metadata and file\n    footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n\n    // End the stream\n    if (this.fileStream) {\n      this.fileStream.write(footer, callback);\n    }\n  }\n}\n\nconst createInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeInt32BE(number, 0);\n  return buf;\n};\n\nconst createUInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeUInt32BE(number, 0);\n  return buf;\n};\n"],"names":["DEFAULT_NICKNAME","SlpFile","Writable","constructor","filePath","slpStream","opts","metadata","fileStream","rawDataLength","usesExternalStream","consoleNickname","startTime","Date","lastFrame","players","Boolean","SlpStream","mode","SlpStreamMode","MANUAL","_setupListeners","_initializeNewGame","path","setMetadata","Object","assign","_write","chunk","encoding","callback","Error","write","length","_onCommand","data","command","payload","Command","GAME_START","forEach","player","type","playerIndex","characterUsage","names","netplay","displayName","code","connectCode","POST_FRAME_UPDATE","frame","isFollower","internalCharacterId","prevPlayer","curCharFrames","streamListener","on","SlpStreamEvent","COMMAND","console","error","removeListener","end","_final","footer","Buffer","concat","from","startTimeStr","toISOString","createInt32Buffer","consoleNick","index","usage","internalId","createUInt32Buffer","number","buf","alloc","writeInt32BE","writeUInt32BE"],"mappings":";;;;;AAUA,MAAMA,gBAAgB,GAAG,SAAS,CAAA;AAmBlC;;;;;;AAMG;AACG,MAAOC,OAAQ,SAAQC,QAAQ,CAAA;AAQnC;;;;;AAKG;AACHC,EAAAA,WAAAA,CAAmBC,QAAgB,EAAEC,SAAqB,EAAEC,IAAsB,EAAA;IAChF,KAAK,CAACA,IAAI,CAAC,CAAA;AAAC,IAAA,IAAA,CAdNF,QAAQ,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACRG,QAAQ,GAAA,KAAA,CAAA,CAAA;IAAA,IACRC,CAAAA,UAAU,GAAuB,IAAI,CAAA;IAAA,IACrCC,CAAAA,aAAa,GAAG,CAAC,CAAA;AAAA,IAAA,IAAA,CACjBJ,SAAS,GAAA,KAAA,CAAA,CAAA;IAAA,IACTK,CAAAA,kBAAkB,GAAG,KAAK,CAAA;IAUhC,IAAI,CAACN,QAAQ,GAAGA,QAAQ,CAAA;IACxB,IAAI,CAACG,QAAQ,GAAG;AACdI,MAAAA,eAAe,EAAEX,gBAAgB;AACjCY,MAAAA,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,SAAS,EAAE,CAAC,GAAG;AACfC,MAAAA,OAAO,EAAE,EAAE;KACZ,CAAA;AACD,IAAA,IAAI,CAACL,kBAAkB,GAAGM,OAAO,CAACX,SAAS,CAAC,CAAA;AAE5C;AACA;IACA,IAAI,CAACA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAG,IAAIY,SAAS,CAAC;MAAEC,IAAI,EAAEC,aAAa,CAACC,MAAAA;AAAQ,KAAA,CAAC,CAAA;IAEtF,IAAI,CAACC,eAAe,EAAE,CAAA;AACtB,IAAA,IAAI,CAACC,kBAAkB,CAAC,IAAI,CAAClB,QAAQ,CAAC,CAAA;AACxC,GAAA;AAEA;;;;;AAKG;AACImB,EAAAA,IAAIA,GAAA;IACT,OAAO,IAAI,CAACnB,QAAQ,CAAA;AACtB,GAAA;AAEA;;;AAGG;EACIoB,WAAWA,CAACjB,QAAkC,EAAA;AACnD,IAAA,IAAI,CAACA,QAAQ,GAAGkB,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACnB,QAAQ,EAAEA,QAAQ,CAAC,CAAA;AAC5D,GAAA;AAEOoB,EAAAA,MAAMA,CAACC,KAAiB,EAAEC,QAAgB,EAAEC,QAAwC,EAAA;IACzF,IAAID,QAAQ,KAAK,QAAQ,EAAE;AACzB,MAAA,MAAM,IAAIE,KAAK,CAAC,CAAuDF,oDAAAA,EAAAA,QAAQ,IAAI,CAAC,CAAA;AACrF,KAAA;AACD;IACA,IAAI,IAAI,CAACrB,UAAU,EAAE;AACnB,MAAA,IAAI,CAACA,UAAU,CAACwB,KAAK,CAACJ,KAAK,CAAC,CAAA;AAC7B,KAAA;AAED;AACA,IAAA,IAAI,CAAC,IAAI,CAAClB,kBAAkB,EAAE;AAC5B,MAAA,IAAI,CAACL,SAAS,CAAC2B,KAAK,CAACJ,KAAK,CAAC,CAAA;AAC5B,KAAA;AAED;AACA,IAAA,IAAI,CAACnB,aAAa,IAAImB,KAAK,CAACK,MAAM,CAAA;AAClCH,IAAAA,QAAQ,EAAE,CAAA;AACZ,GAAA;AAEA;;;;;;AAMG;EACKI,UAAUA,CAACC,IAA4B,EAAA;IAC7C,MAAM;MAAEC,OAAO;AAAEC,MAAAA,OAAAA;AAAS,KAAA,GAAGF,IAAI,CAAA;AACjC,IAAA,QAAQC,OAAO;MACb,KAAKE,OAAO,CAACC,UAAU;QACrB,MAAM;AAAExB,UAAAA,OAAAA;AAAS,SAAA,GAAGsB,OAAwB,CAAA;AAC5CG,QAAAA,OAAO,CAACzB,OAAO,EAAG0B,MAAM,IAAI;AAC1B,UAAA,IAAIA,MAAM,CAACC,IAAI,KAAK,CAAC,EAAE;AACrB,YAAA,OAAA;AACD,WAAA;UAED,IAAI,CAACnC,QAAQ,CAACQ,OAAO,CAAC0B,MAAM,CAACE,WAAW,CAAC,GAAG;YAC1CC,cAAc,EAAE,EAAE;AAClBC,YAAAA,KAAK,EAAE;cACLC,OAAO,EAAEL,MAAM,CAACM,WAAW;cAC3BC,IAAI,EAAEP,MAAM,CAACQ,WAAAA;AACd,aAAA;WACF,CAAA;AACH,SAAC,CAAC,CAAA;AACF,QAAA,MAAA;MACF,KAAKX,OAAO,CAACY,iBAAiB;AAC5B;QACA,MAAM;UAAEC,KAAK;UAAER,WAAW;UAAES,UAAU;AAAEC,UAAAA,mBAAAA;AAAmB,SAAE,GAAGhB,OAA8B,CAAA;AAC9F,QAAA,IAAIe,UAAU,EAAE;AACd;AACA,UAAA,MAAA;AACD,SAAA;AAED;AACA,QAAA,IAAI,CAAC7C,QAAQ,CAACO,SAAS,GAAGqC,KAAM,CAAA;AAEhC;QACA,MAAMG,UAAU,GAAG,IAAI,CAAC/C,QAAQ,CAACQ,OAAO,CAAC4B,WAAY,CAAC,CAAA;AACtD,QAAA,MAAMC,cAAc,GAAGU,UAAW,CAACV,cAAc,CAAA;AACjD,QAAA,MAAMW,aAAa,GAAGX,cAAc,CAACS,mBAAoB,CAAC,IAAI,CAAC,CAAA;AAC/D,QAAA,MAAMZ,MAAM,GAAG;AACb,UAAA,GAAGa,UAAU;AACbV,UAAAA,cAAc,EAAE;AACd,YAAA,GAAGA,cAAc;YACjB,CAACS,mBAAoB,GAAGE,aAAa,GAAG,CAAA;AACzC,WAAA;SACF,CAAA;QACA,IAAI,CAAChD,QAAQ,CAACQ,OAAe,CAAC4B,WAAY,CAAC,GAAGF,MAAM,CAAA;AACrD,QAAA,MAAA;AACH,KAAA;AACH,GAAA;AAEQpB,EAAAA,eAAeA,GAAA;IACrB,MAAMmC,cAAc,GAAIrB,IAA4B,IAAU;AAC5D,MAAA,IAAI,CAACD,UAAU,CAACC,IAAI,CAAC,CAAA;KACtB,CAAA;IACD,IAAI,CAAC9B,SAAS,CAACoD,EAAE,CAACC,cAAc,CAACC,OAAO,EAAEH,cAAc,CAAC,CAAA;AAEzD,IAAA,IAAI,CAACC,EAAE,CAAC,QAAQ,EAAE,MAAK;AACrB;AACAG,MAAAA,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC,CAAA;AAEjE;MACA,IAAI,CAACxD,SAAS,CAACyD,cAAc,CAACJ,cAAc,CAACC,OAAO,EAAEH,cAAc,CAAC,CAAA;AACrE;AACA,MAAA,IAAI,CAAC,IAAI,CAAC9C,kBAAkB,EAAE;AAC5B,QAAA,IAAI,CAACL,SAAS,CAAC0D,GAAG,EAAE,CAAA;AACrB,OAAA;AACH,KAAC,CAAC,CAAA;AACJ,GAAA;EAEQzC,kBAAkBA,CAAClB,QAAgB,EAAA;AACzCwD,IAAAA,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC,CAAA;AACnE,GAAA;EAEOG,MAAMA,CAAClC,QAAwC,EAAA;AACpD,IAAA,IAAImC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACD,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAAEF,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEF,MAAM,CAACE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;AAE1F;IACA,MAAMC,YAAY,GAAG,IAAI,CAAC9D,QAAQ,CAACK,SAAS,CAAC0D,WAAW,EAAE,CAAA;IAC1DL,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CACrBF,MAAM,EACNC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,WAAW,CAAC,EACxBF,MAAM,CAACE,IAAI,CAAC,CAACC,YAAY,CAACpC,MAAM,CAAC,CAAC,EAClCiC,MAAM,CAACE,IAAI,CAACC,YAAY,CAAC,CAC1B,CAAC,CAAA;AAEF;AACA;AACA,IAAA,MAAMvD,SAAS,GAAG,IAAI,CAACP,QAAQ,CAACO,SAAS,CAAA;AACzCmD,IAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CACrBF,MAAM,EACNC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,YAAY,CAAC,EACzBG,iBAAiB,CAACzD,SAAS,CAAC,CAC7B,CAAC,CAAA;AAEF;IACA,MAAM0D,WAAW,GAAG,IAAI,CAACjE,QAAQ,CAACI,eAAe,IAAIX,gBAAgB,CAAA;IACrEiE,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CACrBF,MAAM,EACNC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EACjBF,MAAM,CAACE,IAAI,CAAC,eAAe,CAAC,EAC5BF,MAAM,CAACE,IAAI,CAAC,CAACI,WAAW,CAACvC,MAAM,CAAC,CAAC,EACjCiC,MAAM,CAACE,IAAI,CAACI,WAAW,CAAC,CACzB,CAAC,CAAA;AAEF;AACAP,IAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACF,MAAM,EAAEC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAAEF,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEF,MAAM,CAACE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;AAC7F,IAAA,MAAMrD,OAAO,GAAG,IAAI,CAACR,QAAQ,CAACQ,OAAO,CAAA;AACrCyB,IAAAA,OAAO,CAACzB,OAAO,EAAE,CAAC0B,MAAM,EAAEgC,KAAK,KAAI;AACjC;AACAR,MAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACF,MAAM,EAAEC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAAEF,MAAM,CAACE,IAAI,CAAC,CAACK,KAAK,CAACxC,MAAM,CAAC,CAAC,EAAEiC,MAAM,CAACE,IAAI,CAAC,CAAGK,EAAAA,KAAK,CAAG,CAAA,CAAA,CAAC,CAAC,CAAC,CAAA;AAEzG;AACAR,MAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACF,MAAM,EAAEC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAAEF,MAAM,CAACE,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEF,MAAM,CAACE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;AAEjG;MACA5B,OAAO,CAACC,MAAM,CAACG,cAAc,EAAE,CAAC8B,KAAK,EAAEC,UAAU,KAAI;AACnD;AACAV,QAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CACrBF,MAAM,EACNC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,CAACO,UAAU,CAAC1C,MAAM,CAAC,CAAC,EAChCiC,MAAM,CAACE,IAAI,CAAC,CAAA,EAAGO,UAAU,CAAA,CAAA,CAAG,CAAC,EAC7BC,kBAAkB,CAACF,KAAK,CAAC,CAC1B,CAAC,CAAA;AACJ,OAAC,CAAC,CAAA;AAEF;AACAT,MAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACF,MAAM,EAAEC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;AAElD;AACAH,MAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACF,MAAM,EAAEC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAAEF,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEF,MAAM,CAACE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;AAE3F;MACAH,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CACrBF,MAAM,EACNC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,WAAW,CAAC,EACxBF,MAAM,CAACE,IAAI,CAAC,CAAC3B,MAAM,CAACI,KAAK,CAACC,OAAO,CAACb,MAAM,CAAC,CAAC,EAC1CiC,MAAM,CAACE,IAAI,CAAC,CAAA,EAAG3B,MAAM,CAACI,KAAK,CAACC,OAAO,CAAA,CAAE,CAAC,CACvC,CAAC,CAAA;AAEF;MACAmB,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CACrBF,MAAM,EACNC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,QAAQ,CAAC,EACrBF,MAAM,CAACE,IAAI,CAAC,CAAC3B,MAAM,CAACI,KAAK,CAACG,IAAI,CAACf,MAAM,CAAC,CAAC,EACvCiC,MAAM,CAACE,IAAI,CAAC,CAAA,EAAG3B,MAAM,CAACI,KAAK,CAACG,IAAI,CAAA,CAAE,CAAC,CACpC,CAAC,CAAA;AAEF;AACAiB,MAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACF,MAAM,EAAEC,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACrD,KAAC,CAAC,CAAA;AAEF;AACAH,IAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACF,MAAM,EAAEC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;AAElD;IACAH,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CACrBF,MAAM,EACNC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,YAAY,CAAC,EACzBF,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChBF,MAAM,CAACE,IAAI,CAAC,SAAS,CAAC,CACvB,CAAC,CAAA;AAEF;AACAH,IAAAA,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACF,MAAM,EAAEC,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AAEnD;IACA,IAAI,IAAI,CAAC5D,UAAU,EAAE;MACnB,IAAI,CAACA,UAAU,CAACwB,KAAK,CAACiC,MAAM,EAAEnC,QAAQ,CAAC,CAAA;AACxC,KAAA;AACH,GAAA;AACD,CAAA;AAED,MAAMyC,iBAAiB,GAAIM,MAAc,IAAY;AACnD,EAAA,MAAMC,GAAG,GAAGZ,MAAM,CAACa,KAAK,CAAC,CAAC,CAAC,CAAA;AAC3BD,EAAAA,GAAG,CAACE,YAAY,CAACH,MAAM,EAAE,CAAC,CAAC,CAAA;AAC3B,EAAA,OAAOC,GAAG,CAAA;AACZ,CAAC,CAAA;AAED,MAAMF,kBAAkB,GAAIC,MAAc,IAAY;AACpD,EAAA,MAAMC,GAAG,GAAGZ,MAAM,CAACa,KAAK,CAAC,CAAC,CAAC,CAAA;AAC3BD,EAAAA,GAAG,CAACG,aAAa,CAACJ,MAAM,EAAE,CAAC,CAAC,CAAA;AAC5B,EAAA,OAAOC,GAAG,CAAA;AACZ,CAAC;;;;"}