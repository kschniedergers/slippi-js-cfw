{"version":3,"file":"characterUtils.esm.js","sources":["../../src/melee/characterUtils.ts"],"sourcesContent":["import characters from \"./characters.json\";\n\nexport type CharacterColor = string;\nconst DEFAULT_COLOR: CharacterColor = \"Default\";\n\nexport type CharacterInfo = {\n  id: number;\n  name: string;\n  shortName: string;\n  colors: CharacterColor[];\n};\n\nexport const UnknownCharacter: CharacterInfo = {\n  id: -1,\n  name: \"Unknown Character\",\n  shortName: \"Unknown\",\n  colors: [DEFAULT_COLOR],\n};\n\ntype CharacterId = keyof typeof characters;\n\nfunction generateCharacterInfo(\n  id: number,\n  info?: {\n    name: string;\n    shortName?: string;\n    colors?: CharacterColor[];\n  },\n): CharacterInfo {\n  if (!info) {\n    return UnknownCharacter;\n  }\n\n  return {\n    id,\n    name: info.name,\n    shortName: info.shortName ?? info.name,\n    colors: [DEFAULT_COLOR, ...(info.colors ?? [])],\n  };\n}\n\nexport function getAllCharacters(): CharacterInfo[] {\n  return Object.entries(characters)\n    .map(([id, data]) => generateCharacterInfo(parseInt(id, 10), data))\n    .sort((a, b) => a.id - b.id);\n}\n\nexport function getCharacterInfo(externalCharacterId: number): CharacterInfo {\n  const data = characters[externalCharacterId.toString() as CharacterId];\n  return generateCharacterInfo(externalCharacterId, data);\n}\n\nexport function getCharacterShortName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.shortName;\n}\n\nexport function getCharacterName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.name;\n}\n\n// Return a human-readable color from a characterCode.\nexport function getCharacterColorName(externalCharacterId: number, characterColor: number): CharacterColor {\n  const character = getCharacterInfo(externalCharacterId);\n  const color = character.colors[characterColor];\n  if (color) {\n    return color;\n  }\n  return DEFAULT_COLOR;\n}\n"],"names":["DEFAULT_COLOR","UnknownCharacter","id","name","shortName","colors","generateCharacterInfo","info","_info$shortName","_info$colors","getAllCharacters","Object","entries","characters","map","data","parseInt","sort","a","b","getCharacterInfo","externalCharacterId","toString","getCharacterShortName","character","getCharacterName","getCharacterColorName","characterColor","color"],"mappings":";;AAGA,MAAMA,aAAa,GAAmB,SAAS,CAAA;AASxC,MAAMC,gBAAgB,GAAkB;EAC7CC,EAAE,EAAE,CAAC,CAAC;AACNC,EAAAA,IAAI,EAAE,mBAAmB;AACzBC,EAAAA,SAAS,EAAE,SAAS;EACpBC,MAAM,EAAE,CAACL,aAAa,CAAA;EACvB;AAID,SAASM,qBAAqBA,CAC5BJ,EAAU,EACVK,IAIC,EAAA;EAAA,IAAAC,eAAA,EAAAC,YAAA,CAAA;EAED,IAAI,CAACF,IAAI,EAAE;AACT,IAAA,OAAON,gBAAgB,CAAA;AACxB,GAAA;EAED,OAAO;IACLC,EAAE;IACFC,IAAI,EAAEI,IAAI,CAACJ,IAAI;IACfC,SAAS,EAAA,CAAAI,eAAA,GAAED,IAAI,CAACH,SAAS,KAAA,IAAA,GAAAI,eAAA,GAAID,IAAI,CAACJ,IAAI;AACtCE,IAAAA,MAAM,EAAE,CAACL,aAAa,EAAE,KAAAS,YAAA,GAAIF,IAAI,CAACF,MAAM,KAAA,IAAA,GAAAI,YAAA,GAAI,EAAE,CAAC,CAAA;GAC/C,CAAA;AACH,CAAA;SAEgBC,gBAAgBA,GAAA;AAC9B,EAAA,OAAOC,MAAM,CAACC,OAAO,CAACC,UAAU,CAAC,CAC9BC,GAAG,CAAC,CAAC,CAACZ,EAAE,EAAEa,IAAI,CAAC,KAAKT,qBAAqB,CAACU,QAAQ,CAACd,EAAE,EAAE,EAAE,CAAC,EAAEa,IAAI,CAAC,CAAC,CAClEE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAChB,EAAE,GAAGiB,CAAC,CAACjB,EAAE,CAAC,CAAA;AAChC,CAAA;AAEM,SAAUkB,gBAAgBA,CAACC,mBAA2B,EAAA;EAC1D,MAAMN,IAAI,GAAGF,UAAU,CAACQ,mBAAmB,CAACC,QAAQ,EAAiB,CAAC,CAAA;AACtE,EAAA,OAAOhB,qBAAqB,CAACe,mBAAmB,EAAEN,IAAI,CAAC,CAAA;AACzD,CAAA;AAEM,SAAUQ,qBAAqBA,CAACF,mBAA2B,EAAA;AAC/D,EAAA,MAAMG,SAAS,GAAGJ,gBAAgB,CAACC,mBAAmB,CAAC,CAAA;EACvD,OAAOG,SAAS,CAACpB,SAAS,CAAA;AAC5B,CAAA;AAEM,SAAUqB,gBAAgBA,CAACJ,mBAA2B,EAAA;AAC1D,EAAA,MAAMG,SAAS,GAAGJ,gBAAgB,CAACC,mBAAmB,CAAC,CAAA;EACvD,OAAOG,SAAS,CAACrB,IAAI,CAAA;AACvB,CAAA;AAEA;AACgB,SAAAuB,qBAAqBA,CAACL,mBAA2B,EAAEM,cAAsB,EAAA;AACvF,EAAA,MAAMH,SAAS,GAAGJ,gBAAgB,CAACC,mBAAmB,CAAC,CAAA;AACvD,EAAA,MAAMO,KAAK,GAAGJ,SAAS,CAACnB,MAAM,CAACsB,cAAc,CAAC,CAAA;AAC9C,EAAA,IAAIC,KAAK,EAAE;AACT,IAAA,OAAOA,KAAK,CAAA;AACb,GAAA;AACD,EAAA,OAAO5B,aAAa,CAAA;AACtB;;;;"}